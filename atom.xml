<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damit5&#39;s Blog</title>
  
  
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-30T04:06:44.283Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Damit 5</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>demo</title>
    <link href="http://yoursite.com/2017/09/30/demo/"/>
    <id>http://yoursite.com/2017/09/30/demo/</id>
    <published>2017-09-30T04:06:09.000Z</published>
    <updated>2017-09-30T04:06:44.283Z</updated>
    
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><a id="more"></a><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>site</code></td><td>Sitewide information.</td></tr><tr><td><code>page</code></td><td>Page specific information and custom variables set in front-matter.</td></tr><tr><td><code>config</code></td><td>Site configuration</td></tr><tr><td><code>theme</code></td><td>Theme configuration. Inherits from site configuration.</td></tr><tr><td><code>_</code> (single underscore)</td><td><a href="http://lodash.com/" target="_blank" rel="external">Lodash</a> library</td></tr><tr><td><code>path</code></td><td>Path of current page</td></tr><tr><td><code>url</code></td><td>Full URL of current page</td></tr><tr><td><code>env</code></td><td>Environment variables</td></tr></tbody></table><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><div class="note"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$breakpoint-map: (</div><div class="line">    small: (</div><div class="line">        min-width: null,</div><div class="line">        max-width: 479px,</div><div class="line">        base-font: 16px,</div><div class="line">        vertical-rhythm: 1.3</div><div class="line">    ),</div><div class="line">    medium: (</div><div class="line">        min-width: 480px,</div><div class="line">        max-width: 959px,</div><div class="line">        base-font: 18px,</div><div class="line">        vertical-rhythm: 1.414</div><div class="line">    ),</div><div class="line">    large: (</div><div class="line">        min-width: 960px,</div><div class="line">        max-width: 1099px,</div><div class="line">        base-font: 18px,</div><div class="line">        vertical-rhythm: 1.5</div><div class="line">    ),</div><div class="line">    xlarge: (</div><div class="line">        min-width: 1100px,</div><div class="line">        max-width: null,</div><div class="line">        base-font: 21px,</div><div class="line">        vertical-rhythm: 1.618</div><div class="line">    )</div><div class="line">);</div></pre></td></tr></table></figure><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$breakpoint-list: (</div><div class="line">    (small, null, 479px, 16px, 1.3),</div><div class="line">    (medium, 480px, 959px, 18px, 1.414),</div><div class="line">    (large, 960px, 1099px, 18px, 1.5),</div><div class="line">    (xlarge, 1100px, null, 21px, 1.618)</div><div class="line">);</div></pre></td></tr></table></figure><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><div class="note info"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@each $label, $map in $breakpoint-map &#123;&#125;</div></pre></td></tr></table></figure><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@each $label, $map in $breakpoint-map &#123;</div><div class="line">    $min-width: map-get($map, min-width);</div><div class="line">    $max-width: map-get($map, max-width);</div><div class="line">    $base-font: map-get($map, base-font);</div><div class="line">    $vertical-rhythm: map-get($map, vertical-rhythm);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><div class="note warning"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$breakpoint-list: (</div><div class="line">    (small, null, 479px, 16px, 1.3),</div><div class="line">    (medium, 480px, 959px, 18px, 1.414),</div><div class="line">    (large, 960px, 1099px, 18px, 1.5),</div><div class="line">    (xlarge, 1100px, 21px, 1.618)</div><div class="line">);</div><div class="line"></div><div class="line">p &#123;</div><div class="line">    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</div><div class="line">        @if $min-width &#123;</div><div class="line">            @include breakpoint( $min-width ) &#123;</div><div class="line">                font-size: $base-font;</div><div class="line">                line-height: $vertical-rhythm;</div><div class="line">            &#125;</div><div class="line">        &#125; @else &#123;</div><div class="line">            font-size: $base-font;</div><div class="line">            line-height: $vertical-rhythm;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$medium-map: map-get($maps, medium);</div></pre></td></tr></table></figure><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@function get-list($label) &#123;</div><div class="line">    @each $list in $breakpoint-list &#123;</div><div class="line">        @if nth($list, 1) == $label &#123;</div><div class="line">            @return $list;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    @return null;</div><div class="line">&#125;</div><div class="line">$medium-list: get-list(medium);</div></pre></td></tr></table></figure><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note unreleased"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="demo" scheme="http://yoursite.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>text</title>
    <link href="http://yoursite.com/2017/09/30/text/"/>
    <id>http://yoursite.com/2017/09/30/text/</id>
    <published>2017-09-30T04:03:12.000Z</published>
    <updated>2017-09-30T04:05:58.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="one"><a href="#one" class="headerlink" title="one"></a>one</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">look me</div></pre></td></tr></table></figure><h2 id="two"><a href="#two" class="headerlink" title="two"></a>two</h2><p>222<code>looke me two</code>333</p><h2 id="three"><a href="#three" class="headerlink" title="three"></a>three</h2><p>I dont konw this</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;one&quot;&gt;&lt;a href=&quot;#one&quot; class=&quot;headerlink&quot; title=&quot;one&quot;&gt;&lt;/a&gt;one&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
      
    
    </summary>
    
    
      <category term="TEST" scheme="http://yoursite.com/tags/TEST/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/09/30/Hello-World/"/>
    <id>http://yoursite.com/2017/09/30/Hello-World/</id>
    <published>2017-09-30T03:36:02.000Z</published>
    <updated>2017-09-30T04:01:20.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经过一天的努力博客终于完全完全移植了过来，听说第一篇 <strong>Hello World</strong> 是惯例，也许就是因为以前没有遵守这个惯例所以博客老GG，不管怎么样，还是写一个吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World</div></pre></td></tr></table></figure></p><a id="more"></a><p>因为在博客移植过程中也遇到了很多的坑，所以打算记录一下博客搭建的过程，也希望能为以后准备搭建博客的提供一些帮助</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><blockquote><p>因为我在Windows上搭建老是GG，所以干脆直接搭建在Ubuntu上，所以下列教程也适用于Ubuntu</p></blockquote><h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a><a href="https://github.com/" target="_blank" rel="external">官网</a></h4><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><h5 id="1-登陆GitHub"><a href="#1-登陆GitHub" class="headerlink" title="1.登陆GitHub"></a>1.登陆GitHub</h5><h5 id="2-点击创建仓库"><a href="#2-点击创建仓库" class="headerlink" title="2.点击创建仓库"></a>2.点击创建仓库</h5><p><img src="http://r.photo.store.qq.com/psb?/V12DlJ9S2zSi6P/WwMsregcp9apgZFL1D0CwO..wGb4hkp8X8AaQ5DcVbw!/r/dDwBAAAAAAAA" alt="1"></p><h5 id="3-填写仓库信息"><a href="#3-填写仓库信息" class="headerlink" title="3.填写仓库信息"></a>3.填写仓库信息</h5><p>仓库名称必须是<strong>用户名.github.io</strong>（官方是这样写的，我也不知道为什么），比如我的用户名是damit5，那么我就填<strong>damit5.github.io</strong></p><p><img src="http://r.photo.store.qq.com/psb?/V12DlJ9S2zSi6P/JlhnxVcDc4JkWhWKxmuAfU5iKkBmU1umhoJiBJ87Ooo!/r/dD0BAAAAAAAA" alt="2"></p><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><h4 id="1-设置user-name-和-email"><a href="#1-设置user-name-和-email" class="headerlink" title="1.设置user name 和 email :"></a>1.设置user name 和 email :</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;你的GitHub用户名&quot;</div><div class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</div></pre></td></tr></table></figure><h4 id="2-生成ssh密钥"><a href="#2-生成ssh密钥" class="headerlink" title="2.生成ssh密钥"></a>2.生成ssh密钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</div></pre></td></tr></table></figure><blockquote><p>一般这种情况下是不需要密码的，所以一直回车就好</p></blockquote><h6 id="成功后，用户文件夹下就会有一个新的文件夹-ssh，里面就有刚刚创建的ssh密钥文件id-rsa和id-rsa-pub"><a href="#成功后，用户文件夹下就会有一个新的文件夹-ssh，里面就有刚刚创建的ssh密钥文件id-rsa和id-rsa-pub" class="headerlink" title="成功后，用户文件夹下就会有一个新的文件夹 .ssh，里面就有刚刚创建的ssh密钥文件id_rsa和id_rsa_pub"></a>成功后，用户文件夹下就会有一个新的文件夹 <strong>.ssh</strong>，里面就有刚刚创建的ssh密钥文件<strong>id_rsa</strong>和<strong>id_rsa_pub</strong></h6><blockquote><p>注：id_rsa文件是私钥，要妥善保管，id_rsa.pub是公钥文件。</p></blockquote><h4 id="3-添加公钥到GitHub"><a href="#3-添加公钥到GitHub" class="headerlink" title="3.添加公钥到GitHub"></a>3.添加公钥到GitHub</h4><p>点击用户头像，然后再点击<strong>Settings</strong>选项</p><p>在用户设置栏，点击<strong>SSH and GPG keys</strong>选项，然后点击<strong>New SSH key</strong></p><p>将 <strong>id_rsa.pub</strong> 的内容复制到<strong>Key</strong> 文本框中，再点击<strong>Add SSH key</strong></p><h4 id="4-测试SSH"><a href="#4-测试SSH" class="headerlink" title="4.测试SSH"></a>4.测试SSH</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure><p>接下来会显示出下面的确认信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host &apos;github.com (192.30.255.112)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure><p>输入<strong>yes</strong>然后回车</p><p>如果显示出下面的内容则表示成功（damit5是用户名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi damit5! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash`</div></pre></td></tr></table></figure><p>然后，将以下代码添加至到profile(<figure class="highlight plain"><figcaption><span>```~/.zshrc```， ``` ~/.profile```， ```~/.bashrc```其中之一)文件中</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</div><div class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;</div></pre></td></tr></table></figure></p><p>重启终端，输入以下指令安装node最新的LTS版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm install --lts=boron</div></pre></td></tr></table></figure><h3 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h3><p>Node.js默认是通过npm进行包管理的，但npm官方源在国内速度那可叫一个酸爽，而且还经常抽疯，原因大家都懂的，如果没有好梯子，建议大家使用<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝npm镜像</a>，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><p>安装成功后，就可以能过以下指令加速安装相用包啦<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install [PackageName]</div></pre></td></tr></table></figure></p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p>安装好Node.js环境后，就可以通过node的npm包管理工具安装Hexo，执行以下指令(当然cnpm可以换成npm，这里使用淘宝加速)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo-cli -g</div></pre></td></tr></table></figure><blockquote><p>hexo全局安装一次就够了，后面可以直接使用hexo相关的操作。</p></blockquote><h4 id="创建博客文件夹"><a href="#创建博客文件夹" class="headerlink" title="创建博客文件夹"></a>创建博客文件夹</h4><blockquote><p>在此目录下管理自己的博客源码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir blog</div><div class="line"></div><div class="line">cd blog</div></pre></td></tr></table></figure><h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure><h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install</div></pre></td></tr></table></figure><h4 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure><h4 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure><blockquote><p>上面2条命令也可以结合为<figure class="highlight plain"><figcaption><span>s -g```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">出现以下内容则说明hexo环境安装成功</div></pre></td></tr></table></figure></p></blockquote><p>INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>. Press Ctrl+C to stop.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 部署Hexo</div><div class="line"></div><div class="line">#### 1.编辑配置文件，关闭远程仓库</div><div class="line"></div><div class="line">编辑```_config.yml```,找到最后的内容</div></pre></td></tr></table></figure><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">添加GitHub仓库信息</div></pre></td></tr></table></figure><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html-1"><a href="#Docs-https-hexo-io-docs-deployment-html-1" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type:  git<br>  repo:  git@github.com:damit5/damit5.github.io.git<br>  branch:  master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; PS: type、repo、branch的前面和后面都有2个空格</div><div class="line"></div><div class="line">#### 2.安装git插件</div></pre></td></tr></table></figure><p>cnpm install hexo-deployer-git –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 3.部署</div></pre></td></tr></table></figure></p><p>hexo deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如果没有意外，部署就成功了，可以打开 https://&lt;用户名&gt;.github.io 查看。</div><div class="line"></div><div class="line">比如我的就是 : https://damit5.github.io/</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">## 域名配置</div><div class="line">现在已经可以通过 https://yourname.github.io 来访问自己的博客站点啦。这时可能有人会说了，大家都通过github.io来访问，好没个性，能不能配置用自己的域名来访问自己的站点。答案当然可以。</div><div class="line"></div><div class="line">首先，你得有个自己的域名，如果还没，那就去买个。</div><div class="line"></div><div class="line">#### 1.进域名控制台</div><div class="line"></div><div class="line">在解析里面添加一条**CNAME**记录，指向yourname.github.io即可。</div><div class="line"></div><div class="line">![3](http://r.photo.store.qq.com/psb?/V12DlJ9S2zSi6P/RxFprVpwLiDZ*4kAXXIhVwk7WNHfQlI3fRgcmtxJ6N0!/r/dD0BAAAAAAAA)</div><div class="line"></div><div class="line">#### 2.打开项目，选择 setting</div><div class="line">![4](http://r.photo.store.qq.com/psb?/V12DlJ9S2zSi6P/JX0zcsxH*PLMvGpISjWLBOEOEbL6NhU6ufCEwsIFw*U!/r/dPcAAAAAAAAA)</div><div class="line"></div><div class="line">#### 3.找到GitHub Pages （每次deploy过后都需要修改一次）</div><div class="line">![5](http://r.photo.store.qq.com/psb?/V12DlJ9S2zSi6P/iIOHe4CE4zSqPnERwhbTvYpeUB5qdl6*ee9N0xkrbxA!/r/dLMAAAAAAAAA)</div><div class="line"></div><div class="line">这样就可以通过自己的域名来访问了</div><div class="line"></div><div class="line">## 其他</div><div class="line"></div><div class="line">### 基础</div></pre></td></tr></table></figure></p><p>hexo new”postName”      #新建文章<br>hexo new page”pageName” #新建页面<br>hexo generate           #生成静态页面至public目录<br>hexo clean              #清除生成内容<br>hexo server             #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy             #将.deploy目录部署到指定空间<br>hexo help               # 查看帮助<br>hexo version            #查看Hexo的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### hexo 命令缩写</div></pre></td></tr></table></figure></p><p>hexo g：hexo generate<br>hexo c：hexo clean<br>hexo s：hexo server<br>hexo d：hexo deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### hexo 命令组合</div></pre></td></tr></table></figure></p><p>hexo clean &amp;&amp; hexo g -s #清除、生成、启动<br>hexo clean &amp;&amp; hexo g -d #清除、生成、部署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p><p>nvm install –lts=boron<br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;经过一天的努力博客终于完全完全移植了过来，听说第一篇 &lt;strong&gt;Hello World&lt;/strong&gt; 是惯例，也许就是因为以前没有遵守这个惯例所以博客老GG，不管怎么样，还是写一个吧&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Hello World&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
